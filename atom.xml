<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莱蒙黎梦</title>
  
  <subtitle>全栈开发日志</subtitle>
  <link href="http://www.lymone.cc/atom.xml" rel="self"/>
  
  <link href="http://www.lymone.cc/"/>
  <updated>2025-05-10T09:11:26.324Z</updated>
  <id>http://www.lymone.cc/</id>
  
  <author>
    <name>Lymone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中国矿业大学Python编程实践</title>
    <link href="http://www.lymone.cc/p/2716373b.html"/>
    <id>http://www.lymone.cc/p/2716373b.html</id>
    <published>2025-05-10T04:20:00.000Z</published>
    <updated>2025-05-10T09:11:26.324Z</updated>
    
    <content type="html"><![CDATA[<p>2025 CUMT 中国矿业大学 Python 编程实践 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><p>@[TOC]</p><h2 id="Practice2"><a href="#Practice2" class="headerlink" title="Practice2"></a>Practice2</h2><h3 id="Practice2-1-py"><a href="#Practice2-1-py" class="headerlink" title="Practice2\1.py"></a>Practice2\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>//<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>[i] != <span class="built_in">str</span>[<span class="built_in">len</span>-i-<span class="number">1</span>]:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="Practice2-10-py"><a href="#Practice2-10-py" class="headerlink" title="Practice2\10.py"></a>Practice2\10.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">votes = [<span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line">candidate = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result = candidate <span class="keyword">in</span> votes</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="Practice2-11-py"><a href="#Practice2-11-py" class="headerlink" title="Practice2\11.py"></a>Practice2\11.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grades = &#123;<span class="string">&#x27;J01&#x27;</span>:<span class="number">88</span>,<span class="string">&#x27;J02&#x27;</span>:<span class="number">60</span>,<span class="string">&#x27;J03&#x27;</span>:<span class="number">80</span>,<span class="string">&#x27;J04&#x27;</span>:<span class="number">96</span>,<span class="string">&#x27;J05&#x27;</span>:<span class="number">86</span>,<span class="string">&#x27;J06&#x27;</span>:<span class="number">75</span>,<span class="string">&#x27;J07&#x27;</span>:<span class="number">76</span>,<span class="string">&#x27;J08&#x27;</span>:<span class="number">82</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(grades[<span class="string">&#x27;J06&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(grades.values())</span><br></pre></td></tr></table></figure><h3 id="Practice2-12-py"><a href="#Practice2-12-py" class="headerlink" title="Practice2\12.py"></a>Practice2\12.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">month_days = &#123;<span class="number">1</span>:<span class="number">31</span>, <span class="number">2</span>:<span class="number">28</span>, <span class="number">3</span>:<span class="number">31</span>, <span class="number">4</span>:<span class="number">30</span>, <span class="number">5</span>:<span class="number">31</span>, <span class="number">6</span>:<span class="number">30</span>, <span class="number">7</span>:<span class="number">31</span>, <span class="number">8</span>:<span class="number">31</span>, <span class="number">9</span>:<span class="number">30</span>, <span class="number">10</span>:<span class="number">31</span>, <span class="number">11</span>:<span class="number">30</span>, <span class="number">12</span>:<span class="number">31</span>&#125;</span><br><span class="line">month = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(month_days[month])</span><br></pre></td></tr></table></figure><h3 id="Practice2-2-py"><a href="#Practice2-2-py" class="headerlink" title="Practice2\2.py"></a>Practice2\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>((temp-<span class="number">32</span>)*<span class="number">5</span>/<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h3 id="Practice2-3-py"><a href="#Practice2-3-py" class="headerlink" title="Practice2\3.py"></a>Practice2\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rate, base, year = <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">rate = <span class="built_in">float</span>(rate)</span><br><span class="line">base = <span class="built_in">int</span>(base)</span><br><span class="line">year = <span class="built_in">int</span>(year)</span><br><span class="line">per_month = rate*base/(<span class="number">1</span>-<span class="number">1</span>/(<span class="number">1</span>+rate)**(year*<span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(per_month))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(per_month*year*<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h3 id="Practice2-4-py"><a href="#Practice2-4-py" class="headerlink" title="Practice2\4.py"></a>Practice2\4.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(<span class="built_in">input</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">input</span>[<span class="built_in">len</span>-i-<span class="number">1</span>],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice2-5-py"><a href="#Practice2-5-py" class="headerlink" title="Practice2\5.py"></a>Practice2\5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">&quot;,&quot;</span>:</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(<span class="built_in">list</span>)&#125;</span> <span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice2-6-py"><a href="#Practice2-6-py" class="headerlink" title="Practice2\6.py"></a>Practice2\6.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>()</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;w&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">       num+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="Practice2-7-py"><a href="#Practice2-7-py" class="headerlink" title="Practice2\7.py"></a>Practice2\7.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_str = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line">sorted_chars = <span class="built_in">sorted</span>(input_str)</span><br><span class="line">result = <span class="string">&#x27; &#x27;</span>.join(sorted_chars)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="Practice2-8-py"><a href="#Practice2-8-py" class="headerlink" title="Practice2\8.py"></a>Practice2\8.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scores = []</span></span><br><span class="line"><span class="comment"># for i in range(10):</span></span><br><span class="line"><span class="comment">#     scores.append(float(input()))</span></span><br><span class="line">scores = [<span class="number">8.5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line">scores.sort()</span><br><span class="line">scores = scores[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">average = <span class="built_in">sum</span>(scores) / <span class="built_in">len</span>(scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;average:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice2-9-py"><a href="#Practice2-9-py" class="headerlink" title="Practice2\9.py"></a>Practice2\9.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scores = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">fail_scores = [s <span class="keyword">for</span> s <span class="keyword">in</span> scores <span class="keyword">if</span> s &lt; <span class="number">60</span>]</span><br><span class="line">excellent_scores = [s <span class="keyword">for</span> s <span class="keyword">in</span> scores <span class="keyword">if</span> s &gt;= <span class="number">90</span>]</span><br><span class="line">fail_avg = <span class="built_in">sum</span>(fail_scores) / <span class="built_in">len</span>(fail_scores) <span class="keyword">if</span> fail_scores <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">excellent_avg = <span class="built_in">sum</span>(excellent_scores) / <span class="built_in">len</span>(excellent_scores) <span class="keyword">if</span> excellent_scores <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;fail_avg:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;excellent_avg:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Practice3"><a href="#Practice3" class="headerlink" title="Practice3"></a>Practice3</h2><h3 id="Practice3-1-py"><a href="#Practice3-1-py" class="headerlink" title="Practice3\1.py"></a>Practice3\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x1, y1, x2, y2 = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">distance = ((x2 - x1) ** <span class="number">2</span> + (y2 - y1) ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;distance:<span class="number">.1</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-10-py"><a href="#Practice3-10-py" class="headerlink" title="Practice3\10.py"></a>Practice3\10.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">m1 = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">m2 = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">m3 = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">avg = (m1 + m2 + m3) / <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> avg &gt; <span class="number">95</span> <span class="keyword">or</span> ((m1 == <span class="number">100</span> <span class="keyword">and</span> m2 == <span class="number">100</span> <span class="keyword">and</span> m3 &gt;= <span class="number">80</span>) <span class="keyword">or</span></span><br><span class="line">                (m1 == <span class="number">100</span> <span class="keyword">and</span> m3 == <span class="number">100</span> <span class="keyword">and</span> m2 &gt;= <span class="number">80</span>) <span class="keyword">or</span></span><br><span class="line">                (m2 == <span class="number">100</span> <span class="keyword">and</span> m3 == <span class="number">100</span> <span class="keyword">and</span> m1 &gt;= <span class="number">80</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该同学获得一等奖学金。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> avg &gt; <span class="number">90</span> <span class="keyword">or</span> ((m1 == <span class="number">100</span> <span class="keyword">and</span> m2 &gt;= <span class="number">75</span> <span class="keyword">and</span> m3 &gt;= <span class="number">75</span>) <span class="keyword">or</span></span><br><span class="line">                 (m2 == <span class="number">100</span> <span class="keyword">and</span> m1 &gt;= <span class="number">75</span> <span class="keyword">and</span> m3 &gt;= <span class="number">75</span>) <span class="keyword">or</span></span><br><span class="line">                 (m3 == <span class="number">100</span> <span class="keyword">and</span> m1 &gt;= <span class="number">75</span> <span class="keyword">and</span> m2 &gt;= <span class="number">75</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该同学获得二等奖学金。&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> m1 &gt;= <span class="number">70</span> <span class="keyword">and</span> m2 &gt;= <span class="number">70</span> <span class="keyword">and</span> m3 &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该同学获得三等奖学金。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该同学没有获得奖学金。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-2-py"><a href="#Practice3-2-py" class="headerlink" title="Practice3\2.py"></a>Practice3\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.14</span></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="number">4</span> * pi * r ** <span class="number">2</span></span><br><span class="line">v = <span class="number">4</span> / <span class="number">3</span> * pi * r ** <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span> <span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-3-py"><a href="#Practice3-3-py" class="headerlink" title="Practice3\3.py"></a>Practice3\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y = n ** (<span class="number">1</span>/<span class="number">3</span>) <span class="keyword">if</span> n % <span class="number">2</span> <span class="keyword">else</span> n ** <span class="number">0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y的值为:<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-4-py"><a href="#Practice3-4-py" class="headerlink" title="Practice3\4.py"></a>Practice3\4.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">y = w * <span class="number">0.25</span> <span class="keyword">if</span> w &lt;= <span class="number">50</span> <span class="keyword">else</span> <span class="number">50</span> * <span class="number">0.25</span> + (w - <span class="number">50</span>) * <span class="number">0.35</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;行李托运的运费是:<span class="subst">&#123;y&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-5-py"><a href="#Practice3-5-py" class="headerlink" title="Practice3\5.py"></a>Practice3\5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">salary = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> salary &lt;= <span class="number">400</span>:</span><br><span class="line">    f = salary * <span class="number">0.005</span></span><br><span class="line"><span class="keyword">elif</span> salary &lt;= <span class="number">600</span>:</span><br><span class="line">    f = salary * <span class="number">0.01</span></span><br><span class="line"><span class="keyword">elif</span> salary &lt;= <span class="number">800</span>:</span><br><span class="line">    f = salary * <span class="number">0.015</span></span><br><span class="line"><span class="keyword">elif</span> salary &lt;= <span class="number">1500</span>:</span><br><span class="line">    f = salary * <span class="number">0.02</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    f = salary * <span class="number">0.03</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;工资<span class="subst">&#123;salary&#125;</span>，应缴党费<span class="subst">&#123;f:<span class="number">.2</span>f&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-6-py"><a href="#Practice3-6-py" class="headerlink" title="Practice3\6.py"></a>Practice3\6.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a:</span><br><span class="line">    <span class="keyword">if</span> a == b == c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;三角形是等边三角形&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> a == b <span class="keyword">or</span> a == c <span class="keyword">or</span> b == c:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(a**<span class="number">2</span> + b**<span class="number">2</span> - c**<span class="number">2</span>) &lt; <span class="number">1e-6</span> <span class="keyword">or</span> <span class="built_in">abs</span>(a**<span class="number">2</span> + c**<span class="number">2</span> - b**<span class="number">2</span>) &lt; <span class="number">1e-6</span> <span class="keyword">or</span> <span class="built_in">abs</span>(b**<span class="number">2</span> + c**<span class="number">2</span> - a**<span class="number">2</span>) &lt; <span class="number">1e-6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;三角形是等腰直角三角形&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;三角形是等腰非直角三角形&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">abs</span>(a**<span class="number">2</span> + b**<span class="number">2</span> - c**<span class="number">2</span>) &lt; <span class="number">1e-6</span> <span class="keyword">or</span> <span class="built_in">abs</span>(a**<span class="number">2</span> + c**<span class="number">2</span> - b**<span class="number">2</span>) &lt; <span class="number">1e-6</span> <span class="keyword">or</span> <span class="built_in">abs</span>(b**<span class="number">2</span> + c**<span class="number">2</span> - a**<span class="number">2</span>) &lt; <span class="number">1e-6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;三角形是非等腰直角三角形&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;三角形是普通三角形&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的三个数，不能作为三角形的边组成三角形。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-7-py"><a href="#Practice3-7-py" class="headerlink" title="Practice3\7.py"></a>Practice3\7.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> N % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的脚数为奇数，不合理！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x = <span class="number">2</span> * M - N // <span class="number">2</span></span><br><span class="line">    y = M - x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;求出的只数为负，输入的数据不合理！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;鸡有<span class="subst">&#123;x&#125;</span>只，兔有<span class="subst">&#123;y&#125;</span>只&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-8-py"><a href="#Practice3-8-py" class="headerlink" title="Practice3\8.py"></a>Practice3\8.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">month = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1000</span> &lt;= year &lt;= <span class="number">2100</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= month &lt;= <span class="number">12</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的年份或月份不合法！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    is_leap = (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>年<span class="subst">&#123;<span class="string">&#x27;是闰年&#x27;</span> <span class="keyword">if</span> is_leap <span class="keyword">else</span> <span class="string">&#x27;不是闰年&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">        quarter = <span class="string">&quot;第一&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">        quarter = <span class="string">&quot;第二&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]:</span><br><span class="line">        quarter = <span class="string">&quot;第三&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        quarter = <span class="string">&quot;第四&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;month&#125;</span>月是<span class="subst">&#123;quarter&#125;</span>季度&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">2</span>:</span><br><span class="line">        days = <span class="number">29</span> <span class="keyword">if</span> is_leap <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line">    <span class="keyword">elif</span> month <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>]:</span><br><span class="line">        days = <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        days = <span class="number">31</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;month&#125;</span>月有<span class="subst">&#123;days&#125;</span>天&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice3-9-py"><a href="#Practice3-9-py" class="headerlink" title="Practice3\9.py"></a>Practice3\9.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;方程无意义&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == <span class="number">0</span>:</span><br><span class="line">    x = -c / b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;方程有一个根:<span class="subst">&#123;x:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    delta = b**<span class="number">2</span> - <span class="number">4</span>*a*c</span><br><span class="line">    <span class="keyword">if</span> delta &gt; <span class="number">0</span>:</span><br><span class="line">        x1 = (-b + delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">        x2 = (-b - delta**<span class="number">0.5</span>) / (<span class="number">2</span>*a)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;方程有两个不等实根:x1=<span class="subst">&#123;x1:<span class="number">.2</span>f&#125;</span>,x2=<span class="subst">&#123;x2:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> delta == <span class="number">0</span>:</span><br><span class="line">        x = -b / (<span class="number">2</span>*a)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;方程有两个相等实根:x1=<span class="subst">&#123;x:<span class="number">.2</span>f&#125;</span>,x2=<span class="subst">&#123;x:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        real = -b / (<span class="number">2</span>*a)</span><br><span class="line">        imag = (-delta)**<span class="number">0.5</span> / (<span class="number">2</span>*a)</span><br><span class="line">        x1 = <span class="built_in">complex</span>(real, imag)</span><br><span class="line">        x2 = <span class="built_in">complex</span>(real, -imag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;方程有两个不等虚根:x1=(<span class="subst">&#123;x1:<span class="number">.2</span>f&#125;</span>),x2=(<span class="subst">&#123;x2:<span class="number">.2</span>f&#125;</span>)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Practice4"><a href="#Practice4" class="headerlink" title="Practice4"></a>Practice4</h2><h3 id="Practice4-1-py"><a href="#Practice4-1-py" class="headerlink" title="Practice4\1.py"></a>Practice4\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">original = num</span><br><span class="line">reverse = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    digit = num % <span class="number">10</span></span><br><span class="line">    reverse = reverse * <span class="number">10</span> + digit</span><br><span class="line">    num = num // <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;original&#125;</span>的反序数是:<span class="subst">&#123;reverse&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-10-py"><a href="#Practice4-10-py" class="headerlink" title="Practice4\10.py"></a>Practice4\10.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> A <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> B <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> C <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> D <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                ABCD = A * <span class="number">1000</span> + B * <span class="number">100</span> + C * <span class="number">10</span> + D</span><br><span class="line">                CDC = C * <span class="number">100</span> + D * <span class="number">10</span> + C</span><br><span class="line">                ABC = A * <span class="number">100</span> + B * <span class="number">10</span> + C</span><br><span class="line">                <span class="keyword">if</span> ABCD - CDC == ABC:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;A=<span class="subst">&#123;A&#125;</span> B=<span class="subst">&#123;B&#125;</span> C=<span class="subst">&#123;C&#125;</span> D=<span class="subst">&#123;D&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-11-py"><a href="#Practice4-11-py" class="headerlink" title="Practice4\11.py"></a>Practice4\11.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> N % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入的脚数为奇数，不合理！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> chicken <span class="keyword">in</span> <span class="built_in">range</span>(M + <span class="number">1</span>):</span><br><span class="line">        rabbit = M - chicken</span><br><span class="line">        <span class="keyword">if</span> <span class="number">2</span> * chicken + <span class="number">4</span> * rabbit == N:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;鸡有<span class="subst">&#123;chicken&#125;</span>只，兔有<span class="subst">&#123;rabbit&#125;</span>只&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;求出的只数为负，输入的数据不合理！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-12-py"><a href="#Practice4-12-py" class="headerlink" title="Practice4\12.py"></a>Practice4\12.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">sequence = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> sequence[-<span class="number">1</span>] &lt;= M:</span><br><span class="line">    next_value = sequence[-<span class="number">1</span>] + sequence[-<span class="number">2</span>] + sequence[-<span class="number">3</span>]</span><br><span class="line">    sequence.append(next_value)</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数列从第<span class="subst">&#123;n&#125;</span>项开始，数值超过<span class="subst">&#123;M&#125;</span>。&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;n&#125;</span>项的值为<span class="subst">&#123;sequence[-<span class="number">1</span>]&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-13-py"><a href="#Practice4-13-py" class="headerlink" title="Practice4\13.py"></a>Practice4\13.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">eps = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">pi = <span class="number">0</span></span><br><span class="line">sign = <span class="number">1</span></span><br><span class="line">denominator = <span class="number">1</span></span><br><span class="line">term = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(term) &gt;= eps:</span><br><span class="line">    pi += term</span><br><span class="line">    sign *= -<span class="number">1</span></span><br><span class="line">    denominator += <span class="number">2</span></span><br><span class="line">    term = sign / denominator</span><br><span class="line"></span><br><span class="line">pi *= <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;近似值为:<span class="subst">&#123;pi&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-14-py"><a href="#Practice4-14-py" class="headerlink" title="Practice4\14.py"></a>Practice4\14.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">sin_x = <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">term = x</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(term) &gt;= <span class="number">1e-6</span>:</span><br><span class="line">    sin_x += term</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    term = (-<span class="number">1</span>)**(n+<span class="number">1</span>) * x**(<span class="number">2</span>*n - <span class="number">1</span>) / math.factorial(<span class="number">2</span>*n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;sin(<span class="subst">&#123;x&#125;</span>)的近似值为:<span class="subst">&#123;sin_x&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-15-py"><a href="#Practice4-15-py" class="headerlink" title="Practice4\15.py"></a>Practice4\15.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">eps = <span class="number">1e-6</span></span><br><span class="line">x_prev = a</span><br><span class="line">x_next = <span class="number">0.5</span> * (x_prev + a / x_prev)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(x_next - x_prev) &gt;= eps:</span><br><span class="line">    x_prev = x_next</span><br><span class="line">    x_next = <span class="number">0.5</span> * (x_prev + a / x_prev)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x的近似值为:<span class="subst">&#123;x_next:<span class="number">.6</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-2-py"><a href="#Practice4-2-py" class="headerlink" title="Practice4\2.py"></a>Practice4\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">K = <span class="number">0</span></span><br><span class="line">sum_squares = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    K += <span class="number">1</span></span><br><span class="line">    sum_squares += K * K</span><br><span class="line">    <span class="keyword">if</span> sum_squares &gt;= N:</span><br><span class="line">        K -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大K值是<span class="subst">&#123;K&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-3-py"><a href="#Practice4-3-py" class="headerlink" title="Practice4\3.py"></a>Practice4\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    spaces = <span class="string">&#x27; &#x27;</span> * (n - i)</span><br><span class="line">    numbers = <span class="built_in">str</span>(i) * (<span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(spaces + numbers)</span><br></pre></td></tr></table></figure><h3 id="Practice4-4-py"><a href="#Practice4-4-py" class="headerlink" title="Practice4\4.py"></a>Practice4\4.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">gcd_ab = gcd(a, b)</span><br><span class="line">gcd_abc = gcd(gcd_ab, c)</span><br><span class="line"></span><br><span class="line">lcm_ab = a * b // gcd_ab</span><br><span class="line">lcm_abc = lcm_ab * c // gcd(lcm_ab, c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大公约数是<span class="subst">&#123;gcd_abc&#125;</span>，最小公倍数是<span class="subst">&#123;lcm_abc&#125;</span>。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice4-5-py"><a href="#Practice4-5-py" class="headerlink" title="Practice4\5.py"></a>Practice4\5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, n + <span class="number">1</span>):</span><br><span class="line">    a = num // <span class="number">100</span></span><br><span class="line">    b = (num // <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">    c = num % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> num == a**<span class="number">3</span> + b**<span class="number">3</span> + c**<span class="number">3</span>:</span><br><span class="line">        result.append(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(result))</span><br></pre></td></tr></table></figure><h3 id="Practice4-6-py"><a href="#Practice4-6-py" class="headerlink" title="Practice4\6.py"></a>Practice4\6.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    sum_factors = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            sum_factors += i</span><br><span class="line">    <span class="keyword">if</span> sum_factors == num:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="Practice4-7-py"><a href="#Practice4-7-py" class="headerlink" title="Practice4\7.py"></a>Practice4\7.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    square = num * num</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(num) == <span class="built_in">str</span>(square)[-<span class="built_in">len</span>(<span class="built_in">str</span>(num)):] <span class="keyword">or</span> <span class="built_in">str</span>(num) == <span class="built_in">str</span>(square):</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="Practice4-8-py"><a href="#Practice4-8-py" class="headerlink" title="Practice4\8.py"></a>Practice4\8.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">sum_primes = <span class="built_in">sum</span>(num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n) <span class="keyword">if</span> is_prime(num))</span><br><span class="line"><span class="built_in">print</span>(sum_primes)</span><br></pre></td></tr></table></figure><h3 id="Practice4-9-py"><a href="#Practice4-9-py" class="headerlink" title="Practice4\9.py"></a>Practice4\9.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pairs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(a + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        sum_ab = a + b</span><br><span class="line">        diff_ab = b - a</span><br><span class="line">        <span class="keyword">if</span> math.sqrt(sum_ab) == <span class="built_in">int</span>(math.sqrt(sum_ab)) <span class="keyword">and</span> math.sqrt(diff_ab) == <span class="built_in">int</span>(math.sqrt(diff_ab)):</span><br><span class="line">            pairs.append((a, b))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n&#125;</span>以内的自然数对有：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> pairs:</span><br><span class="line">    <span class="built_in">print</span>(pair[<span class="number">0</span>], pair[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;自然数对共有<span class="subst">&#123;<span class="built_in">len</span>(pairs)&#125;</span>对。&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Practice5"><a href="#Practice5" class="headerlink" title="Practice5"></a>Practice5</h2><h3 id="Practice5-1-py"><a href="#Practice5-1-py" class="headerlink" title="Practice5\1.py"></a>Practice5\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n&#125;</span>是<span class="subst">&#123;<span class="string">&#x27;奇数&#x27;</span> <span class="keyword">if</span> is_odd(n) <span class="keyword">else</span> <span class="string">&#x27;偶数&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-10-py"><a href="#Practice5-10-py" class="headerlink" title="Practice5\10.py"></a>Practice5\10.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isSymmetrical</span>(<span class="params">lst</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> lst[i][j] != lst[j][i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_sum</span>(<span class="params">lst</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        total += lst[i][i]</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        row = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line">        matrix.append(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isSymmetrical(matrix):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;矩阵是对称矩阵&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;矩阵不是对称矩阵&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;矩阵对角线元素和是: <span class="subst">&#123;matrix_sum(matrix)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-11-py"><a href="#Practice5-11-py" class="headerlink" title="Practice5\11.py"></a>Practice5\11.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递推法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iterative_f</span>(<span class="params">n</span>):</span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        total += i / (<span class="number">2</span>*i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">return</span> n / (<span class="number">2</span>*n + <span class="number">1</span>) + recursive_f(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;递推法 f(<span class="subst">&#123;n&#125;</span>)= <span class="subst">&#123;iterative_f(n)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;递归法 f(<span class="subst">&#123;n&#125;</span>)= <span class="subst">&#123;recursive_f(n)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-12-py"><a href="#Practice5-12-py" class="headerlink" title="Practice5\12.py"></a>Practice5\12.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resolve</span>(<span class="params">n,x</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">2</span> * n - <span class="number">1</span>) * x * resolve(n - <span class="number">1</span>, x) - (n - <span class="number">1</span>) * resolve(n - <span class="number">2</span>, x))/n</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Legendre多项式的值： <span class="subst">&#123;resolve(n,x)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-2-py"><a href="#Practice5-2-py" class="headerlink" title="Practice5\2.py"></a>Practice5\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">passed</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;输入的成绩错误！&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;该同学成绩合格啦！&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;该同学成绩不合格，需继续努力！&quot;</span></span><br><span class="line"></span><br><span class="line">score = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(passed(score))</span><br></pre></td></tr></table></figure><h3 id="Practice5-3-py"><a href="#Practice5-3-py" class="headerlink" title="Practice5\3.py"></a>Practice5\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">string_num</span>(<span class="params">ch</span>):</span><br><span class="line">    letters = <span class="number">0</span></span><br><span class="line">    digits = <span class="number">0</span></span><br><span class="line">    spaces = <span class="number">0</span></span><br><span class="line">    others = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ch:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            letters += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> char.isdigit():</span><br><span class="line">            digits += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> char.isspace():</span><br><span class="line">            spaces += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            others += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> letters, digits, spaces, others</span><br><span class="line"></span><br><span class="line">ch = <span class="built_in">input</span>()</span><br><span class="line">letters, digits, spaces, others = string_num(ch)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;统计结果：字母有<span class="subst">&#123;letters&#125;</span>个，数字有<span class="subst">&#123;digits&#125;</span>个，空格有<span class="subst">&#123;spaces&#125;</span>个，其他字符有<span class="subst">&#123;others&#125;</span>个。&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-4-py"><a href="#Practice5-4-py" class="headerlink" title="Practice5\4.py"></a>Practice5\4.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coprime</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> coprime(a, b):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>和<span class="subst">&#123;b&#125;</span>互质&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>和<span class="subst">&#123;b&#125;</span>不互质&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-5-py"><a href="#Practice5-5-py" class="headerlink" title="Practice5\5.py"></a>Practice5\5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    fib_list = []</span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        fib_list.append(a)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> fib_list</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(fib(n))</span><br></pre></td></tr></table></figure><h3 id="Practice5-6-py"><a href="#Practice5-6-py" class="headerlink" title="Practice5\6.py"></a>Practice5\6.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">FacSum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    sum_factors = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i == n // i:</span><br><span class="line">                sum_factors += i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sum_factors += i + n // i</span><br><span class="line">    <span class="keyword">return</span> sum_factors</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pairs = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, x):</span><br><span class="line">    b = FacSum(a)</span><br><span class="line">    <span class="keyword">if</span> b &gt; a <span class="keyword">and</span> FacSum(b) == a:</span><br><span class="line">        pairs.add((a, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pair <span class="keyword">in</span> <span class="built_in">sorted</span>(pairs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;亲密数对: A=<span class="subst">&#123;pair[<span class="number">0</span>]:<span class="number">4</span>&#125;</span>, B=<span class="subst">&#123;pair[<span class="number">1</span>]:<span class="number">4</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-7-py"><a href="#Practice5-7-py" class="headerlink" title="Practice5\7.py"></a>Practice5\7.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">huiwen</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(num) == <span class="built_in">str</span>(num)[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;M&#125;</span><span class="subst">&#123;<span class="string">&#x27;是&#x27;</span> <span class="keyword">if</span> huiwen(M) <span class="keyword">else</span> <span class="string">&#x27;不是&#x27;</span>&#125;</span>回文数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice5-8-py"><a href="#Practice5-8-py" class="headerlink" title="Practice5\8.py"></a>Practice5\8.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(a, b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num//<span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> prime(i) <span class="keyword">and</span> prime(num - i):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num&#125;</span>=<span class="subst">&#123;i&#125;</span>+<span class="subst">&#123;num-i&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="Practice5-9-py"><a href="#Practice5-9-py" class="headerlink" title="Practice5\9.py"></a>Practice5\9.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n**<span class="number">0.5</span>)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_palindrome</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(n) == <span class="built_in">str</span>(n)[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">num = <span class="number">2</span></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; x:</span><br><span class="line">    <span class="keyword">if</span> is_prime(num) <span class="keyword">and</span> is_palindrome(num):</span><br><span class="line">        result.append(<span class="built_in">str</span>(num))</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(result), <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(result[i:i+<span class="number">10</span>]) + <span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Practice6"><a href="#Practice6" class="headerlink" title="Practice6"></a>Practice6</h2><h3 id="Practice6-1-py"><a href="#Practice6-1-py" class="headerlink" title="Practice6\1.py"></a>Practice6\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BMI</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, height, weight</span>):</span><br><span class="line">        self.bmi = weight / (height ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printBMI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您的BMI指数是：&#123;:.1f&#125;&quot;</span>.<span class="built_in">format</span>(self.bmi))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChinaBMI</span>(<span class="title class_ inherited__">BMI</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printBMI</span>(<span class="params">self</span>):</span><br><span class="line">        bmi_level = [<span class="string">&quot;偏瘦&quot;</span>,<span class="string">&quot;正常&quot;</span>,<span class="string">&quot;偏胖&quot;</span>,<span class="string">&quot;肥胖&quot;</span>,<span class="string">&quot;重度肥胖&quot;</span>]</span><br><span class="line">        rate_level = [<span class="string">&quot;低&quot;</span>,<span class="string">&quot;平均水平&quot;</span>,<span class="string">&quot;增加&quot;</span>,<span class="string">&quot;中毒增加&quot;</span>,<span class="string">&quot;严重增加&quot;</span>]</span><br><span class="line">        level = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.bmi &lt; <span class="number">18.5</span>:</span><br><span class="line">            level = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.bmi &lt;= <span class="number">23.9</span>:</span><br><span class="line">            level = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.bmi &lt;= <span class="number">26.9</span>:</span><br><span class="line">            level = <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> self.bmi &lt;= <span class="number">29.9</span>:</span><br><span class="line">            level = <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            level = <span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;您的BMI指数是：<span class="subst">&#123;self.bmi:<span class="number">.1</span>f&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;<span class="subst">&#123;bmi_level[level]&#125;</span>，相关疾病发病的危险性：<span class="subst">&#123;rate_level[level]&#125;</span>&quot;</span>)</span><br><span class="line">height = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">weight = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">person = ChinaBMI(height, weight)</span><br><span class="line">person.printBMI()</span><br></pre></td></tr></table></figure><h3 id="Practice6-2-py"><a href="#Practice6-2-py" class="headerlink" title="Practice6\2.py"></a>Practice6\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, speed, size, time, acceleration</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;初速度:<span class="subst">&#123;speed&#125;</span> 加速度:<span class="subst">&#123;acceleration&#125;</span> 体积:<span class="subst">&#123;size&#125;</span>&quot;</span>)</span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.size = size</span><br><span class="line">        self.time = time</span><br><span class="line">        self.acceleration = acceleration</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;移动了：<span class="subst">&#123;self.speed * self.time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setSpeed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;设置的初速度为:<span class="subst">&#123;self.speed&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speedUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加速完后速度是:<span class="subst">&#123;self.speed + self.acceleration * self.time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speedDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;减速完后速度是:<span class="subst">&#123;<span class="built_in">max</span>(<span class="number">0</span>, self.speed - self.acceleration * self.time)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">speed = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">size = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">time = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">acceleration = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">v = Vehicle(speed, size, time, acceleration)</span><br><span class="line">v.setSpeed()</span><br><span class="line">v.speedUp()</span><br><span class="line">v.speedDown()</span><br></pre></td></tr></table></figure><h3 id="Practice6-3-py"><a href="#Practice6-3-py" class="headerlink" title="Practice6\3.py"></a>Practice6\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(((self.x - other.x)**<span class="number">2</span> + (self.y - other.y)**<span class="number">2</span>)**<span class="number">0.5</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Line</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p1, p2</span>):</span><br><span class="line">        dx = p1.x - p2.x</span><br><span class="line">        dy = p1.y - p2.y</span><br><span class="line">        self.k = <span class="literal">None</span> <span class="keyword">if</span> dx == <span class="number">0</span> <span class="keyword">else</span> dy / dx</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">relationship</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.k <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> other.k <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;平行&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.k <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> other.k <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;相交&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;平行&quot;</span> <span class="keyword">if</span> <span class="built_in">abs</span>(self.k - other.k) &lt; <span class="number">1e-9</span> <span class="keyword">else</span> <span class="string">&quot;相交&quot;</span></span><br><span class="line"></span><br><span class="line">p = [Point(*<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;两点的欧式距离是<span class="subst">&#123;p[<span class="number">0</span>].distance(p[<span class="number">1</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">line1, line2 = Line(p[<span class="number">0</span>], p[<span class="number">1</span>]), Line(p[<span class="number">2</span>], p[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(line1.relationship(line2))</span><br></pre></td></tr></table></figure><h2 id="Practice7"><a href="#Practice7" class="headerlink" title="Practice7"></a>Practice7</h2><h3 id="Practice7-1-py"><a href="#Practice7-1-py" class="headerlink" title="Practice7\1.py"></a>Practice7\1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().strip()</span><br><span class="line">c, f = <span class="number">0</span>, <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;(&#x27;</span>: c += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        c -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">0</span>: f = <span class="literal">False</span>; <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;配对成功&#x27;</span> <span class="keyword">if</span> f <span class="keyword">and</span> c == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;配对不成功&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice7-2-py"><a href="#Practice7-2-py" class="headerlink" title="Practice7\2.py"></a>Practice7\2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">original = n</span><br><span class="line">seen = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">while</span> n != <span class="number">1</span> <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">    seen.add(n)</span><br><span class="line">    n = <span class="built_in">sum</span>(<span class="built_in">int</span>(d)**<span class="number">2</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">str</span>(n))</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;是快乐数字&quot;</span>.<span class="built_in">format</span>(original))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;不是快乐数字&quot;</span>.<span class="built_in">format</span>(original))</span><br></pre></td></tr></table></figure><h3 id="Practice7-3-py"><a href="#Practice7-3-py" class="headerlink" title="Practice7\3.py"></a>Practice7\3.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m, n, k = <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">people = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>))</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    index = (index + k - <span class="number">1</span>) % <span class="built_in">len</span>(people)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;people.pop(index)&#125;</span>号下船了&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice7-4-py"><a href="#Practice7-4-py" class="headerlink" title="Practice7\4.py"></a>Practice7\4.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27;,&#x27;</span>)))</span><br><span class="line">target = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;和为目标值的两个整数的下标是 (<span class="subst">&#123;i&#125;</span>, <span class="subst">&#123;j&#125;</span>)&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;和为目标值的两个整数的下标是 未找到&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice7-5-py"><a href="#Practice7-5-py" class="headerlink" title="Practice7\5.py"></a>Practice7\5.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pri = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">    pri += i</span><br><span class="line">    num = pri</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        num += j</span><br><span class="line">        <span class="built_in">print</span>(num, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">matrix = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    i = d</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        matrix[i][j] = num</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">filter</span>(<span class="built_in">bool</span>, row))),end=<span class="string">&quot; \n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Practice7-6-py"><a href="#Practice7-6-py" class="headerlink" title="Practice7\6.py"></a>Practice7\6.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">m = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">x = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">current = &#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    mi = m[i]</span><br><span class="line">    xi = x[i]</span><br><span class="line">    current = &#123;w + k * mi <span class="keyword">for</span> w <span class="keyword">in</span> current <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(xi + <span class="number">1</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(current))</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2025 CUMT 中国矿业大学 Python 编程实践 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Python" scheme="http://www.lymone.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学高级语言程序设计课后作业</title>
    <link href="http://www.lymone.cc/p/d9bcf089.html"/>
    <id>http://www.lymone.cc/p/d9bcf089.html</id>
    <published>2025-05-10T04:15:00.000Z</published>
    <updated>2025-05-10T09:11:26.309Z</updated>
    
    <content type="html"><![CDATA[<p>2022 CUMT 中国矿业大学 高级语言程序设计 课后作业 代码题解</p><p>年代过于久远，简单整理分享一下，请按照目录查阅</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><p>@[TOC]</p><h2 id="第3章"><a href="#第3章" class="headerlink" title="第3章"></a>第3章</h2><h3 id="Capter-3-1-cpp"><a href="#Capter-3-1-cpp" class="headerlink" title="Capter 3\1.cpp"></a>Capter 3\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> num[<span class="number">101</span>];</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="type">int</span> len=<span class="built_in">strlen</span>(num);</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;num[i];</span><br><span class="line">sum+=num[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl&lt;&lt;sum&lt;&lt;endl&lt;&lt;len;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-3-2-cpp"><a href="#Capter-3-2-cpp" class="headerlink" title="Capter 3\2.cpp"></a>Capter 3\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A--Z B--X C--Y&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-3-3-cpp"><a href="#Capter-3-3-cpp" class="headerlink" title="Capter 3\3.cpp"></a>Capter 3\3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;<span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">sum*=<span class="number">2</span>;</span><br><span class="line"> &#125; </span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-3-4-cpp"><a href="#Capter-3-4-cpp" class="headerlink" title="Capter 3\4.cpp"></a>Capter 3\4.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;=<span class="number">100</span>;xi++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">0</span>;yi&lt;=<span class="number">100</span>;yi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> zi=<span class="number">0</span>;zi&lt;=<span class="number">34</span>;zi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">5</span>*xi+<span class="number">3</span>*yi+zi==N&amp;&amp;xi+yi+<span class="number">3</span>*zi==<span class="number">100</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%d,y=%d,z=%d\n&quot;</span>,xi,yi,<span class="number">3</span>*zi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第4章"><a href="#第4章" class="headerlink" title="第4章"></a>第4章</h2><h3 id="Capter-4-1-cpp"><a href="#Capter-4-1-cpp" class="headerlink" title="Capter 4\1.cpp"></a>Capter 4\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toOcr</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%o&quot;</span>,n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">toOcr</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Capter-4-2-3-cpp"><a href="#Capter-4-2-3-cpp" class="headerlink" title="Capter 4\2-3.cpp"></a>Capter 4\2-3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>,c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt;=n)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">g</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">2</span>; b &lt;= a; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fb=<span class="built_in">f</span>(b);</span><br><span class="line"><span class="keyword">if</span> (b == <span class="built_in">f</span>(fb) &amp;&amp; fb &lt; a &amp;&amp; b &lt; fb)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; fb &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">g</span>(a))</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;N0&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-4-2-m2-cpp"><a href="#Capter-4-2-m2-cpp" class="headerlink" title="Capter 4\2-m2.cpp"></a>Capter 4\2-m2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>,c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt;=n)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> e = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">2</span>; b &lt;= a; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="built_in">f</span>(<span class="built_in">f</span>(b)) &amp;&amp; <span class="built_in">f</span>(b) &lt; a &amp;&amp; b &lt; <span class="built_in">f</span>(b))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">f</span>(b) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">e=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">g</span>(a)==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-4-2-test-cpp"><a href="#Capter-4-2-test-cpp" class="headerlink" title="Capter 4\2-test.cpp"></a>Capter 4\2-test.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">enSum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">enSum</span>(<span class="number">220</span>)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-4-2-cpp"><a href="#Capter-4-2-cpp" class="headerlink" title="Capter 4\2.cpp"></a>Capter 4\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">enSum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">284</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;220 284&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">400</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">enSum</span>(i)&lt;=n&amp;&amp;<span class="built_in">enSum</span>(i)!=i&amp;&amp;<span class="built_in">enSum</span>(<span class="built_in">enSum</span>(i))==i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp.<span class="built_in">count</span>(<span class="built_in">min</span>(<span class="built_in">enSum</span>(i),i))==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">min</span>(<span class="built_in">enSum</span>(i),i)&lt;&lt;<span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt;<span class="built_in">max</span>(<span class="built_in">enSum</span>(i),i)&lt;&lt;endl;</span><br><span class="line">mp[<span class="built_in">min</span>(<span class="built_in">enSum</span>(i),i)]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Capter-4-3-cpp"><a href="#Capter-4-3-cpp" class="headerlink" title="Capter 4\3.cpp"></a>Capter 4\3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digit</span><span class="params">(<span class="type">long</span> n,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (n/=(<span class="built_in">pow</span>(<span class="number">10</span>,(k<span class="number">-1</span>))))?n%<span class="number">10</span>:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n;<span class="type">int</span> k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">cout&lt;&lt;<span class="built_in">digit</span>(n,k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第5章"><a href="#第5章" class="headerlink" title="第5章"></a>第5章</h2><h3 id="Capter-5-1-cpp"><a href="#Capter-5-1-cpp" class="headerlink" title="Capter 5\1.cpp"></a>Capter 5\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">zhangsan 87 76 91 79</span></span><br><span class="line"><span class="comment">lisi 90 89 78 69</span></span><br><span class="line"><span class="comment">wangwu 80 88 91 85</span></span><br><span class="line"><span class="comment">zhaoqian 77 79 78 75</span></span><br><span class="line"><span class="comment">sunli 89 87 88 87</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> TotalScore,AverageScore;</span><br><span class="line"><span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line">TotalScore=<span class="number">0</span>;</span><br><span class="line">AverageScore=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student data[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;data[i].name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;<span class="number">4</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">data[i].TotalScore+=temp;</span><br><span class="line">&#125;</span><br><span class="line">data[i].AverageScore=data[i].TotalScore/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxi=<span class="number">0</span>,maxn=data[<span class="number">0</span>].AverageScore;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(data[i].AverageScore&gt;maxn)</span><br><span class="line">&#123;</span><br><span class="line">maxi=i;</span><br><span class="line">maxn=data[i].AverageScore;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Name TotalScore AverageScore&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::left)&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)</span><br><span class="line">&lt;&lt;data[i].name&lt;&lt;<span class="built_in">setw</span>(<span class="number">9</span>)&lt;&lt;data[i].TotalScore</span><br><span class="line">&lt;&lt;data[i].AverageScore&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Student with the highest AverageScore is &quot;</span>;</span><br><span class="line">cout&lt;&lt;data[maxi].name&lt;&lt;<span class="string">&quot;,AverageScore is &quot;</span>&lt;&lt;data[maxi].AverageScore;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Capter-5-2-cpp"><a href="#Capter-5-2-cpp" class="headerlink" title="Capter 5\2.cpp"></a>Capter 5\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num[<span class="number">10</span>]=&#123;&#125;;</span><br><span class="line"><span class="type">char</span> c,str[<span class="number">2000</span>];</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=str[i++])!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">num[c-<span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Number&#x27;s amount is:&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;&#x27;0...9&#x27; amount is:&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">cout&lt;&lt;num[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;num[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-5-3-cpp"><a href="#Capter-5-3-cpp" class="headerlink" title="Capter 5\3.cpp"></a>Capter 5\3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">9 80 205 40</span></span><br><span class="line"><span class="comment">90 60 96 1</span></span><br><span class="line"><span class="comment">210 3 101 89 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> data[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;<span class="number">3</span>;xi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">0</span>;yi&lt;<span class="number">4</span>;yi++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;data[xi][yi];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> max[<span class="number">3</span>]=&#123;&#125;,min[<span class="number">4</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;<span class="number">3</span>;xi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp=data[xi][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">0</span>;yi&lt;<span class="number">4</span>;yi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(data[xi][yi]&gt;temp)</span><br><span class="line">&#123;</span><br><span class="line">temp=data[xi][yi];</span><br><span class="line">max[xi]=yi;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">0</span>;yi&lt;<span class="number">4</span>;yi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp=data[<span class="number">0</span>][yi];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;<span class="number">3</span>;xi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(data[xi][yi]&lt;temp)</span><br><span class="line">&#123;</span><br><span class="line">temp=data[xi][yi];</span><br><span class="line">min[yi]=xi;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;<span class="number">3</span>;xi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">0</span>;yi&lt;<span class="number">4</span>;yi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max[xi]==yi&amp;&amp;min[yi]==xi)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d][%d]=%d is Saddle Point&quot;</span>,xi,yi,data[xi][yi]);</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Saddle Point&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第6章"><a href="#第6章" class="headerlink" title="第6章"></a>第6章</h2><h3 id="Capter-6-1-cpp"><a href="#Capter-6-1-cpp" class="headerlink" title="Capter 6\1.cpp"></a>Capter 6\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapstr</span><span class="params">(<span class="type">char</span> a[], <span class="type">char</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> t[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(t, a);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, b);</span><br><span class="line">    <span class="built_in">strcpy</span>(b, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">pickchar</span><span class="params">(<span class="type">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str[<span class="number">2</span>] == <span class="number">0</span> ? <span class="string">&#x27; &#x27;</span> : str[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">5</span>][<span class="number">50</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        cin &gt;&gt; str[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(str[j]) &gt; <span class="built_in">strlen</span>(str[j + <span class="number">1</span>]))</span><br><span class="line">                <span class="built_in">swapstr</span>(str[j + <span class="number">1</span>], str[j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="string">&quot;concatenate string:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        cout &lt;&lt; <span class="built_in">pickchar</span>(str[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-6-2-cpp"><a href="#Capter-6-2-cpp" class="headerlink" title="Capter 6\2.cpp"></a>Capter 6\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">101</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(data,<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="type">char</span> max=<span class="number">0</span>;<span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i]&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            p=i;</span><br><span class="line">            max=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;data[i];</span><br><span class="line">        <span class="keyword">if</span>(i==p)</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-6-3-cpp"><a href="#Capter-6-3-cpp" class="headerlink" title="Capter 6\3.cpp"></a>Capter 6\3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(str[i++]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((str[i<span class="number">-1</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[i<span class="number">-1</span>]&lt;=<span class="string">&#x27;9&#x27;</span>)&amp;&amp;(str[i]&lt;<span class="string">&#x27;0&#x27;</span>||str[i]&gt;<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(str[i++]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i<span class="number">-1</span>]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[i<span class="number">-1</span>]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;str[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(str[i]&lt;<span class="string">&#x27;0&#x27;</span>||str[i]&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(str, <span class="number">99</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">count</span>(str)&lt;&lt;endl;</span><br><span class="line"><span class="built_in">output</span>(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第7章"><a href="#第7章" class="headerlink" title="第7章"></a>第7章</h2><h3 id="Capter-7-1-cpp"><a href="#Capter-7-1-cpp" class="headerlink" title="Capter 7\1.cpp"></a>Capter 7\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> m_day[]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Date</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year,month,day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_r</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> == n % <span class="number">4</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || (<span class="number">0</span> == n % <span class="number">400</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">days</span><span class="params">(Date &amp;date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> day_c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;date.month;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        day_c+=m_day[i];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">            day_c+=<span class="built_in">is_r</span>(date.year);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> day_c+date.day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Date date;</span><br><span class="line">    cin&gt;&gt;date.year&gt;&gt;date.month&gt;&gt;date.day;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">days</span>(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-7-2-cpp"><a href="#Capter-7-2-cpp" class="headerlink" title="Capter 7\2.cpp"></a>Capter 7\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">&#125; leader[<span class="number">3</span>] = &#123;<span class="string">&quot;Li&quot;</span>, <span class="number">0</span>, <span class="string">&quot;Zhang&quot;</span>, <span class="number">0</span>, <span class="string">&quot;Fun&quot;</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>==<span class="built_in">strcmp</span>(name,leader[i].name))</span><br><span class="line">                leader[i].count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;leader[i].name</span><br><span class="line">        &lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;leader[i].count&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第8章"><a href="#第8章" class="headerlink" title="第8章"></a>第8章</h2><h3 id="Capter-8-1-cpp"><a href="#Capter-8-1-cpp" class="headerlink" title="Capter 8\1.cpp"></a>Capter 8\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Warning!</span></span><br><span class="line"><span class="comment">There is the shit HELL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m_day[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">    <span class="type">int</span> year, month, day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Date</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cin &gt;&gt; year &gt;&gt; month &gt;&gt; day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span> == n % <span class="number">4</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || (<span class="number">0</span> == n % <span class="number">400</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">outputLeapYear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; <span class="string">&quot; is&quot;</span></span><br><span class="line">             &lt;&lt; (<span class="built_in">isLeapYear</span>(year) ? <span class="string">&quot; &quot;</span> : <span class="string">&quot; not &quot;</span>)</span><br><span class="line">             &lt;&lt; <span class="string">&quot;leap year.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">const</span> Date &amp;temp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (year != temp.year)</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (month != temp.month)</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (day != temp.day)</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        day++;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">2</span> &amp;&amp; <span class="built_in">isLeapYear</span>(year))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &gt; m_day[<span class="number">2</span>] + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                month = <span class="number">3</span>;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &gt; m_day[month])</span><br><span class="line">            &#123;</span><br><span class="line">                month++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (month &gt; <span class="number">12</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                year++;</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">EXgetSkip</span><span class="params">(Date o)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">equal</span>(o))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">add</span>();</span><br><span class="line">            ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">SZYgetSkip</span><span class="params">(Date o)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> m_day[<span class="number">12</span>] = &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">        <span class="type">int</span> y1, m1, d1;</span><br><span class="line">        y1 = <span class="keyword">this</span>-&gt;year, m1 = <span class="keyword">this</span>-&gt;month, d1 = <span class="keyword">this</span>-&gt;day;</span><br><span class="line">        <span class="type">int</span> y2, m2, d2;</span><br><span class="line">        y2 = o.year, m2 = o.month, d2 = o.day;</span><br><span class="line">        <span class="type">int</span> sumy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isLeapYear</span>(i))</span><br><span class="line">                sumy += <span class="number">366</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sumy += <span class="number">365</span>;</span><br><span class="line">        <span class="type">int</span> summ1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isLeapYear</span>(y1))</span><br><span class="line">        &#123;</span><br><span class="line">            m_day[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m1 - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                summ1 += m_day[i];</span><br><span class="line">            &#125;</span><br><span class="line">            m_day[<span class="number">1</span>] = <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m1 - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                summ1 += m_day[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum1;</span><br><span class="line">        sum1 = summ1 + d1;</span><br><span class="line">        <span class="type">int</span> summ2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isLeapYear</span>(y2))</span><br><span class="line">        &#123;</span><br><span class="line">            m_day[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m2 - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                summ2 += m_day[i];</span><br><span class="line">            &#125;</span><br><span class="line">            m_day[<span class="number">1</span>] = <span class="number">28</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m2 - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                summ2 += m_day[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum2;</span><br><span class="line">        sum2 = summ2 + d2;</span><br><span class="line">        <span class="type">int</span> m;</span><br><span class="line">        m = sumy + sum2 - sum1;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">zeroCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;year;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">365</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isLeapYear</span>(i))</span><br><span class="line">               sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;month;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=m_day[i];</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">2</span>&amp;&amp;<span class="built_in">isLeapYear</span>(year))</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=day;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSkip</span><span class="params">(Date o)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(o.<span class="built_in">zeroCount</span>()-<span class="built_in">zeroCount</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Date fir, sec;</span><br><span class="line">    fir.<span class="built_in">setDate</span>();</span><br><span class="line">    sec.<span class="built_in">setDate</span>();</span><br><span class="line">    fir.<span class="built_in">outputLeapYear</span>();</span><br><span class="line">    sec.<span class="built_in">outputLeapYear</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The skip of two date is &quot;</span></span><br><span class="line">         &lt;&lt; fir.<span class="built_in">getSkip</span>(sec) &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-8-2-cpp"><a href="#Capter-8-2-cpp" class="headerlink" title="Capter 8\2.cpp"></a>Capter 8\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Beeline</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> X1, Y1, X2, Y2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Beeline</span>(<span class="type">int</span> x1 = <span class="number">0</span>, <span class="type">int</span> y1 = <span class="number">0</span>, <span class="type">int</span> x2 = <span class="number">0</span>, <span class="type">int</span> y2 = <span class="number">0</span>) : <span class="built_in">X1</span>(x1), <span class="built_in">Y1</span>(y1), <span class="built_in">X2</span>(x2), <span class="built_in">Y2</span>(y2)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">Length</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((Y2-Y1)*(Y2-Y1)+(X2-X1)*(X2-X1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d),(%d,%d)\n&quot;</span>,X1,Y1,X2,Y2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span></span><br><span class="line">&#123;</span><br><span class="line">    Beeline line1,line2,line3;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Triangle</span>(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2,<span class="type">int</span> x3,<span class="type">int</span> y3):<span class="built_in">line1</span>(x1,y1,x2,y2),<span class="built_in">line2</span>(x2,y2,x3,y3),<span class="built_in">line3</span>(x3,y3,x1,y1)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">float</span> a=line1.<span class="built_in">Length</span>(),b=line2.<span class="built_in">Length</span>(),c=line3.<span class="built_in">Length</span>();</span><br><span class="line">        <span class="type">float</span> p=(a+b+c)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(p*(p-a)*(p-b)*(p-c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Three edges&#x27; points are listed as follows:\n&quot;</span>;</span><br><span class="line">        line1.<span class="built_in">show</span>();</span><br><span class="line">        line2.<span class="built_in">show</span>();</span><br><span class="line">        line3.<span class="built_in">show</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The area of this triangle is:%.2f&quot;</span>,<span class="built_in">Area</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,x3,y1,y2,y3;</span><br><span class="line">    cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;x3&gt;&gt;y3;</span><br><span class="line">    <span class="function">Triangle <span class="title">tri</span><span class="params">(x1,y1,x2,y2,x3,y3)</span></span>;</span><br><span class="line">    tri.<span class="built_in">Print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第9章"><a href="#第9章" class="headerlink" title="第9章"></a>第9章</h2><h3 id="Capter-9-1-cpp"><a href="#Capter-9-1-cpp" class="headerlink" title="Capter 9\1.cpp"></a>Capter 9\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">double</span> x0 = <span class="number">0</span>, <span class="type">double</span> y0 = <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x0;</span><br><span class="line">        y = y0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(point&amp;,point&amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot;)\n&quot;</span>;</span><br><span class="line">    <span class="comment">//printf(&quot;(%lf,%lf)\n&quot;,x,y);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(point &amp;A,point &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x1=A.x,y1=A.y;</span><br><span class="line">    <span class="type">double</span> x2=B.x,y2=B.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x1,y1,x2,y2;</span><br><span class="line">    cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">    <span class="function">point <span class="title">A</span><span class="params">(x1,y1)</span>,<span class="title">B</span><span class="params">(x2,y2)</span></span>;</span><br><span class="line">    A.<span class="built_in">display</span>();</span><br><span class="line">    B.<span class="built_in">display</span>();</span><br><span class="line">    cout&lt;&lt;<span class="built_in">dis</span>(A,B);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter-9-2-cpp"><a href="#Capter-9-2-cpp" class="headerlink" title="Capter 9\2.cpp"></a>Capter 9\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Score</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Chinese, Math, English;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> TotalScore;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> TotalStudent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Score</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> m, <span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Chinese = c, Math = m, English = e;</span><br><span class="line">        TotalScore += (c + m + e);</span><br><span class="line">        ++TotalStudent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Chinese + Math + English;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, Chinese, Math, English);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="type">static</span> <span class="title">getAve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> * TotalScore / TotalStudent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Score::TotalScore;</span><br><span class="line"><span class="type">int</span> Score::TotalStudent;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, op, i, c, m, e;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">1</span>;</span><br><span class="line">    Score sco[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; c &gt;&gt; m &gt;&gt; e;</span><br><span class="line">            sco[id].<span class="built_in">setScore</span>(c, m, e);</span><br><span class="line">            id++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; i;</span><br><span class="line">            cout &lt;&lt; sco[i].<span class="built_in">Sum</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; i;</span><br><span class="line">            sco[i].<span class="built_in">Show</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, Score::<span class="built_in">getAve</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第11-12章"><a href="#第11-12章" class="headerlink" title="第11-12章"></a>第11-12章</h2><h3 id="Capter11-1-cpp"><a href="#Capter11-1-cpp" class="headerlink" title="Capter11\1.cpp"></a>Capter11\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">char</span>* n,<span class="type">char</span> s,<span class="type">int</span> a):<span class="built_in">name</span>(n),<span class="built_in">age</span>(a),<span class="built_in">sex</span>(s)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;name:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;age:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;age&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;sex:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;sex&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:<span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> basicSalary;</span><br><span class="line">    <span class="type">int</span> leaveDays;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Employee</span>(<span class="type">char</span>* n,<span class="type">char</span> s,<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> l):<span class="built_in">Person</span>(n,s,a),<span class="built_in">basicSalary</span>(b),<span class="built_in">leaveDays</span>(l)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person::<span class="built_in">show</span>();</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;basicSalary:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;basicSalary&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;leavedays:&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;leaveDays&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>],sex;</span><br><span class="line">    <span class="type">int</span> age,ba,le;</span><br><span class="line">    cin&gt;&gt;name&gt;&gt;sex&gt;&gt;age&gt;&gt;ba&gt;&gt;le;</span><br><span class="line">    <span class="function">Employee <span class="title">data</span><span class="params">(name,sex,age,ba,le)</span></span>;</span><br><span class="line">    data.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter12-1-w-cpp"><a href="#Capter12-1-w-cpp" class="headerlink" title="Capter12\1-w.cpp"></a>Capter12\1-w.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> all,w,p;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;w&gt;&gt;p;</span><br><span class="line">        <span class="keyword">switch</span> (temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            all+=w*p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            all+=w*p/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            all+=(w&gt;<span class="number">10</span>?w*p/<span class="number">2</span>:(w&gt;<span class="number">5</span>?w*p*<span class="number">0.8</span>:w*p));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,all);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capter12-1-cpp"><a href="#Capter12-1-cpp" class="headerlink" title="Capter12\1.cpp"></a>Capter12\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">double</span> W,P;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Fruit</span>(<span class="type">double</span> w,<span class="type">double</span> p):<span class="built_in">W</span>(w),<span class="built_in">P</span>(p)&#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> <span class="type">double</span> <span class="keyword">operator</span> +(<span class="type">double</span> all)=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>:<span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Apple</span>(<span class="type">double</span> w,<span class="type">double</span> p):<span class="built_in">Fruit</span>(w,p)&#123;&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>+(<span class="type">double</span> all)</span><br><span class="line">    &#123;</span><br><span class="line">        all+=W*P;</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Banana</span>:<span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Banana</span>(<span class="type">double</span> w,<span class="type">double</span> p):<span class="built_in">Fruit</span>(w,p)&#123;&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>+(<span class="type">double</span> all)</span><br><span class="line">    &#123;</span><br><span class="line">        all+=W/<span class="number">2</span>*P;</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span>:<span class="keyword">public</span> Fruit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Orange</span>(<span class="type">double</span> w,<span class="type">double</span> p):<span class="built_in">Fruit</span>(w,p)&#123;&#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>+(<span class="type">double</span> all)</span><br><span class="line">    &#123;</span><br><span class="line">        all+=(W&gt;<span class="number">10</span>?W*P/<span class="number">2</span>:(W&gt;<span class="number">5</span>?W*P*<span class="number">0.8</span>:W*P));</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> all=<span class="number">0</span>,w,p;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    Fruit* fp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">while</span>(temp!=<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;w&gt;&gt;p;</span><br><span class="line">        <span class="keyword">switch</span> (temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">            fp=<span class="keyword">new</span> <span class="built_in">Apple</span>(w,p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            fp=<span class="keyword">new</span> <span class="built_in">Banana</span>(w,p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            fp=<span class="keyword">new</span> <span class="built_in">Orange</span>(w,p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        all=*fp+all;</span><br><span class="line">        <span class="keyword">delete</span> fp;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,all);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>实话说我也不知道这些代码是做什么用的，但是既然在这个文件夹应该和这个课程有些关系</p><p>可能是某些不在章节内的题解</p><h3 id="Other-004-cpp"><a href="#Other-004-cpp" class="headerlink" title="Other\004.cpp"></a>Other\004.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T data;</span><br><span class="line">node&lt;T&gt;* next;</span><br><span class="line"><span class="keyword">operator</span>= ( node &amp;a) <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line">data=a.data;</span><br><span class="line">next=a.next; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">link</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">node&lt;T&gt;* head, p;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">link</span>();</span><br><span class="line">~<span class="built_in">link</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">link&lt;T&gt;::<span class="built_in">link</span>() :<span class="built_in">len</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; </span><br><span class="line"><span class="type">void</span> link&lt;T&gt;::<span class="built_in">push</span>(T y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!head) &#123;</span><br><span class="line">p = <span class="keyword">new</span> node&lt;T&gt;;</span><br><span class="line">p-&gt;data = y;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">head = p;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">p = <span class="keyword">new</span> node&lt;T&gt;;</span><br><span class="line">p-&gt;data = y;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">void</span> link&lt;T&gt;::<span class="built_in">print</span>()</span><br><span class="line">&#123;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">void</span> link&lt;T&gt;::<span class="built_in">reverse</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!head) <span class="keyword">return</span>;</span><br><span class="line">node&lt;T&gt;* k;</span><br><span class="line">node&lt;T&gt;* rehead = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> relen = len;</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!rehead)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">k = head;</span><br><span class="line"><span class="keyword">while</span> (i != relen)</span><br><span class="line">&#123;</span><br><span class="line">k = k-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="keyword">new</span> node&lt;T&gt;;</span><br><span class="line">p-&gt;data = k-&gt;data;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> k;</span><br><span class="line">rehead = p;</span><br><span class="line">len++;</span><br><span class="line">relen--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (; relen != <span class="number">0</span>; relen--) &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">k = head;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (i != relen)</span><br><span class="line">&#123;</span><br><span class="line">k = k-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="keyword">new</span> node&lt;T&gt;;</span><br><span class="line">p-&gt;data = k-&gt;data;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">delete</span> k;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">head = rehead;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; link&lt;T&gt;::~<span class="built_in">link</span>()</span><br><span class="line">&#123;</span><br><span class="line">node&lt;T&gt;* q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = head;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (q-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = q;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num1, num2;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">link&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">link&lt;<span class="type">double</span>&gt; b;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num1; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">a.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; y;</span><br><span class="line">b.<span class="built_in">push</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">b.<span class="built_in">print</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">a.<span class="built_in">reverse</span>();</span><br><span class="line">b.<span class="built_in">reverse</span>();</span><br><span class="line">a.<span class="built_in">print</span>();</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">b.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-1-cpp"><a href="#Other-1-cpp" class="headerlink" title="Other\1.cpp"></a>Other\1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">static</span> <span class="type">double</span> pi=<span class="number">3.14</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> r,s;</span><br><span class="line">cin&gt;&gt;r;</span><br><span class="line">s=<span class="number">4.0</span>/<span class="number">3.0</span>*pi*r*r*r;</span><br><span class="line">cout&lt;&lt;s&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">9.1</span>*<span class="number">1e-2</span>*s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Other-1121-2-cpp"><a href="#Other-1121-2-cpp" class="headerlink" title="Other\1121-2.cpp"></a>Other\1121-2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span>* data;</span><br><span class="line"><span class="built_in">cset</span>(<span class="type">int</span> n1=<span class="number">0</span>, <span class="type">int</span>* d1=<span class="number">0</span>) :<span class="built_in">n</span>(n1), <span class="built_in">data</span>(d1) &#123;&#125;</span><br><span class="line">cset <span class="keyword">operator</span>+(cset &amp;);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cout &lt;&lt; *(data + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">cset cset:: <span class="keyword">operator</span>+(cset &amp;c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *c, nn2;</span><br><span class="line">c = <span class="keyword">new</span> <span class="type">int</span>[n+c1.n];</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//i 前</span></span><br><span class="line">&#123;</span><br><span class="line">c[i] = *(data + i);<span class="comment">//把a中所有复制到c,0~n-1的数 共n个，结尾c[n-1]</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">nn2 = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c1.n; j++)<span class="comment">//j 后</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(c1.data + j) == *(data + i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((*(c1.data + j) != *(data + i)) &amp;&amp; (i == (n - <span class="number">1</span>)))<span class="comment">//当a中数被扫描完并此数为a数个数时</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//集合b中有几个与a不匹配的数</span></span><br><span class="line">c[++nn2] = *(c1.data + j);<span class="comment">//原先a有的加上b有a没有的，这里不是++i</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="type">int</span>* p = c;</span><br><span class="line"><span class="function">cset <span class="title">c3</span><span class="params">(nn2 , c)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nn2; i++)<span class="comment">//&lt;=</span></span><br><span class="line">cout &lt;&lt; *(c3.data + i) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//这里输出正常</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> c3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, n1, a[<span class="number">100</span>], b[<span class="number">100</span>], * nn, * nn1;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">cin &gt;&gt; n1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">nn = a;</span><br><span class="line">nn1 = b;</span><br><span class="line"><span class="function">cset <span class="title">c0</span><span class="params">(n, a)</span></span>;</span><br><span class="line"><span class="function">cset <span class="title">c1</span><span class="params">(n1, b)</span></span>;</span><br><span class="line">    cset c2;</span><br><span class="line">c2 = c0 + c1;</span><br><span class="line"><span class="comment">//c2.show();</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= c2.n; i++)<span class="comment">//&lt;=</span></span><br><span class="line">cout &lt;&lt; *(c2.data + i) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//这里输出正常</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-1121-cpp"><a href="#Other-1121-cpp" class="headerlink" title="Other\1121.cpp"></a>Other\1121.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> c[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span>* data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">cset</span>(<span class="type">int</span> n1, <span class="type">int</span>* d1) :<span class="built_in">n</span>(n1), <span class="built_in">data</span>(d1) &#123;&#125;</span><br><span class="line">cset <span class="keyword">operator</span>+(cset&amp; c1);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">cout &lt;&lt; *(data + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">cset cset:: <span class="keyword">operator</span>+(cset&amp; c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nn2;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//i 前</span></span><br><span class="line">&#123;</span><br><span class="line">c[i] = *(data + i);<span class="comment">//把a中所有复制到c,0~n-1的数 共n个，结尾c[n-1]</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">nn2 = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c1.n; j++)<span class="comment">//j 后</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(c1.data + j) == *(data + i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((*(c1.data + j) != *(data + i)) &amp;&amp; (i == (n - <span class="number">1</span>)))<span class="comment">//当a中数被扫描完并此数为a数个数时</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//集合b中有几个与a不匹配的数</span></span><br><span class="line">c[++nn2] = *(c1.data + j);<span class="comment">//原先a有的加上b有a没有的，这里不是++i</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="type">int</span>* p = c;</span><br><span class="line"><span class="function">cset <span class="title">c3</span><span class="params">(nn2 , p)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nn2; i++)<span class="comment">//&lt;=</span></span><br><span class="line">cout &lt;&lt; *(c3.data + i) &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//这里输出正常</span></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//return c3;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cset</span>(nn2,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, n1, a[<span class="number">100</span>], b[<span class="number">100</span>], * nn, * nn1;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">cin &gt;&gt; n1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">nn = a;</span><br><span class="line">nn1 = b;</span><br><span class="line"><span class="function">cset <span class="title">c0</span><span class="params">(n, a)</span></span>;</span><br><span class="line"><span class="function">cset <span class="title">c1</span><span class="params">(n1, b)</span></span>;</span><br><span class="line">    cset cm = c0 + c1;</span><br><span class="line">cm.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-2-cpp"><a href="#Other-2-cpp" class="headerlink" title="Other\2.cpp"></a>Other\2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a;<span class="type">double</span> b;<span class="type">char</span> c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">b+=(<span class="type">double</span>)a;</span><br><span class="line">b+=(<span class="type">double</span>)c;</span><br><span class="line">cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-sxz01-cpp"><a href="#Other-sxz01-cpp" class="headerlink" title="Other\sxz01.cpp"></a>Other\sxz01.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">3</span>];</span><br><span class="line">    p = a;</span><br><span class="line">    <span class="type">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            cin &gt;&gt; *(*(a + i) + j);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//t = *(*(p + i) + j);</span></span><br><span class="line">            <span class="comment">//*(*(p + i) + j) = *(*(p + j) + i);</span></span><br><span class="line">            <span class="comment">//*(*(p + j) + i) = t;</span></span><br><span class="line">            t=p[i][j];</span><br><span class="line">            p[i][j]=p[j][i];</span><br><span class="line">            p[j][i]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">5</span>) &lt;&lt; p[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名0-cpp"><a href="#Other-未命名0-cpp" class="headerlink" title="Other\未命名0.cpp"></a>Other\未命名0.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="comment">//n = num % 10;</span></span><br><span class="line"><span class="comment">//sum = sum + n;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; n ;</span></span><br><span class="line">I:</span><br><span class="line">n = num % <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; n ;</span><br><span class="line">sum +=n;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> ((num /= <span class="number">10</span>) &gt; <span class="number">0</span>) <span class="keyword">goto</span> I;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名1-cpp"><a href="#Other-未命名1-cpp" class="headerlink" title="Other\未命名1.cpp"></a>Other\未命名1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line">sum += <span class="number">1.</span>/i*(i++%<span class="number">2</span>==<span class="number">0</span>?:<span class="number">-1</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;sum=&quot;</span>&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名11-cpp"><a href="#Other-未命名11-cpp" class="headerlink" title="Other\未命名11.cpp"></a>Other\未命名11.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">10</span>;i=<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名2-cpp"><a href="#Other-未命名2-cpp" class="headerlink" title="Other\未命名2.cpp"></a>Other\未命名2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,n;cin&gt;&gt;a&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;<span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp*=<span class="number">10</span>,temp+=a;</span><br><span class="line">sum+=temp;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;sum=&quot;</span>&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h3 id="Other-未命名3-2-cpp"><a href="#Other-未命名3-2-cpp" class="headerlink" title="Other\未命名3-2.cpp"></a>Other\未命名3-2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1e8</span>)</span><br><span class="line">sum += <span class="number">1.0</span> / (<span class="number">2</span>*i+<span class="number">1</span>) * (i++%<span class="number">2</span>==<span class="number">0</span>?:<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld:%.16lf\n&quot;</span>,i,<span class="number">4</span>*sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名3-cpp"><a href="#Other-未命名3-cpp" class="headerlink" title="Other\未命名3.cpp"></a>Other\未命名3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1e9</span>)</span><br><span class="line">sum += <span class="number">1.0</span> / (<span class="number">2</span>*i+<span class="number">1</span>) * (i++%<span class="number">2</span>==<span class="number">0</span>?:<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:%.16lf\n&quot;</span>,i,<span class="number">4</span>*sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Other-未命名31-cpp"><a href="#Other-未命名31-cpp" class="headerlink" title="Other\未命名31.cpp"></a>Other\未命名31.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> sum=<span class="number">0</span>;<span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//for(;i&lt;=100;i++)</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)</span><br><span class="line"><span class="comment">//sum += 1.0/i*(i++%2==1?1:-1);</span></span><br><span class="line">sum += <span class="number">1.0</span>/i*(i++%<span class="number">2</span>==<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;sum:&quot;</span>&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 CUMT 中国矿业大学 高级语言程序设计 课后作业 代码题解&lt;/p&gt;
&lt;p&gt;年代过于久远，简单整理分享一下，请按照目录查阅&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学高级语言程序设计实践课上机代码</title>
    <link href="http://www.lymone.cc/p/12b18a84.html"/>
    <id>http://www.lymone.cc/p/12b18a84.html</id>
    <published>2025-05-10T04:10:00.000Z</published>
    <updated>2025-05-10T09:11:26.300Z</updated>
    
    <content type="html"><![CDATA[<p>2022 CUMT 中国矿业大学 高级语言程序设计实践课程 实验 全部代码题解</p><p>年代久远，只能简单整理了一下，可能有残缺，请根据目录自行查看</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><p>@[TOC]</p><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><h3 id="Lab1-01-cpp"><a href="#Lab1-01-cpp" class="headerlink" title="Lab1\01.cpp"></a>Lab1\01.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line"><span class="type">double</span> delta=b*b<span class="number">-4</span>*a*c;</span><br><span class="line"><span class="type">double</span> td=<span class="built_in">sqrt</span>(delta);</span><br><span class="line">cout&lt;&lt;(-b+td)/(<span class="number">2</span>*a)&lt;&lt;<span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt;(-b-td)/(<span class="number">2</span>*a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab1-02-cpp"><a href="#Lab1-02-cpp" class="headerlink" title="Lab1\02.cpp"></a>Lab1\02.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sin</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">tan</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">log10</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">log</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">pow</span>(x,<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sqrt</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">pow</span>(x,<span class="number">10</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">pow</span>(x,<span class="number">0.1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">pow</span>(x,<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">exp</span>(x)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fabs</span>(<span class="built_in">pow</span>(x,<span class="number">5</span>)+<span class="built_in">log10</span>(<span class="built_in">pow</span>(x,<span class="number">2</span>)+<span class="number">1</span>)-<span class="built_in">pow</span>(<span class="number">2</span>,x)<span class="number">-13</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab1-03-cpp"><a href="#Lab1-03-cpp" class="headerlink" title="Lab1\03.cpp"></a>Lab1\03.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,c;<span class="type">double</span> b,d;<span class="type">char</span> e;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class="line">cout&lt;&lt;a+b+c+d+e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab1-04-cpp"><a href="#Lab1-04-cpp" class="headerlink" title="Lab1\04.cpp"></a>Lab1\04.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">double</span> pie=<span class="number">3.1415926</span>;</span><br><span class="line">cout&lt;&lt;x*x+x-y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">2</span>*pie*x+pie*y*y;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab1-05-cpp"><a href="#Lab1-05-cpp" class="headerlink" title="Lab1\05.cpp"></a>Lab1\05.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sec1,sec2;</span><br><span class="line"><span class="type">int</span> h,min,sec;</span><br><span class="line">cin&gt;&gt;h&gt;&gt;min&gt;&gt;sec;</span><br><span class="line">sec1=(h*<span class="number">60</span>+min)*<span class="number">60</span>+sec;</span><br><span class="line">cin&gt;&gt;h&gt;&gt;min&gt;&gt;sec;</span><br><span class="line">sec2=(h*<span class="number">60</span>+min)*<span class="number">60</span>+sec;</span><br><span class="line">cout&lt;&lt;<span class="built_in">abs</span>(sec2-sec1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><h3 id="Lab2-01-cpp"><a href="#Lab2-01-cpp" class="headerlink" title="Lab2\01.cpp"></a>Lab2\01.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">1</span>; xi&lt;=N; xi++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xi==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">1</span>;yi&lt;xi;yi++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;temp;</span><br><span class="line">temp+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> yi=xi;yi&gt;<span class="number">1</span>;yi--)</span><br><span class="line">&#123;</span><br><span class="line">temp-=<span class="number">2</span>;</span><br><span class="line">cout&lt;&lt;temp;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab2-02-cpp"><a href="#Lab2-02-cpp" class="headerlink" title="Lab2\02.cpp"></a>Lab2\02.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> a,b,c,d;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A:&quot;</span>&lt;&lt;(a*=<span class="number">2.75</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;B:&quot;</span>&lt;&lt;(b*=<span class="number">12.5</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;C:&quot;</span>&lt;&lt;(c*=<span class="number">26.8</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(d&lt;=<span class="number">3</span>)</span><br><span class="line">d*=<span class="number">512</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d&lt;=<span class="number">8</span>)</span><br><span class="line">d=<span class="number">512.0</span>*d*<span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">d=<span class="number">512.0</span>*d*<span class="number">0.85</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;D:&quot;</span>&lt;&lt;d&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;total:&quot;</span>&lt;&lt;a+b+c+d;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab2-03-cpp"><a href="#Lab2-03-cpp" class="headerlink" title="Lab2\03.cpp"></a>Lab2\03.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">cin&gt;&gt;N;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">15</span>; i&lt;=N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>&amp;&amp;i%<span class="number">10</span>==<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout&lt;&lt;i;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab2-04-cpp"><a href="#Lab2-04-cpp" class="headerlink" title="Lab2\04.cpp"></a>Lab2\04.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num;cin&gt;&gt;num;</span><br><span class="line"><span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> temp;<span class="type">int</span> i=num;</span><br><span class="line"><span class="type">double</span> ma=<span class="number">-1</span>,mi=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">while</span>(i--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">ma=<span class="built_in">max</span>(temp,ma);<span class="comment">//if(temp&gt;ma)ma=temp;</span></span><br><span class="line">mi=<span class="built_in">min</span>(temp,mi);<span class="comment">//if(temp&lt;mi)mi=temp;</span></span><br><span class="line">sum+=temp;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(sum-ma-mi)/(num<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab2-05-cpp"><a href="#Lab2-05-cpp" class="headerlink" title="Lab2\05.cpp"></a>Lab2\05.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">log</span>(a)/<span class="built_in">log</span>(b);</span><br><span class="line">cout&lt;&lt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><h3 id="Lab3-A-cpp"><a href="#Lab3-A-cpp" class="headerlink" title="Lab3\A.cpp"></a>Lab3\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">f</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((n%<span class="number">10</span>)%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((n/=<span class="number">10</span>)&gt;<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f</span>(n))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-B-cpp"><a href="#Lab3-B-cpp" class="headerlink" title="Lab3\B.cpp"></a>Lab3\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m=<span class="built_in">sqrt</span>(i);</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">2</span>;x&lt;=m;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%x==<span class="number">0</span>)</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line">cin&gt;&gt;i&gt;&gt;n;</span><br><span class="line"><span class="built_in">find</span>(i,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-C-cpp"><a href="#Lab3-C-cpp" class="headerlink" title="Lab3\C.cpp"></a>Lab3\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> start,end,maxsum=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;start&gt;&gt;end;</span><br><span class="line"><span class="type">int</span> i = start,temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; i &lt;= end; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; j &lt;= i / <span class="number">2</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == i%j)</span><br><span class="line">&#123;</span><br><span class="line">sum+=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum &gt; maxsum)</span><br><span class="line">&#123;</span><br><span class="line">maxsum = sum;</span><br><span class="line">temp = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;temp&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;maxsum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-D-cpp"><a href="#Lab3-D-cpp" class="headerlink" title="Lab3\D.cpp"></a>Lab3\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">symm</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n_=n;</span><br><span class="line"><span class="type">long</span> dn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">dn*=<span class="number">10</span>;</span><br><span class="line">dn+=n%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((n/=<span class="number">10</span>)&gt;<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(dn==n_)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">1</span>; m&lt;=n; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">symm</span>(m)&amp;&amp;<span class="built_in">symm</span>(<span class="number">7</span>*m)&amp;&amp;<span class="built_in">symm</span>(<span class="number">3</span>*m*m))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;m&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-E-cpp"><a href="#Lab3-E-cpp" class="headerlink" title="Lab3\E.cpp"></a>Lab3\E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">symm</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n_=n;</span><br><span class="line"><span class="type">long</span> dn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">dn*=<span class="number">10</span>;</span><br><span class="line">dn+=n%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>((n/=<span class="number">10</span>)&gt;<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> n_+dn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">symm</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-F-cpp"><a href="#Lab3-F-cpp" class="headerlink" title="Lab3\F.cpp"></a>Lab3\F.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">func</span><span class="params">(<span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n==<span class="number">0</span>?<span class="number">1</span>:(<span class="built_in">func</span>(n<span class="number">-1</span>)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">func</span>(<span class="number">10</span>-n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab3-G-cpp"><a href="#Lab3-G-cpp" class="headerlink" title="Lab3\G.cpp"></a>Lab3\G.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">func</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i*i&gt;=n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i++);</span><br><span class="line"><span class="keyword">return</span> i*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">func</span>(n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h2><h3 id="Lab4-0A-szy-cpp"><a href="#Lab4-0A-szy-cpp" class="headerlink" title="Lab4\0A-szy.cpp"></a>Lab4\0A-szy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> b[<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> k,n;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> ave=<span class="number">0</span>;</span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line">ave=(<span class="type">double</span>)sum/k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;ave)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ave&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line">b[m]=a[i];</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)cout&lt;&lt;b[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-0C-szy-cpp"><a href="#Lab4-0C-szy-cpp" class="headerlink" title="Lab4\0C-szy.cpp"></a>Lab4\0C-szy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;x%<span class="number">100</span>!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">400</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> y1;</span><br><span class="line"><span class="type">int</span> m1;</span><br><span class="line"><span class="type">int</span> d1;</span><br><span class="line">cin&gt;&gt;y1&gt;&gt;m1&gt;&gt;d1;</span><br><span class="line"><span class="type">int</span> y2,m2,d2;</span><br><span class="line">cin&gt;&gt;y2&gt;&gt;m2&gt;&gt;d2;</span><br><span class="line"><span class="type">int</span> sumy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=y1;i&lt;y2;i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f</span>(i)) sumy+=<span class="number">366</span>;</span><br><span class="line"><span class="keyword">else</span> sumy+=<span class="number">365</span>;</span><br><span class="line"><span class="type">int</span> summ1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">f</span>(y1))</span><br><span class="line">&#123;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">29</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m1<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">summ1+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m1<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">summ1+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> sum1;</span><br><span class="line">    sum1=summ1+d1;</span><br><span class="line">    <span class="type">int</span> summ2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(y2))</span><br><span class="line">    &#123;</span><br><span class="line">    a[<span class="number">1</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m2<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    summ2+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m2<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">summ2+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum2;</span><br><span class="line">sum2=summ2+d2;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">m=sumy+sum2-sum1;</span><br><span class="line">cout&lt;&lt;m;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-A-sy-cpp"><a href="#Lab4-A-sy-cpp" class="headerlink" title="Lab4\A-sy.cpp"></a>Lab4\A-sy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> s[<span class="number">50</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">double</span> m[<span class="number">50</span>]=&#123;&#125;;</span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>, i;</span><br><span class="line"><span class="type">double</span> ava=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; s[i];</span><br><span class="line">sum+=s[i];</span><br><span class="line">&#125;</span><br><span class="line">ava = sum / k;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ava &lt; s[i])</span><br><span class="line">++b;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ava &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (c=<span class="number">0</span>; c &lt;= k;c++)</span><br><span class="line">m[c] = s[c];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">cout &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-A-cpp"><a href="#Lab4-A-cpp" class="headerlink" title="Lab4\A.cpp"></a>Lab4\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">50</span>],y[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> k,n=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;k; </span><br><span class="line">    <span class="type">double</span> ave=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;x[i];</span><br><span class="line">        ave+=x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ave/=k;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i]&gt;ave)</span><br><span class="line">            n++;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>;m&lt;t;m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]==y[m])</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        y[t++]=x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;ave&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot; \n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;y[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-B-cpp"><a href="#Lab4-B-cpp" class="headerlink" title="Lab4\B.cpp"></a>Lab4\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> name;</span><br><span class="line">    node *next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">link</span></span><br><span class="line">&#123;</span><br><span class="line">    node *head,*rear;</span><br><span class="line">    node *tp;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> m=n<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">            tp=tp-&gt;next;</span><br><span class="line">        node *p=tp-&gt;next;</span><br><span class="line">        tp-&gt;next=p-&gt;next;</span><br><span class="line">        m=p-&gt;name;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">en</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node *p=<span class="keyword">new</span> node;</span><br><span class="line">        p-&gt;name=n;</span><br><span class="line">        rear-&gt;next=p;</span><br><span class="line">        rear=p;</span><br><span class="line">        p-&gt;next=head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">link</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        tp=<span class="keyword">new</span> node;</span><br><span class="line">        tp-&gt;name=<span class="number">1</span>;</span><br><span class="line">        tp-&gt;next=tp;</span><br><span class="line">        head=rear=tp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">            <span class="built_in">en</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k,m,n=<span class="number">12</span>;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    link data;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">        m=data.<span class="built_in">add</span>(k);</span><br><span class="line">    cout&lt;&lt;m;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-B2-cpp"><a href="#Lab4-B2-cpp" class="headerlink" title="Lab4\B2.cpp"></a>Lab4\B2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span> ? n : (<span class="built_in">f</span>(n - <span class="number">1</span>, m) + m - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;cin&gt;&gt;k;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f</span>(<span class="number">12</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-B3-cpp"><a href="#Lab4-B3-cpp" class="headerlink" title="Lab4\B3.cpp"></a>Lab4\B3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;cin&gt;&gt;k;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">13</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i][<span class="number">0</span>]=i<span class="number">-1</span>;</span><br><span class="line">        data[i][<span class="number">1</span>]=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">12</span>;</span><br><span class="line">    data[<span class="number">12</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>,m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">1</span>;xi&lt;<span class="number">12</span>;xi++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> yi=<span class="number">1</span>;yi&lt;k;yi++)</span><br><span class="line">        &#123;</span><br><span class="line">            p=data[p][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        m=data[p][<span class="number">1</span>];</span><br><span class="line">        data[data[p][<span class="number">0</span>]][<span class="number">1</span>]=data[p][<span class="number">1</span>];</span><br><span class="line">        data[data[p][<span class="number">1</span>]][<span class="number">0</span>]=data[p][<span class="number">0</span>];</span><br><span class="line">        p=m;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;m;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-C-xjy-cpp"><a href="#Lab4-C-xjy-cpp" class="headerlink" title="Lab4\C-xjy.cpp"></a>Lab4\C-xjy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">a</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span> || n % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">y</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>, p = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">a</span>(i))</span><br><span class="line">            r++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (r * <span class="number">366</span> + p * <span class="number">365</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">m</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">a</span>(year))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (month)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            num = day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            num = <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">29</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (month)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            num = day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            num = <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            num = <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + day;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> year1, month1, day1,</span><br><span class="line">        year2, month2, day2;</span><br><span class="line">    cin &gt;&gt; year1 &gt;&gt; month1 &gt;&gt; day1 &gt;&gt; year2 &gt;&gt; month2 &gt;&gt; day2;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">y</span>(year2) + <span class="built_in">m</span>(year2, month2, day2) -</span><br><span class="line">                <span class="built_in">y</span>(year1) - <span class="built_in">m</span>(year1, month1, day1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-C-cpp"><a href="#Lab4-C-cpp" class="headerlink" title="Lab4\C.cpp"></a>Lab4\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_r</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> == n % <span class="number">4</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || (<span class="number">0</span> == n % <span class="number">400</span>)?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">date</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> m_day[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;; </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> year,month,day;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cin&gt;&gt;year&gt;&gt;month&gt;&gt;day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">const</span> date &amp;temp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(year!=temp.year)</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(month!=temp.month)</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(day!=temp.day)</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        day++;</span><br><span class="line">        <span class="keyword">if</span>(month==<span class="number">2</span>&amp;&amp;<span class="built_in">is_r</span>(year))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(day&gt;m_day[<span class="number">2</span>]+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                month=<span class="number">3</span>;</span><br><span class="line">                day=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day&gt;m_day[month])</span><br><span class="line">            &#123;</span><br><span class="line">                month++;</span><br><span class="line">                day=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (month&gt;<span class="number">12</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                year++;</span><br><span class="line">                month=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    date fir,sec;</span><br><span class="line">    fir.<span class="built_in">input</span>();</span><br><span class="line">    sec.<span class="built_in">input</span>();</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fir.<span class="built_in">equal</span>(sec))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        fir.<span class="built_in">add</span>();</span><br><span class="line">        ++n;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-D-cpp"><a href="#Lab4-D-cpp" class="headerlink" title="Lab4\D.cpp"></a>Lab4\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],b[<span class="number">10</span>],c[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> a_max=a[<span class="number">0</span>],a_min=a[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> b_max=b[<span class="number">0</span>],b_min=b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;a_max)</span><br><span class="line">            a_max=a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a_min)</span><br><span class="line">            a_min=a[i];</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;b_max)</span><br><span class="line">            b_max=b[i];</span><br><span class="line">        <span class="keyword">if</span>(b[i]&lt;b_min)</span><br><span class="line">            b_min=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n%d %d\n&quot;</span>,a_max,a_min,b_max,b_min);</span><br><span class="line">    <span class="built_in">sort</span>(a,a+<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">sort</span>(b,b+<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ax=<span class="number">0</span>,bx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t!=<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[ax]&lt;=b[bx]&amp;&amp;ax&lt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[t]=a[ax];</span><br><span class="line">            ax++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c[t]=b[bx];</span><br><span class="line">            bx++;</span><br><span class="line">        &#125;</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        cout&lt;&lt;c[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-E-sy-cpp"><a href="#Lab4-E-sy-cpp" class="headerlink" title="Lab4\E-sy.cpp"></a>Lab4\E-sy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">50</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(s, <span class="number">50</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">            ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            cout &lt;&lt; s[i];</span><br><span class="line">       <span class="comment">// else</span></span><br><span class="line">           <span class="comment">// cout &lt;&lt; &#x27;\0&#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab4-E-cpp"><a href="#Lab4-E-cpp" class="headerlink" title="Lab4\E.cpp"></a>Lab4\E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">50</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(s, <span class="number">50</span>);</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;<span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[a<span class="number">-1</span>]!=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="keyword">if</span>(s[b]==<span class="string">&#x27; &#x27;</span>||s[b]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;b;i++)</span><br><span class="line">                cout&lt;&lt;s[i];</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            a=b+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h2><h3 id="Lab5-A-cpp"><a href="#Lab5-A-cpp" class="headerlink" title="Lab5\A.cpp"></a>Lab5\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, n = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>, p = <span class="number">0</span>, maxp;</span><br><span class="line">    <span class="keyword">while</span> (str[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - p &gt; max)</span><br><span class="line">            &#123;</span><br><span class="line">                maxp = p;</span><br><span class="line">                max = i - p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = i + <span class="number">1</span>;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i - p &gt; max)</span><br><span class="line">    &#123;</span><br><span class="line">        maxp = p;</span><br><span class="line">        max = i - p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;max&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[maxp]!=<span class="string">&#x27; &#x27;</span>&amp;&amp;str[maxp]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;str[maxp];</span><br><span class="line">    maxp++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">500</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(str, <span class="number">500</span>);</span><br><span class="line">    <span class="built_in">split</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab5-B-new-cpp"><a href="#Lab5-B-new-cpp" class="headerlink" title="Lab5\B-new.cpp"></a>Lab5\B-new.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>** data = <span class="keyword">new</span> <span class="type">int</span>* [m];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        data[i] = <span class="keyword">new</span> <span class="type">int</span> [n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; data[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; data[j][i];</span><br><span class="line">            cout &lt;&lt;((j+<span class="number">1</span>==m)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">delete</span>[] data[i];      </span><br><span class="line">    <span class="keyword">delete</span>[] data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab5-B-cpp"><a href="#Lab5-B-cpp" class="headerlink" title="Lab5\B.cpp"></a>Lab5\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; data[i][j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; data[j][i];</span><br><span class="line">            cout &lt;&lt;((j+<span class="number">1</span>==m)?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;         </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab5-C-cpp"><a href="#Lab5-C-cpp" class="headerlink" title="Lab5\C.cpp"></a>Lab5\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">double</span> x,<span class="type">int</span>* iPart,<span class="type">double</span>* fPart)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *iPart=x;</span><br><span class="line">    *fPart=x-*iPart;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span>* iPart=<span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">    <span class="type">double</span>* fPart=<span class="keyword">new</span> <span class="type">double</span>;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">split</span>( x, iPart, fPart);</span><br><span class="line">    cout&lt;&lt;(*iPart)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(*fPart);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab5-D-cpp"><a href="#Lab5-D-cpp" class="headerlink" title="Lab5\D.cpp"></a>Lab5\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">char</span>*<span class="title">findLast</span><span class="params">(<span class="type">char</span>*sourceStr,<span class="type">char</span>*subStr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span>* p=sourceStr<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sourceStr[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sourceStr[i]==subStr[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> add=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (++add)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(subStr[add]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p=sourceStr+i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(subStr[add]!=sourceStr[i+add])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> sourceStr[<span class="number">10001</span>],subStr[<span class="number">10001</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(sourceStr, <span class="number">10000</span>);</span><br><span class="line">    cin.<span class="built_in">getline</span>(subStr, <span class="number">10000</span>);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">findLast</span>(sourceStr,subStr)-sourceStr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab5-E-cpp"><a href="#Lab5-E-cpp" class="headerlink" title="Lab5\E.cpp"></a>Lab5\E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> x, <span class="type">int</span> n,<span class="type">int</span> &amp; Lxn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10001</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">&quot;%ld&quot;</span>,x);</span><br><span class="line">    Lxn=str[n<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(len&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        Lxn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x/((<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>,n<span class="number">-1</span>)) % <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> Lxn;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f</span>(x,n,Lxn)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Lxn;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h2><h3 id="Lab6-A-cpp"><a href="#Lab6-A-cpp" class="headerlink" title="Lab6\A.cpp"></a>Lab6\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span> &#123; </span><br><span class="line">       <span class="type">double</span> real; <span class="comment">//复数实部 </span></span><br><span class="line">       <span class="type">double</span> imag; <span class="comment">//复数虚部 </span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">       <span class="built_in">Complex</span> (); <span class="comment">//无参构造函数，将复数对象的实部和虚部均置为0 </span></span><br><span class="line">       <span class="built_in">Complex</span> (<span class="type">double</span> r, <span class="type">double</span> i):<span class="built_in">real</span>(r),<span class="built_in">imag</span>(i)&#123;&#125;; <span class="comment">//有参构造函数，设置对象的实部和虚部 </span></span><br><span class="line">       <span class="function">Complex <span class="title">AddCom</span><span class="params">(Complex c2)</span></span>; <span class="comment">//调用者对象与对象c2相加，返回Complex类对象 </span></span><br><span class="line">       <span class="function"><span class="type">void</span> <span class="title">OutCom</span> <span class="params">()</span> </span>; <span class="comment">//输出调用者对象的有关数据（各分量） </span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function">Complex <span class="title">Complex::AddCom</span><span class="params">(Complex c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Complex <span class="title">c3</span><span class="params">(real+c2.real,imag+c2.imag)</span></span>;</span><br><span class="line"><span class="keyword">return</span> c3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Complex::OutCom</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (imag==<span class="number">0</span>&amp;&amp;real!=<span class="number">0</span>) cout&lt;&lt;real&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (real==<span class="number">0</span>&amp;&amp;imag!=<span class="number">0</span>) cout&lt;&lt;imag&lt;&lt;<span class="string">&#x27;i&#x27;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (real==<span class="number">0</span>&amp;&amp;imag==<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;real&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;imag&lt;&lt;<span class="string">&#x27;i&#x27;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> a,b,c,d;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="function">Complex <span class="title">c1</span><span class="params">(a,b)</span>,<span class="title">c2</span><span class="params">(c,d)</span></span>;</span><br><span class="line">c1=c1.<span class="built_in">AddCom</span>(c2);</span><br><span class="line">c1.<span class="built_in">OutCom</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab6-B-cpp"><a href="#Lab6-B-cpp" class="headerlink" title="Lab6\B.cpp"></a>Lab6\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">checkRun</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (y%<span class="number">400</span>==<span class="number">0</span>||(y%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;y%<span class="number">4</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DateType</span> &#123; </span><br><span class="line"> <span class="comment">//自定义的日期类 DateType</span></span><br><span class="line">    <span class="type">int</span> y,m,d; <span class="comment">//数据成员，表示当前日期的年、月、日</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DateType</span>(<span class="type">int</span> y0=<span class="number">1</span>,<span class="type">int</span> m0=<span class="number">1</span>,<span class="type">int</span> d0=<span class="number">1</span>):<span class="built_in">y</span>(y0),<span class="built_in">m</span>(m0),<span class="built_in">d</span>(d0)&#123;&#125;;</span><br><span class="line">        <span class="comment">//构造函数，设定年、月、日；并设置参数默认值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">IncrementDay</span><span class="params">()</span></span>; <span class="comment">//增加 1 天</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Equal</span><span class="params">(DateType dt2)</span></span>; <span class="comment">//判断二日期是否相等</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">PrintDate</span><span class="params">()</span></span>; <span class="comment">//屏幕输出日期对象的有关数据（年、月、日）</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DateType::IncrementDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d++;month[<span class="number">2</span>]+=<span class="built_in">checkRun</span>(y);</span><br><span class="line"><span class="keyword">if</span> (d&gt;month[m])&#123;</span><br><span class="line">d=<span class="number">1</span>;m++;</span><br><span class="line"><span class="keyword">if</span> (m&gt;<span class="number">12</span>) &#123;m=<span class="number">1</span>;y++;&#125;</span><br><span class="line">&#125;</span><br><span class="line">month[<span class="number">2</span>]-=<span class="built_in">checkRun</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DateType::Equal</span><span class="params">(DateType dt2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (y==dt2.y&amp;&amp;m==dt2.m&amp;&amp;d==dt2.d) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DateType::PrintDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;y&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;m&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> y1,y2,m1,m2,d1,d2;</span><br><span class="line">cin&gt;&gt;y1&gt;&gt;m1&gt;&gt;d1&gt;&gt;y2&gt;&gt;m2&gt;&gt;d2;</span><br><span class="line"><span class="function">DateType <span class="title">dt1</span><span class="params">(y1,m1,d1)</span>,<span class="title">dt2</span><span class="params">(y2,m2,d2)</span></span>;</span><br><span class="line">dt1.<span class="built_in">PrintDate</span>();</span><br><span class="line">dt2.<span class="built_in">PrintDate</span>();</span><br><span class="line">dt1.<span class="built_in">IncrementDay</span>();</span><br><span class="line">dt2.<span class="built_in">IncrementDay</span>();</span><br><span class="line">cout&lt;&lt;(dt1.<span class="built_in">Equal</span>(dt2)?<span class="string">&quot;True&quot;</span>:<span class="string">&quot;False&quot;</span>)&lt;&lt;endl;</span><br><span class="line">dt1.<span class="built_in">PrintDate</span>();</span><br><span class="line">dt2.<span class="built_in">PrintDate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab6-C-cpp"><a href="#Lab6-C-cpp" class="headerlink" title="Lab6\C.cpp"></a>Lab6\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStudent</span> &#123; <span class="comment">//学生类 CStudent</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> reg_num; <span class="comment">//数据成员：注册号</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">30</span>]; <span class="comment">//数据成员：姓名</span></span><br><span class="line">    <span class="type">float</span> math, eng, comp; <span class="comment">//数据成员：数学、英语、计算机成绩</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//公有成员函数</span></span><br><span class="line">    <span class="function"><span class="type">float</span> <span class="title">Sum</span><span class="params">()</span></span>; <span class="comment">//求三门课总成绩的函数 Sum</span></span><br><span class="line">        <span class="function"><span class="type">float</span> <span class="title">Average</span><span class="params">()</span></span>; <span class="comment">//求三门课平均成绩的函数 Average</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span>; <span class="comment">//显示学生数据信息的函数 Display</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">SetData</span> <span class="params">(<span class="type">unsigned</span> <span class="type">long</span> r,<span class="type">char</span>* n,<span class="type">float</span> m,<span class="type">float</span> e,<span class="type">float</span> c)</span></span>;</span><br><span class="line">        <span class="comment">//设置学生数据信息的函数 SetData</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">CStudent::SetData</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> r,<span class="type">char</span>* n,<span class="type">float</span> m,<span class="type">float</span> e,<span class="type">float</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">reg_num=r;</span><br><span class="line"><span class="built_in">strcpy</span>(name,n);</span><br><span class="line">math=m;</span><br><span class="line">eng=e;</span><br><span class="line">comp=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CStudent::Sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> math+eng+comp;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">CStudent::Average</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (math+eng+comp)/<span class="number">3.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudent::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;reg_num&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;math&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;eng&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;comp&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> c,name_[<span class="number">30</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> reg_num_;</span><br><span class="line">    <span class="type">float</span> math_,eng_,comp_,sum_max,sum_n;</span><br><span class="line">string s; </span><br><span class="line"><span class="type">int</span> n,x,res,res_num;</span><br><span class="line">CStudent stu[<span class="number">160</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;TOTAL=&quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;res_num&gt;&gt;name_&gt;&gt;math_&gt;&gt;eng_&gt;&gt;comp_;</span><br><span class="line">stu[i].<span class="built_in">SetData</span>(res_num,name_,math_,eng_,comp_);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;CStudent &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; : &quot;</span>;</span><br><span class="line">stu[i].<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum_n=stu[i].<span class="built_in">Sum</span>();</span><br><span class="line"><span class="keyword">if</span> (sum_n&gt;sum_max) &#123;</span><br><span class="line">sum_max=sum_n;</span><br><span class="line">res=i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;CStudent&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;.Sum=&quot;</span>&lt;&lt;sum_n&lt;&lt;<span class="string">&quot;,CStudent&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;.average=&quot;</span>&lt;&lt;stu[i].<span class="built_in">Average</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;class_Sum_max=&quot;</span>&lt;&lt;sum_max&lt;&lt;endl&lt;&lt;<span class="string">&quot;The infomation of the CStudent with class_Sum_max : &quot;</span>;</span><br><span class="line">stu[res].<span class="built_in">Display</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验7-含原题"><a href="#实验7-含原题" class="headerlink" title="实验7(含原题)"></a>实验7(含原题)</h2><h3 id="Lab7-A-cpp"><a href="#Lab7-A-cpp" class="headerlink" title="Lab7\A.cpp"></a>Lab7\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题 A: 零件类(静态成员)</span></span><br><span class="line"><span class="comment">[命题人 : ]</span></span><br><span class="line"><span class="comment">时间限制 : 1.000 sec  内存限制 : 128 MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">定义一个 Lingjian 类，拥有整型的数据成员 Weight 和静态数据成员 AllWeights（初始化为 0），每定义一个对象时， 在AllWeights 中增加该零件的重量 Weight；在析构函数中减去 Weight；静态成员函数 GetAllWeights（）获取AllWeights。设计程序，定义两个对象之后， 输出类的 AllWeights。其中 Weight 是通过成员函数输入对单个零件重量赋值。</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">两个整数。 分别为两个对象的重量</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">输出一行，是AllWeights的值</span></span><br><span class="line"><span class="comment">样例输入 Copy</span></span><br><span class="line"><span class="comment">12 24 </span></span><br><span class="line"><span class="comment">样例输出 Copy</span></span><br><span class="line"><span class="comment">36 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lingjian</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Weight;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> Allweights;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Lingjian</span>(<span class="type">int</span> w):<span class="built_in">Weight</span>(w)</span><br><span class="line">&#123;</span><br><span class="line">Allweights+=w;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Lingjian</span>()</span><br><span class="line">&#123;</span><br><span class="line">Allweights-=Weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">GetAllWeights</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Allweights;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Lingjian::Allweights=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="function">Lingjian <span class="title">l1</span><span class="params">(a)</span>,<span class="title">l2</span><span class="params">(b)</span></span>;</span><br><span class="line">cout&lt;&lt;Lingjian::<span class="built_in">GetAllWeights</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab7-B-cpp"><a href="#Lab7-B-cpp" class="headerlink" title="Lab7\B.cpp"></a>Lab7\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题 B: 狮子与老虎的朋友（友元函数）</span></span><br><span class="line"><span class="comment">[命题人 : liuhouquan]</span></span><br><span class="line"><span class="comment">时间限制 : 1.000 sec  内存限制 : 128 MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">定义狮子 Lion 与老虎 Tiger 两个类，二者都有 weight 私有整型属性，定义二者的一个友元函数 totalWeight(参数表)，计算二者的重量和。设计程序，定义狮子与老虎两个对象之后，调用 totalWeight(参数表)，计算二者的重量和，然后输出。其中狮子与老虎的 Weight 是在各自的类成员函数中读数赋值。 </span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">两个整数。分别为狮子与老虎对象的重量</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">输出一个整数，是两个对象重量之和。</span></span><br><span class="line"><span class="comment">样例输入 Copy</span></span><br><span class="line"><span class="comment">240 280</span></span><br><span class="line"><span class="comment">样例输出 Copy</span></span><br><span class="line"><span class="comment">520 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&#123;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Tiger</span>(<span class="type">int</span> w):<span class="built_in">weight</span>(w)&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">int</span> <span class="title">totalWeight</span><span class="params">(Lion a,Tiger b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span>&#123;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Lion</span>(<span class="type">int</span> w):<span class="built_in">weight</span>(w)&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">int</span> <span class="title">totalWeight</span><span class="params">(Lion a,Tiger b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">totalWeight</span><span class="params">(Lion a,Tiger b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.weight+b.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> w1,w2;cin&gt;&gt;w1&gt;&gt;w2;</span><br><span class="line"><span class="function">Lion <span class="title">l</span><span class="params">(w1)</span></span>;<span class="function">Tiger <span class="title">t</span><span class="params">(w2)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">totalWeight</span>(l,t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab7-C-cpp"><a href="#Lab7-C-cpp" class="headerlink" title="Lab7\C.cpp"></a>Lab7\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题 C: 集合（运算符重载）</span></span><br><span class="line"><span class="comment">[命题人 : ]</span></span><br><span class="line"><span class="comment">时间限制 : 1.000 sec  内存限制 : 128 MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">集合是由一个或多个确定的元素所构成的整体。集合的运算有并、交、相对补等。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合A和集合B的交集：由属于A且属于B的相同元素组成的集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合A和集合B的并集：由所有属于集合A或属于集合B的元素所组成的集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">集合B关于集合A的相对补集，记做A-B：由属于A而不属于B的元素组成的集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">假设集合A=&#123;10，20，30&#125;，集合B=&#123;1，10，50，8&#125;。则A与B的并是&#123;10，20，30,1,50,8&#125;，A与B的交是&#123;10&#125;，B关于A的相对补集是&#123;20,30&#125;。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义整数集合类CSet，属性包括：集合中的元素个数n，整型指针data存储集合中的元素。</span></span><br><span class="line"><span class="comment">主函数输入集合A、B的数据，计算集合的并、交、相对补。</span></span><br><span class="line"><span class="comment">可根据题目，为CSet类添加需要的成员函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法有：重载输出，按样例格式输出集合中的元素。</span></span><br><span class="line"><span class="comment">重载+运算符，求集合A和集合B的并集，并返回结果集合。 重载-运算符，求集合B关于集合A的相对补集，并返回结果集合。 重载*运算符，求集合A和集合B的交集，并返回结果集合。</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">测试次数</span></span><br><span class="line"><span class="comment">每组测试数据两行，格式如下：</span></span><br><span class="line"><span class="comment">第一行：集合A的元素个数和元素</span></span><br><span class="line"><span class="comment">第二行：集合B的元素个数和元素</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">每组测试数据输出如下：</span></span><br><span class="line"><span class="comment">第一行：集合A</span></span><br><span class="line"><span class="comment">第二行：集合B</span></span><br><span class="line"><span class="comment">第三行：A和B的并</span></span><br><span class="line"><span class="comment">第四行：A和B的交</span></span><br><span class="line"><span class="comment">第五行：B关于A的相对补集 与 A关于B的相对补集的并，即(A-B)+(B-A)</span></span><br><span class="line"><span class="comment">每组测试数据间以空行分隔。</span></span><br><span class="line"><span class="comment">样例输入 Copy</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3 10 20 30</span></span><br><span class="line"><span class="comment">4 10 1 2 3</span></span><br><span class="line"><span class="comment">5 100 2 3 4 -10</span></span><br><span class="line"><span class="comment">6 -34 12 2 4 90 100</span></span><br><span class="line"><span class="comment">样例输出 Copy</span></span><br><span class="line"><span class="comment">A:10 20 30</span></span><br><span class="line"><span class="comment">B:10 1 2 3</span></span><br><span class="line"><span class="comment">A+B:10 20 30 1 2 3</span></span><br><span class="line"><span class="comment">A*B:10</span></span><br><span class="line"><span class="comment">(A-B)+(B-A):20 30 1 2 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A:100 2 3 4 -10</span></span><br><span class="line"><span class="comment">B:-34 12 2 4 90 100</span></span><br><span class="line"><span class="comment">A+B:100 2 3 4 -10 -34 12 90</span></span><br><span class="line"><span class="comment">A*B:100 2 4</span></span><br><span class="line"><span class="comment">(A-B)+(B-A):3 -10 -34 12 90*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSet</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> *data;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">CSet</span>(<span class="type">int</span> n_=<span class="number">0</span>,<span class="type">int</span> *a=<span class="number">0</span>):<span class="built_in">n</span>(n_)&#123;</span><br><span class="line">data = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">data = a; </span><br><span class="line">&#125;</span><br><span class="line">CSet <span class="keyword">operator</span> + (CSet );</span><br><span class="line">CSet <span class="keyword">operator</span> - (CSet );</span><br><span class="line">CSet <span class="keyword">operator</span> * (CSet );</span><br><span class="line">&#125;;</span><br><span class="line">CSet CSet::<span class="keyword">operator</span> + (CSet c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>],t=<span class="number">0</span>,j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[++t]=*(data+i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c.n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (*(c.data+i)!=a[j]&amp;&amp;j&lt;=t) j++;</span><br><span class="line"><span class="keyword">if</span> (j&gt;t) a[++t]=*(c.data+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">CSet <span class="title">res</span><span class="params">(t,a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">CSet CSet::<span class="keyword">operator</span> * (CSet c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>],t=<span class="number">0</span>,j;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j&lt;=c.n)&#123;</span><br><span class="line"><span class="keyword">if</span> (*(data+i)==*(c.data+j)) a[++t]=*(data+i);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">CSet <span class="title">res</span><span class="params">(t,a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">CSet CSet::<span class="keyword">operator</span> - (CSet c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *a,t=<span class="number">0</span>,j;</span><br><span class="line">a = <span class="keyword">new</span> <span class="type">int</span>[n+c.n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (*(data+i)!=*(c.data+j)&amp;&amp;j&lt;=c.n) j++;</span><br><span class="line"><span class="keyword">if</span> (j&gt;c.n) &#123;*(a+(++t))=*(data+i);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">CSet <span class="title">res</span><span class="params">(t,a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(CSet c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c.n;j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j!=<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;*(c.data+j);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getin</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;*(a+j);</span><br><span class="line"><span class="keyword">if</span> (j!=<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;*(a+j);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">1000</span>],b[<span class="number">1000</span>],m1,m2;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;m1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A:&quot;</span>;<span class="built_in">getin</span>(a,m1);</span><br><span class="line">cin&gt;&gt;m2;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;B:&quot;</span>;<span class="built_in">getin</span>(b,m2);</span><br><span class="line"><span class="function">CSet <span class="title">c1</span><span class="params">(m1,a)</span>,<span class="title">c2</span><span class="params">(m2,b)</span>,c3,c4,c</span>;</span><br><span class="line">c=c1+c2;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A+B:&quot;</span>; <span class="built_in">display</span>(c);</span><br><span class="line">c=c1*c2;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A*B:&quot;</span>; <span class="built_in">display</span>(c);</span><br><span class="line">c3=c1-c2;c4=c2-c1;</span><br><span class="line">c=c3+c4;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;(A-B)+(B-A):&quot;</span>; <span class="built_in">display</span>(c);</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab7-D-cpp"><a href="#Lab7-D-cpp" class="headerlink" title="Lab7\D.cpp"></a>Lab7\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*问题 D: 矩形类（继承与派生）</span></span><br><span class="line"><span class="comment">[命题人 : liuhouquan]</span></span><br><span class="line"><span class="comment">时间限制 : 1.000 sec  内存限制 : 128 MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">要求定义一个基类Point，它有两个私有的float型数据成员X,Y;一个构造函数用于对数据成员初始化；有一个成员函数void Move(float xOff, float yOff)实现分别对X,Y值的改变，其中参数xOff和yOff分别代表偏移量。另外两个成员函数GetX() 、GetY()分别返回X和Y的值。</span></span><br><span class="line"><span class="comment">Rectangle类是基类Point的公有派生类。它增加了两个float型的私有数据成员W,H; 增加了两个成员函数float GetH() 、float GetW()分别返回W和H的值；并定义了自己的构造函数，实现对各个数据成员的初始化。</span></span><br><span class="line"><span class="comment">编写主函数main()根据以下的输入输出提示，完成整个程序。</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">6个float型的数据，分别代表矩形的横坐标X、纵坐标Y、宽度W，高度H、横向偏移量的值、纵向偏移量的值；每个数据之间用一个空格间隔</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">输出数据共有4个，每个数据之间用一个空格间隔。分别代表偏移以后的矩形的横坐标X、纵坐标Y、宽度W，高度H的值</span></span><br><span class="line"><span class="comment">样例输入 Copy</span></span><br><span class="line"><span class="comment">5 6 2 3 1 2</span></span><br><span class="line"><span class="comment">样例输出 Copy</span></span><br><span class="line"><span class="comment">6 8 2 3*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span> X;</span><br><span class="line"><span class="type">float</span> Y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">float</span> x,<span class="type">float</span> y):<span class="built_in">X</span>(x),<span class="built_in">Y</span>(y)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">(<span class="type">float</span> xOff, <span class="type">float</span> yOff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">X+=xOff;</span><br><span class="line">Y+=yOff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetX</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> X;&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetY</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> Y;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>:<span class="keyword">public</span> Point</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span> W;</span><br><span class="line"><span class="type">float</span> H;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rectangle</span>(<span class="type">float</span> x,<span class="type">float</span> y,<span class="type">float</span> w,<span class="type">float</span> h):<span class="built_in">Point</span>(x,y),<span class="built_in">W</span>(w),<span class="built_in">H</span>(h)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetW</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> W;&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetH</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> H;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> a,b,c,d,e,f;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;f;</span><br><span class="line"><span class="function">Rectangle <span class="title">r</span><span class="params">(a,b,c,d)</span></span>;</span><br><span class="line">r.<span class="built_in">Move</span>(e,f);</span><br><span class="line">cout&lt;&lt;r.<span class="built_in">GetX</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r.<span class="built_in">GetY</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r.<span class="built_in">GetW</span>()&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r.<span class="built_in">GetH</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab7-E-cpp"><a href="#Lab7-E-cpp" class="headerlink" title="Lab7\E.cpp"></a>Lab7\E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题 E: 员工类（继承与派生）</span></span><br><span class="line"><span class="comment">[命题人 : liuhouquan]</span></span><br><span class="line"><span class="comment">时间限制 : 1.000 sec  内存限制 : 128 MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">题目描述</span></span><br><span class="line"><span class="comment">定义一个基类Person，它有3个protected的数据成员：姓名name(char *类型)、性别 sex(char类型)、年龄age(int类型)；一个构造函数用于对数据成员初始化；有一个成员函数show()用于输出数据成员的信息。</span></span><br><span class="line"><span class="comment">创建Person类的公有派生类Employee，增加两个数据成员 基本工资 basicSalary（int类型） 请假天数leaveDays（int型）；为它定义初始化成员信息的构造函数，和显示数据成员信息的成员函数show()。</span></span><br><span class="line"><span class="comment">输入</span></span><br><span class="line"><span class="comment">共5个数据，分别代表姓名、性别、年龄、基本工资、请假天数。</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">如示例数据所示，共5行，分别代表姓名、年龄、性别、基本工资、请假天数</span></span><br><span class="line"><span class="comment">样例输入 Copy</span></span><br><span class="line"><span class="comment">zhangsan m 30 4000 2</span></span><br><span class="line"><span class="comment">样例输出 Copy</span></span><br><span class="line"><span class="comment">name:zhangsan</span></span><br><span class="line"><span class="comment">age:30</span></span><br><span class="line"><span class="comment">sex:m</span></span><br><span class="line"><span class="comment">basicSalary:4000</span></span><br><span class="line"><span class="comment">leavedays:2*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">char</span> *name_,<span class="type">char</span> sex_,<span class="type">int</span> age_):<span class="built_in">name</span>(name_),<span class="built_in">sex</span>(sex_),<span class="built_in">age</span>(age_)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;name:&quot;</span>&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;age:&quot;</span>&lt;&lt;age&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;sex:&quot;</span>&lt;&lt;sex&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:<span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> basicSalary;</span><br><span class="line"><span class="type">int</span> leaveDays;</span><br><span class="line"><span class="built_in">Employee</span>(<span class="type">char</span> *name_,<span class="type">char</span> sex_,<span class="type">int</span> age_,<span class="type">int</span> bs,<span class="type">int</span> ld):<span class="built_in">Person</span>(name_,sex_,age_),<span class="built_in">basicSalary</span>(bs),<span class="built_in">leaveDays</span>(ld)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employee::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person::<span class="built_in">show</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;basicSalary:&quot;</span>&lt;&lt;basicSalary&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;leavedays:&quot;</span>&lt;&lt;leaveDays&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> name_[<span class="number">1000</span>],sex_;</span><br><span class="line"><span class="type">int</span> age_,bs_,ld_;</span><br><span class="line">cin&gt;&gt;name_&gt;&gt;sex_&gt;&gt;age_&gt;&gt;bs_&gt;&gt;ld_;</span><br><span class="line"><span class="function">Employee <span class="title">someone</span><span class="params">(name_,sex_,age_,bs_,ld_)</span></span>;</span><br><span class="line">someone.<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验8"><a href="#实验8" class="headerlink" title="实验8"></a>实验8</h2><h3 id="Lab8-A-cpp"><a href="#Lab8-A-cpp" class="headerlink" title="Lab8\A.cpp"></a>Lab8\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;30 20 9 2 -1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lab8-D-cpp"><a href="#Lab8-D-cpp" class="headerlink" title="Lab8\D.cpp"></a>Lab8\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="期中测试"><a href="#期中测试" class="headerlink" title="期中测试"></a>期中测试</h2><h3 id="Midterm-A-cpp"><a href="#Midterm-A-cpp" class="headerlink" title="Midterm\A.cpp"></a>Midterm\A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t,m;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="type">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;temp&gt;&gt;m;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">int</span>(temp*<span class="built_in">pow</span>(<span class="number">10</span>,m))%<span class="number">10</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1141</span></span><br><span class="line"><span class="comment">    User: 04223498</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: 正确</span></span><br><span class="line"><span class="comment">    Time:0 ms</span></span><br><span class="line"><span class="comment">    Memory:2340 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br></pre></td></tr></table></figure><h3 id="Midterm-B-psy-cpp"><a href="#Midterm-B-psy-cpp" class="headerlink" title="Midterm\B-psy.cpp"></a>Midterm\B-psy.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,d=<span class="number">0</span>,N=<span class="number">0</span>,max=<span class="number">0</span>,j=<span class="number">1</span>,s=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> f[<span class="number">1000</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123; </span><br><span class="line">          <span class="keyword">if</span>(m[i]&lt;=m[i+<span class="number">1</span>])</span><br><span class="line">        &#123;    </span><br><span class="line">            f[j]=f[j]+m[i+<span class="number">1</span>]-m[i];</span><br><span class="line">            N++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   </span><br><span class="line">        <span class="keyword">if</span>(f[j])</span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=j;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]&gt;=max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=f[i];</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">        cout&lt;&lt;max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Midterm-B-cpp"><a href="#Midterm-B-cpp" class="headerlink" title="Midterm\B.cpp"></a>Midterm\B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;data[i];</span><br><span class="line">     </span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>,temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> xi=<span class="number">0</span>;xi&lt;n;xi++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> yi=xi;yi&lt;n;yi++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=data[yi]-data[xi];</span><br><span class="line">            max=(max&gt;temp)?max:temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;max;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1112</span></span><br><span class="line"><span class="comment">    User: 04223498</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: 正确</span></span><br><span class="line"><span class="comment">    Time:0 ms</span></span><br><span class="line"><span class="comment">    Memory:2088 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br></pre></td></tr></table></figure><h3 id="Midterm-C-cpp"><a href="#Midterm-C-cpp" class="headerlink" title="Midterm\C.cpp"></a>Midterm\C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> data[<span class="number">120</span>];</span><br><span class="line">    cin&gt;&gt;data;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="keyword">if</span>(data[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> st=len%<span class="number">3</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">        cout&lt;&lt;data[i]&lt;&lt;(((i+<span class="number">1</span>)%<span class="number">3</span>==st)&amp;&amp;(i!=len<span class="number">-1</span>)?<span class="string">&quot;,&quot;</span>:<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> st=(len<span class="number">-1</span>)%<span class="number">3</span>;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        cout&lt;&lt;data[i]&lt;&lt;(((i)%<span class="number">3</span>==st)&amp;&amp;(i!=len<span class="number">-1</span>)?<span class="string">&quot;,&quot;</span>:<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1106</span></span><br><span class="line"><span class="comment">    User: 04223498</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: 正确</span></span><br><span class="line"><span class="comment">    Time:0 ms</span></span><br><span class="line"><span class="comment">    Memory:2088 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br></pre></td></tr></table></figure><h3 id="Midterm-D-cpp"><a href="#Midterm-D-cpp" class="headerlink" title="Midterm\D.cpp"></a>Midterm\D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,n_m;cin&gt;&gt;n&gt;&gt;m;n_m=n-m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ln=<span class="number">1</span>,ln_m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ln*=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n_m;i++)</span><br><span class="line">        ln_m*=i;</span><br><span class="line">    cout&lt;&lt;ln/ln_m;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Problem: 1138</span></span><br><span class="line"><span class="comment">    User: 04223498</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: 正确</span></span><br><span class="line"><span class="comment">    Time:0 ms</span></span><br><span class="line"><span class="comment">    Memory:2088 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2022 CUMT 中国矿业大学 高级语言程序设计实践课程 实验 全部代码题解&lt;/p&gt;
&lt;p&gt;年代久远，只能简单整理了一下，可能有残缺，请根据目录自行查看&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构作业3</title>
    <link href="http://www.lymone.cc/p/51815b56.html"/>
    <id>http://www.lymone.cc/p/51815b56.html</id>
    <published>2025-05-10T04:04:00.000Z</published>
    <updated>2025-05-10T09:11:26.321Z</updated>
    
    <content type="html"><![CDATA[<p>2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><h3 id="A-cpp"><a href="#A-cpp" class="headerlink" title="A.cpp"></a>A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> matrix[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> m,n,cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    flag[x]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">if</span>(matrix[x][i]&amp;&amp;!flag[i])</span><br><span class="line">            <span class="built_in">find</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mm</span>(matrix);</span><br><span class="line">    <span class="built_in">mm</span>(flag);</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tempx,tempy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;tempx&gt;&gt;tempy;</span><br><span class="line">        matrix[tempx][tempy]=<span class="literal">true</span>;</span><br><span class="line">        matrix[tempy][tempx]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">find</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-cpp"><a href="#B-cpp" class="headerlink" title="B.cpp"></a>B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> dat[<span class="number">65538</span>];</span><br><span class="line">    cin&gt;&gt;dat[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dat[<span class="number">0</span>];i++)</span><br><span class="line">        cin&gt;&gt;dat[i];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-cpp"><a href="#C-cpp" class="headerlink" title="C.cpp"></a>C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> *dat, <span class="type">int</span> n, <span class="type">const</span> <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1010</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + (dat[n / <span class="number">2</span>] == x ? <span class="number">0</span> : (dat[n / <span class="number">2</span>] &gt; x ? <span class="built_in">find</span>(dat, n / <span class="number">2</span>, x) : <span class="built_in">find</span>(dat + n / <span class="number">2</span> + <span class="number">1</span>, n - n / <span class="number">2</span> - <span class="number">1</span>, x)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, dat[<span class="number">1010</span>];</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= N; i++)</span><br><span class="line">        cin &gt;&gt; dat[i];</span><br><span class="line">    <span class="type">int</span> x=<span class="built_in">find</span>(dat, N, dat[N]);</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-cpp"><a href="#D-cpp" class="headerlink" title="D.cpp"></a>D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N,x,dat[<span class="number">100</span>];</span><br><span class="line">    cin&gt;&gt;N;x=N;</span><br><span class="line">    <span class="keyword">while</span>(x--) cin&gt;&gt;dat[x];</span><br><span class="line">    <span class="built_in">sort</span>(dat,dat+N,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">while</span>(N--) cout&lt;&lt;dat[N]&lt;&lt;<span class="string">&quot; \n&quot;</span>[N==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-cpp"><a href="#E-cpp" class="headerlink" title="E.cpp"></a>E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N,search,dat[<span class="number">110</span>][<span class="number">2</span>];cin&gt;&gt;N;</span><br><span class="line">    string name[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        cin&gt;&gt;dat[i][<span class="number">0</span>]&gt;&gt;name[i]&gt;&gt;dat[i][<span class="number">1</span>];</span><br><span class="line">    cin&gt;&gt;search;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span>(dat[i][<span class="number">0</span>]==search)</span><br><span class="line">            cout&lt;&lt;name[i]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dat[i][<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富质量高</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p><p>企鹅：<code>3451216814</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="数据结构" scheme="http://www.lymone.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构作业2</title>
    <link href="http://www.lymone.cc/p/26866bc0.html"/>
    <id>http://www.lymone.cc/p/26866bc0.html</id>
    <published>2025-05-10T04:03:00.000Z</published>
    <updated>2025-05-10T09:11:26.315Z</updated>
    
    <content type="html"><![CDATA[<p>2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><h3 id="A-cpp"><a href="#A-cpp" class="headerlink" title="A.cpp"></a>A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> str[<span class="number">5000</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lp = p, rp = p + (str[p] == str[p + <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (; lp &gt;= <span class="number">0</span> &amp;&amp; rp &lt; len; lp--, rp++)</span><br><span class="line">        <span class="keyword">if</span> (str[lp] != str[rp])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    lp++, rp--;</span><br><span class="line">    <span class="keyword">return</span> (rp - lp) ? (rp - lp + <span class="number">1</span>) / <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find2</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; str) &#123;</span><br><span class="line">        len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ans += <span class="built_in">find</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A2-cpp"><a href="#A2-cpp" class="headerlink" title="A2.cpp"></a>A2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> s[<span class="number">5007</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) != EOF) &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s) - <span class="number">1</span>, ans = <span class="number">0</span>, l, r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; ++i, ++ans) &#123;</span><br><span class="line">            <span class="keyword">for</span> (l = i - <span class="number">1</span>, r = i + <span class="number">1</span>; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= len &amp;&amp; s[l] == s[r]; --l, ++r, ++ans);</span><br><span class="line">            <span class="keyword">for</span> (l = i, r = i + <span class="number">1</span>; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= len &amp;&amp; s[l] == s[r]; --l, ++r, ++ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-cpp"><a href="#B-cpp" class="headerlink" title="B.cpp"></a>B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=temp;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=temp;j++)</span><br><span class="line">                cout&lt;&lt;i*j&lt;&lt;<span class="string">&quot; \n&quot;</span>[j==temp?<span class="number">1</span>:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-cpp"><a href="#C-cpp" class="headerlink" title="C.cpp"></a>C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">            cin&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]+a[<span class="number">1</span>]+a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C2-cpp"><a href="#C2-cpp" class="headerlink" title="C2.cpp"></a>C2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> a[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> dc = <span class="number">1</span>, db = <span class="number">1</span>, fb = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; a[<span class="number">4</span>] == a[<span class="number">0</span>] &amp;&amp; a[<span class="number">3</span>] == <span class="number">0</span> &amp;&amp; a[<span class="number">2</span>] == <span class="number">0</span> &amp;&amp; a[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">float</span> d;</span><br><span class="line">        <span class="type">float</span> q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dc == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">                    d = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (d != a[i] - a[i - <span class="number">1</span>])</span><br><span class="line">                    dc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (db == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">                    q = a[i] / a[i - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q != a[i] / a[i - <span class="number">1</span>]))</span><br><span class="line">                    db = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (fb == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; i &lt; <span class="number">5</span>)</span><br><span class="line">                    <span class="keyword">if</span> (a[i] != (a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>]))</span><br><span class="line">                        fb = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">if</span> (dc == <span class="number">1</span>) &#123;</span><br><span class="line">            num = a[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                num = num + d;</span><br><span class="line">                cout &lt;&lt; num;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">4</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (db == <span class="number">1</span>) &#123;</span><br><span class="line">            num = a[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                num = num * q;</span><br><span class="line">                cout &lt;&lt; num;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">4</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fb == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">                cout &lt;&lt; a[i];</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">9</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-cpp"><a href="#D-cpp" class="headerlink" title="D.cpp"></a>D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Node *l, *r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrderTraversal</span><span class="params">(Node *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;l != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">postOrderTraversal</span>(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;r != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">postOrderTraversal</span>(p-&gt;r);</span><br><span class="line">    cout &lt;&lt; p-&gt;data;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">creatBTreePI</span><span class="params">(<span class="type">char</span> *pres, <span class="type">char</span> *ins, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data = pres[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ins[i] != pres[<span class="number">0</span>])</span><br><span class="line">        i++;</span><br><span class="line">    p-&gt;l = <span class="built_in">creatBTreePI</span>(pres + <span class="number">1</span>, ins, i);</span><br><span class="line">    p-&gt;r = <span class="built_in">creatBTreePI</span>(pres + i + <span class="number">1</span>, ins + i + <span class="number">1</span>, n - i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> pres[<span class="number">30</span>], ins[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; pres &gt;&gt; ins) &#123;</span><br><span class="line">        Node *p = <span class="built_in">creatBTreePI</span>(pres, ins, <span class="built_in">strlen</span>(pres));</span><br><span class="line">        <span class="built_in">postOrderTraversal</span>(p);</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-cpp"><a href="#E-cpp" class="headerlink" title="E.cpp"></a>E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Node *l, *r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrderTraversal</span><span class="params">(Node *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;l != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">postOrderTraversal</span>(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;r != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">postOrderTraversal</span>(p-&gt;r);</span><br><span class="line">    cout &lt;&lt; p-&gt;data;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">creatBTreeIP</span><span class="params">(<span class="type">char</span> *ins, <span class="type">char</span> *posts, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data = posts[n - <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ins[i] != posts[n - <span class="number">1</span>])</span><br><span class="line">        i++;</span><br><span class="line">    p-&gt;l = <span class="built_in">creatBTreeIP</span>(ins, posts, i);</span><br><span class="line">    p-&gt;r = <span class="built_in">creatBTreeIP</span>(ins + i + <span class="number">1</span>, posts + i, n - i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> ins[<span class="number">30</span>], posts[<span class="number">30</span>], ctrl;</span><br><span class="line">    cin &gt;&gt; ins &gt;&gt; posts &gt;&gt; ctrl;</span><br><span class="line">    Node *p = <span class="built_in">creatBTreeIP</span>(ins,posts,<span class="built_in">strlen</span>(ins));</span><br><span class="line">    ctrl == <span class="string">&#x27;L&#x27;</span> ? <span class="built_in">postOrderTraversal</span>(p-&gt;l):<span class="built_in">postOrderTraversal</span>(p-&gt;r);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-wzj-cpp"><a href="#F-wzj-cpp" class="headerlink" title="F-wzj.cpp"></a>F-wzj.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, step;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> map[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> to[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> n, m, sx, sy, ex, ey, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (vis[x][y] || map[x][y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    queue&lt;node&gt; Q;</span><br><span class="line">    node a, next;</span><br><span class="line">    a.x = sx;</span><br><span class="line">    a.y = sy;</span><br><span class="line">    a.step = <span class="number">0</span>;</span><br><span class="line">    vis[a.x][a.y] = <span class="number">1</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        a = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (map[a.x][a.y] == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">            ans = a.step;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            next = a;</span><br><span class="line">            next.x += to[i][<span class="number">0</span>];</span><br><span class="line">            next.y += to[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(next.x, next.y))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            next.step = a.step + <span class="number">1</span>;</span><br><span class="line">            vis[next.x][next.y] = <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, map[i]);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map[i][j] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">                    sx = i;</span><br><span class="line">                    sy = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-cpp"><a href="#F-cpp" class="headerlink" title="F.cpp"></a>F.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> nmap[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> minStep[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> cstep[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> step, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minStep[x][y] != <span class="number">0</span> &amp;&amp; step &gt;= minStep[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    minStep[x][y] = step;</span><br><span class="line">    <span class="keyword">if</span> (nmap[x][y] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    flag[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag[x + cstep[i][<span class="number">0</span>]][y + cstep[i][<span class="number">1</span>]] &amp;&amp; (nmap[x + cstep[i][<span class="number">0</span>]][y + cstep[i][<span class="number">1</span>]] == <span class="string">&#x27;-&#x27;</span>||nmap[x + cstep[i][<span class="number">0</span>]][y + cstep[i][<span class="number">1</span>]] == <span class="string">&#x27;E&#x27;</span>))</span><br><span class="line">            <span class="built_in">find</span>(step + <span class="number">1</span>, x + cstep[i][<span class="number">0</span>], y + cstep[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    flag[x][y] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T, N, M;</span><br><span class="line">    <span class="type">int</span> Sx, Sy, Ex, Ey;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= N; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">1</span>; y &lt;= M; y++) &#123;</span><br><span class="line">                cin &gt;&gt; nmap[x][y];</span><br><span class="line">                <span class="keyword">if</span> (nmap[x][y] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                    Sx = x, Sy = y;</span><br><span class="line">                <span class="keyword">if</span> (nmap[x][y] == <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">                    Ex = x, Ey = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">mm</span>(flag);</span><br><span class="line">        <span class="built_in">mm</span>(minStep);</span><br><span class="line">        flag[Sx][Sy] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">find</span>(<span class="number">0</span>, Sx, Sy);</span><br><span class="line">        cout &lt;&lt; (minStep[Ex][Ey] ? minStep[Ex][Ey] : <span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富质量高</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p><p>企鹅：<code>3451216814</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="数据结构" scheme="http://www.lymone.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构作业1</title>
    <link href="http://www.lymone.cc/p/bf8f3a7a.html"/>
    <id>http://www.lymone.cc/p/bf8f3a7a.html</id>
    <published>2025-05-10T04:02:00.000Z</published>
    <updated>2025-05-10T09:11:26.318Z</updated>
    
    <content type="html"><![CDATA[<p>2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><h3 id="A-cpp"><a href="#A-cpp" class="headerlink" title="A.cpp"></a>A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    ll studentScore[<span class="number">1010</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        cin&gt;&gt;studentScore[i][<span class="number">0</span>]&gt;&gt;studentScore[i][<span class="number">1</span>];</span><br><span class="line">    ll temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span>(studentScore[i][<span class="number">0</span>]==temp)&#123;</span><br><span class="line">            cout&lt;&lt;studentScore[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-cpp"><a href="#B-cpp" class="headerlink" title="B.cpp"></a>B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> vc[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N,M,temp,location;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">mm</span>(vc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        vc[i][++vc[i][<span class="number">0</span>]]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        cin&gt;&gt;location&gt;&gt;temp;</span><br><span class="line">        vc[location<span class="number">-1</span>][++vc[location<span class="number">-1</span>][<span class="number">0</span>]]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> t=vc[i][<span class="number">0</span>];t&gt;=<span class="number">1</span>;t--)</span><br><span class="line">            cout&lt;&lt;vc[i][t]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-cpp"><a href="#C-cpp" class="headerlink" title="C.cpp"></a>C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> temp,i=<span class="number">0</span>,data[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;temp)</span><br><span class="line">        data[i++]=temp;</span><br><span class="line">    <span class="built_in">sort</span>(data,data+i,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">while</span>(i--)</span><br><span class="line">        cout&lt;&lt;data[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-cpp"><a href="#D-cpp" class="headerlink" title="D.cpp"></a>D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> max,temp,cnt=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;max;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;temp)</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;max)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(++cnt&amp;&amp;temp&gt;max)</span><br><span class="line">            max=temp,cnt=<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-cpp"><a href="#E-cpp" class="headerlink" title="E.cpp"></a>E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> child[<span class="number">110</span>];</span><br><span class="line">    <span class="built_in">mm</span>(child);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>,bnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt!=n)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!child[i]) bnt++;</span><br><span class="line">            <span class="keyword">if</span>(bnt==m)&#123;</span><br><span class="line">                cout&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                child[i]=<span class="literal">true</span>;</span><br><span class="line">                cnt++,bnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-cpp"><a href="#F-cpp" class="headerlink" title="F.cpp"></a>F.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> temp[<span class="number">110</span>];</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">-1</span>,len=<span class="built_in">strlen</span>(temp);</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; ch;</span><br><span class="line">    <span class="keyword">while</span>(++cnt&lt;len)</span><br><span class="line">        <span class="keyword">switch</span>(temp[cnt])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                ch.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                ch.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                ch.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(ch.<span class="built_in">size</span>()==<span class="number">0</span>||ch.<span class="built_in">top</span>()!=temp[cnt])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">                        ch.<span class="built_in">push</span>(temp[cnt]);</span><br><span class="line">                    <span class="keyword">goto</span> end;</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                    ch.<span class="built_in">pop</span>();   </span><br><span class="line">        &#125;</span><br><span class="line">end:<span class="keyword">if</span>(ch.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">switch</span> (ch.<span class="built_in">top</span>())&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO1&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO2&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;NO3&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F2-cpp"><a href="#F2-cpp" class="headerlink" title="F2.cpp"></a>F2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">checkBrackets</span><span class="params">(<span class="type">const</span> std::string&amp; expression)</span> </span>&#123;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; stack;</span><br><span class="line">    std::string openingBrackets = <span class="string">&quot;([&#123;&quot;</span>;</span><br><span class="line">    std::string closingBrackets = <span class="string">&quot;)]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : expression) &#123;</span><br><span class="line">        <span class="keyword">if</span> (openingBrackets.<span class="built_in">find</span>(c) != std::string::npos) &#123;</span><br><span class="line">            stack.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (closingBrackets.<span class="built_in">find</span>(c) != std::string::npos) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.<span class="built_in">empty</span>() || openingBrackets.<span class="built_in">find</span>(stack.<span class="built_in">top</span>()) != closingBrackets.<span class="built_in">find</span>(c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stack.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string expression;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, expression);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> bracketsMatch = <span class="built_in">checkBrackets</span>(expression);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bracketsMatch) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;NO&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> lastBracket = expression.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">if</span> (lastBracket == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastBracket == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastBracket == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F3-cpp"><a href="#F3-cpp" class="headerlink" title="F3.cpp"></a>F3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMatchingPair</span><span class="params">(<span class="type">char</span> opening, <span class="type">char</span> closing)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;(&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;[&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">checkParentheses</span><span class="params">(<span class="type">const</span> string&amp; expression)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : expression) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span> || c == <span class="string">&#x27;]&#x27;</span> || c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || !<span class="built_in">isMatchingPair</span>(s.<span class="built_in">top</span>(), c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO1&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO2&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO3&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (s.<span class="built_in">empty</span>()) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string expression;</span><br><span class="line">    cin &gt;&gt; expression;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">checkParentheses</span>(expression) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F4-cpp"><a href="#F4-cpp" class="headerlink" title="F4.cpp"></a>F4.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMatchingPair</span><span class="params">(<span class="type">char</span> opening, <span class="type">char</span> closing)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;(&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;[&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (opening == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; closing == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">checkParentheses</span><span class="params">(<span class="type">const</span> string&amp; expression)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : expression) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span> || c == <span class="string">&#x27;]&#x27;</span> || c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || !<span class="built_in">isMatchingPair</span>(s.<span class="built_in">top</span>(), c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO1&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO2&quot;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;NO3&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO1&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO2&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string expression;</span><br><span class="line">    cin &gt;&gt; expression;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">checkParentheses</span>(expression) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F5-cpp"><a href="#F5-cpp" class="headerlink" title="F5.cpp"></a>F5.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    deque&lt;<span class="type">char</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; s.<span class="built_in">length</span>(); a++) &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(s[a]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c, d;</span><br><span class="line">    <span class="keyword">while</span> (a &lt; s.<span class="built_in">length</span>() / <span class="number">2</span>) &#123;</span><br><span class="line">        c = v.<span class="built_in">front</span>();</span><br><span class="line">        v.<span class="built_in">pop_front</span>();</span><br><span class="line">        d = v.<span class="built_in">back</span>();</span><br><span class="line">        v.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&#x27;(&#x27;</span> &amp;&amp; c != <span class="string">&#x27;[&#x27;</span> &amp;&amp; c != <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO2&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO3&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> &amp;&amp; d != <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span> &amp;&amp; d != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO2&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; d != <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO3&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="built_in">judge</span>(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-cpp"><a href="#G-cpp" class="headerlink" title="G.cpp"></a>G.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> ch[<span class="number">1010</span>];</span><br><span class="line">    cin&gt;&gt;ch;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; op;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ch;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G2-cpp"><a href="#G2-cpp" class="headerlink" title="G2.cpp"></a>G2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">infixToPostfix</span><span class="params">(<span class="type">const</span> std::string&amp; infix)</span> </span>&#123;</span><br><span class="line">    std::string postfix;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; operators;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : infix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isOperator</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> &amp;&amp; <span class="built_in">getPrecedence</span>(operators.<span class="built_in">top</span>()) &gt;= <span class="built_in">getPrecedence</span>(c)) &#123;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postfix += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">        operators.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postfix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string infix;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, infix);</span><br><span class="line"></span><br><span class="line">    std::string postfix = <span class="built_in">infixToPostfix</span>(infix);</span><br><span class="line">    std::cout &lt;&lt; postfix &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G3-cpp"><a href="#G3-cpp" class="headerlink" title="G3.cpp"></a>G3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">infixToPostfix</span><span class="params">(<span class="type">const</span> std::string&amp; infix)</span> </span>&#123;</span><br><span class="line">    std::string postfix;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; operators;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : infix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isOperator</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> &amp;&amp; <span class="built_in">getPrecedence</span>(operators.<span class="built_in">top</span>()) &gt;= <span class="built_in">getPrecedence</span>(c)) &#123;</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postfix += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">        operators.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postfix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string infix;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, infix);</span><br><span class="line"></span><br><span class="line">    std::string postfix = <span class="built_in">infixToPostfix</span>(infix);</span><br><span class="line">    std::cout &lt;&lt; postfix &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G4-cpp"><a href="#G4-cpp" class="headerlink" title="G4.cpp"></a>G4.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">infixToPostfix</span><span class="params">(<span class="type">const</span> std::string&amp; infix)</span> </span>&#123;</span><br><span class="line">    std::string postfix;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; operators;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : infix) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isOperator</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> &amp;&amp; <span class="built_in">getPrecedence</span>(operators.<span class="built_in">top</span>()) &gt;= <span class="built_in">getPrecedence</span>(c)) &#123;</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            postfix += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">        operators.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postfix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string infix;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, infix);</span><br><span class="line"></span><br><span class="line">    std::string postfix = <span class="built_in">infixToPostfix</span>(infix);</span><br><span class="line">    std::cout &lt;&lt; postfix &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G5-cpp"><a href="#G5-cpp" class="headerlink" title="G5.cpp"></a>G5.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOperator</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span> || c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPrecedence</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span> || c == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">infixToPostfix</span><span class="params">(<span class="type">const</span> std::string&amp; infix)</span> </span>&#123;</span><br><span class="line">    std::string postfix;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; operators;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; infix.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">        <span class="type">char</span> c = infix[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (std::<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            std::string number;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; infix.<span class="built_in">length</span>() &amp;&amp; std::<span class="built_in">isdigit</span>(infix[i])) &#123;</span><br><span class="line">                number += infix[i];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            --i;</span><br><span class="line">            postfix += number;</span><br><span class="line">            postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isOperator</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span> &amp;&amp; <span class="built_in">getPrecedence</span>(operators.<span class="built_in">top</span>()) &gt;= <span class="built_in">getPrecedence</span>(c)) &#123;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            operators.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">                postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!operators.<span class="built_in">empty</span>() &amp;&amp; operators.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                operators.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!operators.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        postfix += operators.<span class="built_in">top</span>();</span><br><span class="line">        postfix += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        operators.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> postfix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string infix;</span><br><span class="line">    std::<span class="built_in">getline</span>(std::cin, infix);</span><br><span class="line"></span><br><span class="line">    std::string postfix = <span class="built_in">infixToPostfix</span>(infix);</span><br><span class="line">    std::cout &lt;&lt; postfix &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-cpp"><a href="#H-cpp" class="headerlink" title="H.cpp"></a>H.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">1010</span>];</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        cin.<span class="built_in">getline</span>(ch,<span class="number">1010</span>);</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(ch);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[i]==<span class="string">&#x27; &#x27;</span>||ch[i]==<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> (st.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    cout&lt;&lt;st.<span class="built_in">top</span>();</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> st.<span class="built_in">push</span>(ch[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富质量高</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p><p>企鹅：<code>3451216814</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 CUMT 中国矿业大学 数据结构课程 课后作业题 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="数据结构" scheme="http://www.lymone.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构实践4</title>
    <link href="http://www.lymone.cc/p/c58626fc.html"/>
    <id>http://www.lymone.cc/p/c58626fc.html</id>
    <published>2025-05-10T04:01:00.000Z</published>
    <updated>2025-05-10T09:11:26.312Z</updated>
    
    <content type="html"><![CDATA[<p>2023 CUMT 中国矿业大学 数据结构课程 实践课 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><h3 id="A-cpp"><a href="#A-cpp" class="headerlink" title="A.cpp"></a>A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>;</span><br><span class="line">map&lt;string, string&gt; parent;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; data;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">pow</span>(<span class="number">2</span>, n + <span class="number">1</span>) - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        string m, n;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        cin &gt;&gt; m &gt;&gt; n &gt;&gt; len;</span><br><span class="line">        parent[n] = m;</span><br><span class="line">        data[n] = len;</span><br><span class="line">    &#125;</span><br><span class="line">    string p;</span><br><span class="line">    cin &gt;&gt; p;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (parent.<span class="built_in">count</span>(p)) &#123;</span><br><span class="line">        ans += data[p];</span><br><span class="line">        p = parent[p];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-cpp"><a href="#B-cpp" class="headerlink" title="B.cpp"></a>B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mapc[<span class="number">27</span>][<span class="number">27</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> maxc = <span class="number">0x3f3f3f3f</span>,wt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == wt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost &lt; maxc)</span><br><span class="line">            maxc = cost;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= mapc[key][<span class="number">0</span>][<span class="number">0</span>]; i++)</span><br><span class="line">        <span class="built_in">find</span>(mapc[key][i][<span class="number">0</span>], cost + mapc[key][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="built_in">mm</span>(mapc);</span><br><span class="line">    <span class="type">int</span> pre, next;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        cin &gt;&gt; pre &gt;&gt; next &gt;&gt; cost;</span><br><span class="line">        mapc[pre][++mapc[pre][<span class="number">0</span>][<span class="number">0</span>]][<span class="number">0</span>] = next;</span><br><span class="line">        mapc[pre][mapc[pre][<span class="number">0</span>][<span class="number">0</span>]][<span class="number">1</span>] = cost;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;wt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">find</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; maxc &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-cpp"><a href="#C-cpp" class="headerlink" title="C.cpp"></a>C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mapc[<span class="number">27</span>][<span class="number">27</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> maxc = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> cost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">&#x27;Z&#x27;</span>-<span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cost &gt; maxc)</span><br><span class="line">            maxc = cost;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= mapc[key][<span class="number">0</span>][<span class="number">0</span>]; i++)</span><br><span class="line">        <span class="built_in">find</span>(mapc[key][i][<span class="number">0</span>], cost + mapc[key][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="built_in">mm</span>(mapc);</span><br><span class="line">    <span class="type">char</span> pre, next;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        cin &gt;&gt; pre &gt;&gt; next &gt;&gt; cost;</span><br><span class="line">        mapc[pre-<span class="string">&#x27;A&#x27;</span>][++mapc[pre-<span class="string">&#x27;A&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>]][<span class="number">0</span>] = next-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        mapc[pre-<span class="string">&#x27;A&#x27;</span>][mapc[pre-<span class="string">&#x27;A&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>]][<span class="number">1</span>] = cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">find</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; maxc &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-cpp"><a href="#D-cpp" class="headerlink" title="D.cpp"></a>D.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> N, temp;</span><br><span class="line">        cin &gt;&gt; N;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            cin&gt;&gt;temp;</span><br><span class="line">            st.<span class="built_in">insert</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">empty</span>())</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;*st.<span class="built_in">begin</span>()&lt;&lt;endl;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-cpp"><a href="#E-cpp" class="headerlink" title="E.cpp"></a>E.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">num</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dat, abs;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(num A, num B) &#123; <span class="keyword">return</span> (A.abs == B.abs) ? (A.dat &lt; B.dat) : (A.abs &lt; B.abs); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cin &gt;&gt; dat;</span><br><span class="line">        ll a = dat, x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">            x += a % <span class="number">10</span>, a /= <span class="number">10</span>;</span><br><span class="line">        abs = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    num dat[<span class="number">1010</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        dat[i].<span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">sort</span>(dat, dat + n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">        cout &lt;&lt; dat[n].dat &lt;&lt; <span class="string">&quot; \n&quot;</span>[n == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-cpp"><a href="#F-cpp" class="headerlink" title="F.cpp"></a>F.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x[<span class="number">10</span>], y[<span class="number">10</span>], j = <span class="number">0</span>, k = <span class="number">0</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span> (temp % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            y[k++] = temp;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x[j++] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(x,x+<span class="number">5</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(y,y+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        cout&lt;&lt;x[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        cout&lt;&lt;y[i]&lt;&lt;<span class="string">&quot; \n&quot;</span>[i==<span class="number">4</span>?<span class="number">1</span>:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富质量高</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p><p>企鹅：<code>3451216814</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 CUMT 中国矿业大学 数据结构课程 实践课 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="数据结构" scheme="http://www.lymone.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构实践3</title>
    <link href="http://www.lymone.cc/p/5be2b35f.html"/>
    <id>http://www.lymone.cc/p/5be2b35f.html</id>
    <published>2025-05-10T04:00:00.000Z</published>
    <updated>2025-05-10T09:11:26.306Z</updated>
    
    <content type="html"><![CDATA[<p>2023 CUMT 中国矿业大学 数据结构课程 实践课 代码题解</p><blockquote><p>本博文由我的GitHub仓库<a href="https://github.com/LymoneLM/LymoneTest">LymoneLM/LymoneTest</a>代码自动整理生成，进入仓库可以查看最新的代码</p><p>如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢</p><p>在我的个人博客<a href="https://www.lymone.cc">莱蒙黎梦</a>可以查看本博文原文和更多其他我的博文</p></blockquote><p>本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异</p><span id="more"></span><p>部分文件后缀有数字的是同一道题的不同写法，一般序号大的更优</p><h3 id="A-cpp"><a href="#A-cpp" class="headerlink" title="A.cpp"></a>A.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> str[<span class="number">110</span>];</span><br><span class="line"><span class="type">int</span> len,cnt=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    Node *left,*right;</span><br><span class="line">&#125;*Tree;</span><br><span class="line"><span class="function">Node* <span class="title">CreatTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len==cnt||str[++cnt]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    Node *p = <span class="keyword">new</span> Node;</span><br><span class="line">    p-&gt;data=str[cnt];</span><br><span class="line">    p-&gt;left=<span class="built_in">CreatTree</span>();</span><br><span class="line">    p-&gt;right=<span class="built_in">CreatTree</span>();</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrderTraversel</span><span class="params">(Node* p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;left!=<span class="literal">NULL</span>) <span class="built_in">PreOrderTraversel</span>(p-&gt;left);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;right!=<span class="literal">NULL</span>) <span class="built_in">PreOrderTraversel</span>(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrderTraversel</span><span class="params">(Node* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;left!=<span class="literal">NULL</span>) <span class="built_in">InOrderTraversel</span>(p-&gt;left);</span><br><span class="line">    cout&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;right!=<span class="literal">NULL</span>) <span class="built_in">InOrderTraversel</span>(p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    cin.<span class="built_in">getline</span>(str,<span class="number">110</span>);</span><br><span class="line">    len=<span class="built_in">strlen</span>(str);</span><br><span class="line"></span><br><span class="line">    Tree = <span class="built_in">CreatTree</span>();</span><br><span class="line">    <span class="built_in">PreOrderTraversel</span>(Tree);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">InOrderTraversel</span>(Tree);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">InOrderTraversel</span>(Tree);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-cpp"><a href="#B-cpp" class="headerlink" title="B.cpp"></a>B.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="type">int</span> matrix[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            cin &gt;&gt; matrix[i][j];</span><br><span class="line">    <span class="type">bool</span> A[<span class="number">60</span>];</span><br><span class="line">    <span class="built_in">mm</span>(A);</span><br><span class="line">    A[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> allCost = <span class="number">0</span>, minCost, minB, thisMinCost;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt; N; x++) &#123;</span><br><span class="line">        minCost=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i]) &#123;</span><br><span class="line">                thisMinCost = INF;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">                    <span class="keyword">if</span> (!A[j] &amp;&amp; matrix[i][j] != <span class="number">0</span>)</span><br><span class="line">                        thisMinCost = <span class="built_in">min</span>(thisMinCost, matrix[i][j])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(thisMinCost&lt;minCost)&#123;</span><br><span class="line">                minB=</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B2-cpp"><a href="#B2-cpp" class="headerlink" title="B2.cpp"></a>B2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMinVertex</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; cost, <span class="type">const</span> std::vector&lt;<span class="type">bool</span>&gt;&amp; visited, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> minVertex = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i] &amp;&amp; (minVertex == <span class="number">-1</span> || cost[i] &lt; cost[minVertex])) &#123;</span><br><span class="line">            minVertex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minVertex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">primMST</span><span class="params">(<span class="type">const</span> std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">parent</span><span class="params">(n)</span></span>;  <span class="comment">// 用于存储最小生成树中每个顶点的父节点</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">cost</span><span class="params">(n, INT_MAX)</span></span>;  <span class="comment">// 用于存储每个顶点与最小生成树的代价</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;  <span class="comment">// 记录顶点是否被访问</span></span><br><span class="line"></span><br><span class="line">    parent[<span class="number">0</span>] = <span class="number">-1</span>;  <span class="comment">// 根节点的父节点设为-1</span></span><br><span class="line">    cost[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 根节点的代价为0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> minVertex = <span class="built_in">findMinVertex</span>(cost, visited, n);</span><br><span class="line">        visited[minVertex] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (graph[minVertex][j] &amp;&amp; !visited[j] &amp;&amp; graph[minVertex][j] &lt; cost[j]) &#123;</span><br><span class="line">                parent[j] = minVertex;</span><br><span class="line">                cost[j] = graph[minVertex][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> minCost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        minCost += cost[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minCost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">graph</span>(n, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            std::cin &gt;&gt; graph[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> minCost = <span class="built_in">primMST</span>(graph, n);</span><br><span class="line">    std::cout &lt;&lt; minCost &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-cpp"><a href="#C-cpp" class="headerlink" title="C.cpp"></a>C.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    Node *left, *right;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> _weight) : <span class="built_in">weight</span>(_weight) &#123;</span><br><span class="line">        left = right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">const</span> Node &amp;n) &#123;</span><br><span class="line">        weight = n.weight;</span><br><span class="line">        left = n.left;</span><br><span class="line">        right = n.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Node l, Node r) &#123;</span><br><span class="line">        <span class="keyword">return</span> l.weight &lt; r.weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">Travel</span><span class="params">(<span class="type">int</span> deep)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left=<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> deep*weight;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;<span class="built_in">Travel</span>(deep+<span class="number">1</span>)+right-&gt;<span class="built_in">Travel</span>(deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, temp;</span><br><span class="line">    set&lt;Node&gt; forest;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">        ll weight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; temp;</span><br><span class="line">            forest.<span class="built_in">insert</span>(<span class="built_in">Node</span>(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        Node *A, *B;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            A = <span class="keyword">new</span> <span class="built_in">Node</span>(*forest.<span class="built_in">begin</span>());</span><br><span class="line">            forest.<span class="built_in">erase</span>(forest.<span class="built_in">begin</span>());</span><br><span class="line">            B = <span class="keyword">new</span> <span class="built_in">Node</span>(*forest.<span class="built_in">begin</span>());</span><br><span class="line">            forest.<span class="built_in">erase</span>(forest.<span class="built_in">begin</span>());</span><br><span class="line">            <span class="function">Node <span class="title">C</span><span class="params">(A-&gt;weight + B-&gt;weight)</span></span>;</span><br><span class="line">            C.left=A;</span><br><span class="line">            C.right=B;</span><br><span class="line">            forest.<span class="built_in">insert</span>(C);</span><br><span class="line">        &#125;</span><br><span class="line">        A = <span class="keyword">new</span> <span class="built_in">Node</span>(*forest.<span class="built_in">begin</span>());</span><br><span class="line">        cout&lt;&lt;A-&gt;<span class="built_in">Travel</span>(<span class="number">0</span>)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C2-cpp"><a href="#C2-cpp" class="headerlink" title="C2.cpp"></a>C2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    Node* left;</span><br><span class="line">    Node* right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> w) : <span class="built_in">weight</span>(w), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CompareNodes</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node* a, Node* b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-&gt;weight &gt; b-&gt;weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">buildHuffmanTree</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; leafWeights)</span> </span>&#123;</span><br><span class="line">    std::priority_queue&lt;Node*, std::vector&lt;Node*&gt;, CompareNodes&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> weight : leafWeights) &#123;</span><br><span class="line">        Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(weight);</span><br><span class="line">        pq.<span class="built_in">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pq.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        Node* left = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        Node* right = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        Node* parent = <span class="keyword">new</span> <span class="built_in">Node</span>(left-&gt;weight + right-&gt;weight);</span><br><span class="line">        parent-&gt;left = left;</span><br><span class="line">        parent-&gt;right = right;</span><br><span class="line"></span><br><span class="line">        pq.<span class="built_in">push</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pq.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculatePathLength</span><span class="params">(Node* root, <span class="type">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;weight * depth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> leftPathLength = <span class="built_in">calculatePathLength</span>(root-&gt;left, depth + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> rightPathLength = <span class="built_in">calculatePathLength</span>(root-&gt;right, depth + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftPathLength + rightPathLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">leafWeights</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; leafWeights[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node* root = <span class="built_in">buildHuffmanTree</span>(leafWeights);</span><br><span class="line">        <span class="type">int</span> pathLengthSum = <span class="built_in">calculatePathLength</span>(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; pathLengthSum &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D2-cpp"><a href="#D2-cpp" class="headerlink" title="D2.cpp"></a>D2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">char</span> v) : <span class="built_in">val</span>(v), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getHeight</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> leftHeight = <span class="built_in">getHeight</span>(root-&gt;left);</span><br><span class="line">    <span class="type">int</span> rightHeight = <span class="built_in">getHeight</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="type">const</span> std::string&amp; preorder, <span class="type">const</span> std::string&amp; inorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd, <span class="type">int</span> inStart, <span class="type">int</span> inEnd, std::unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;&amp; inorderIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd || inStart &gt; inEnd) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> rootValue = preorder[preStart];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootValue);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rootIndex = inorderIndex[rootValue];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> leftSize = rootIndex - inStart;</span><br><span class="line"></span><br><span class="line">    root-&gt;left = <span class="built_in">buildTree</span>(preorder, inorder, preStart + <span class="number">1</span>, preStart + leftSize, inStart, rootIndex - <span class="number">1</span>, inorderIndex);</span><br><span class="line">    root-&gt;right = <span class="built_in">buildTree</span>(preorder, inorder, preStart + leftSize + <span class="number">1</span>, preEnd, rootIndex + <span class="number">1</span>, inEnd, inorderIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; n) &#123;</span><br><span class="line">        std::string preorder, inorder;</span><br><span class="line">        std::cin &gt;&gt; preorder &gt;&gt; inorder;</span><br><span class="line"></span><br><span class="line">        std::unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; inorderIndex;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            inorderIndex[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="built_in">buildTree</span>(preorder, inorder, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, inorderIndex);</span><br><span class="line">        <span class="type">int</span> height = <span class="built_in">getHeight</span>(root);</span><br><span class="line"></span><br><span class="line">        std::cout &lt;&lt; height &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E2-cpp"><a href="#E2-cpp" class="headerlink" title="E2.cpp"></a>E2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> i) : <span class="built_in">index</span>(i), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isCompleteBinaryTree</span><span class="params">(TreeNode* root, <span class="type">int</span> nodeCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;index != currentIndex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentIndex++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentIndex &lt; nodeCount) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentIndex++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentIndex &lt; nodeCount) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="type">const</span> std::vector&lt;std::string&gt;&amp; treeData)</span> </span>&#123;</span><br><span class="line">    <span class="function">std::vector&lt;TreeNode*&gt; <span class="title">nodes</span><span class="params">(treeData.size())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; treeData.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeData[i] != <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">            nodes[i] = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; treeData.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (treeData[i] != <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">            TreeNode* node = nodes[i];</span><br><span class="line">            <span class="type">int</span> leftIndex, rightIndex;</span><br><span class="line">            <span class="function">std::istringstream <span class="title">iss</span><span class="params">(treeData[i])</span></span>;</span><br><span class="line">            iss &gt;&gt; leftIndex &gt;&gt; rightIndex;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (leftIndex != <span class="number">-1</span>) &#123;</span><br><span class="line">                node-&gt;left = nodes[leftIndex];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rightIndex != <span class="number">-1</span>) &#123;</span><br><span class="line">                node-&gt;right = nodes[rightIndex];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nodes[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; n) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;std::string&gt; <span class="title">treeData</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            std::cin &gt;&gt; treeData[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode* root = <span class="built_in">buildTree</span>(treeData);</span><br><span class="line">        <span class="type">bool</span> isComplete = <span class="built_in">isCompleteBinaryTree</span>(root, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isComplete) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;YES &quot;</span> &lt;&lt; n - <span class="number">1</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;NO 0&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E3-cpp"><a href="#E3-cpp" class="headerlink" title="E3.cpp"></a>E3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"><span class="type">bool</span> hf[N];</span><br><span class="line"><span class="type">int</span> maxCur = <span class="number">-1</span>, nodeId;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur &gt; maxCur)</span><br><span class="line">    &#123;</span><br><span class="line">        maxCur = cur;</span><br><span class="line">        nodeId = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l[u] != <span class="number">-1</span>) <span class="built_in">dfs</span>(l[u], <span class="number">2</span> * cur);</span><br><span class="line">    <span class="keyword">if</span>(r[u] != <span class="number">-1</span>) <span class="built_in">dfs</span>(r[u], <span class="number">2</span> * cur + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a != <span class="string">&quot;-&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            l[i] = <span class="built_in">stoi</span>(a);</span><br><span class="line">            hf[<span class="built_in">stoi</span>(a)] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> l[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(b != <span class="string">&quot;-&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r[i] = <span class="built_in">stoi</span>(b);</span><br><span class="line">            hf[<span class="built_in">stoi</span>(b)] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> r[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(hf[root]) root ++;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(root, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(maxCur == n)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; nodeId &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; root &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F2-cpp"><a href="#F2-cpp" class="headerlink" title="F2.cpp"></a>F2.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> v) : <span class="built_in">val</span>(v), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; inorder, <span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; postorder,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">int</span> inStart, <span class="type">int</span> inEnd, <span class="type">int</span> postStart, <span class="type">int</span> postEnd,</span></span></span><br><span class="line"><span class="params"><span class="function">                    std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; indexMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd || postStart &gt; postEnd) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rootVal = postorder[postEnd];</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(rootVal);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rootIndex = indexMap[rootVal];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> leftTreeSize = rootIndex - inStart;</span><br><span class="line">    <span class="type">int</span> rightTreeSize = inEnd - rootIndex;</span><br><span class="line"></span><br><span class="line">    root-&gt;left = <span class="built_in">buildTree</span>(inorder, postorder, inStart, rootIndex - <span class="number">1</span>, postStart, postStart + leftTreeSize - <span class="number">1</span>, indexMap);</span><br><span class="line">    root-&gt;right = <span class="built_in">buildTree</span>(inorder, postorder, rootIndex + <span class="number">1</span>, inEnd, postEnd - rightTreeSize, postEnd - <span class="number">1</span>, indexMap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorderTraversal</span><span class="params">(TreeNode* root, std::vector&lt;<span class="type">int</span>&gt;&amp; inorderSequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">inorderTraversal</span>(root-&gt;left, inorderSequence);</span><br><span class="line">    inorderSequence.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">inorderTraversal</span>(root-&gt;right, inorderSequence);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    std::cin &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">preorder</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">postorder</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        std::cin &gt;&gt; preorder[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        std::cin &gt;&gt; postorder[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; indexMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        indexMap[preorder[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode* root = <span class="built_in">buildTree</span>(preorder, postorder, <span class="number">0</span>, N - <span class="number">1</span>, <span class="number">0</span>, N - <span class="number">1</span>, indexMap);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; inorderSequence;</span><br><span class="line">    <span class="built_in">inorderTraversal</span>(root, inorderSequence);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; inorderSequence.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        std::cout &lt;&lt; inorderSequence[i];</span><br><span class="line">        <span class="keyword">if</span> (i != inorderSequence.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F3-cpp"><a href="#F3-cpp" class="headerlink" title="F3.cpp"></a>F3.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> pos1[maxn], pos2[maxn];</span><br><span class="line"><span class="type">int</span> a1[maxn], a2[maxn];</span><br><span class="line"><span class="type">int</span> L[maxn], size[maxn], R[maxn];</span><br><span class="line"><span class="type">bool</span> book = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> root = a1[l];</span><br><span class="line">    <span class="type">int</span> lroot = a1[l + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> rroot = a2[pos2[root] - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (lroot == rroot) &#123;</span><br><span class="line">        R[root] = rroot;</span><br><span class="line">        book = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(l + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lsize = pos1[rroot] - pos1[lroot];</span><br><span class="line">    L[root] = lroot;</span><br><span class="line">    R[root] = rroot;</span><br><span class="line">    <span class="built_in">dfs</span>(l + <span class="number">1</span>, l + lsize);</span><br><span class="line">    <span class="built_in">dfs</span>(l + lsize + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs3</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L[now])</span><br><span class="line">        <span class="built_in">dfs3</span>(L[now]);</span><br><span class="line">    cout &lt;&lt; now &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (R[now])</span><br><span class="line">        <span class="built_in">dfs3</span>(R[now]);</span><br><span class="line">    <span class="keyword">if</span> (now == a1[<span class="number">1</span>])</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">        cin &gt;&gt; a1[i];</span><br><span class="line">        pos1[a1[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a2[i];</span><br><span class="line">        pos2[a2[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">if</span> (book)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">dfs3</span>(a1[<span class="number">1</span>]);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编程作业、大作业、课程设计程序代码调试、协助/指导，制作软件/脚本/网页，经验丰富质量高</p><p>支持C/C++、JAVA、Python、Matlab、JavaScript、R语言等，欢迎咨询</p><p>企鹅：<code>3451216814</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;2023 CUMT 中国矿业大学 数据结构课程 实践课 代码题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博文由我的GitHub仓库&lt;a href=&quot;https://github.com/LymoneLM/LymoneTest&quot;&gt;LymoneLM/LymoneTest&lt;/a&gt;代码自动整理生成，进入仓库可以查看最新的代码&lt;/p&gt;
&lt;p&gt;如果代码对您有帮助，希望可以给我的仓库点个Star，或者在GitHub关注我，感谢&lt;/p&gt;
&lt;p&gt;在我的个人博客&lt;a href=&quot;https://www.lymone.cc&quot;&gt;莱蒙黎梦&lt;/a&gt;可以查看本博文原文和更多其他我的博文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本博文提供的代码仅供参考学习，原题已遗失，先尝试后使用，不同年度课程题目可能略有差异&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="数据结构" scheme="http://www.lymone.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>传承红色基因，探寻红色文化的实践之旅</title>
    <link href="http://www.lymone.cc/p/754d6d98.html"/>
    <id>http://www.lymone.cc/p/754d6d98.html</id>
    <published>2023-08-25T10:44:04.000Z</published>
    <updated>2023-08-25T10:45:27.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传承红色基因，探寻红色文化的实践之旅"><a href="#传承红色基因，探寻红色文化的实践之旅" class="headerlink" title="传承红色基因，探寻红色文化的实践之旅"></a>传承红色基因，探寻红色文化的实践之旅</h1><span id="more"></span><p><img src="https://s1.ax1x.com/2023/08/25/pPtLHFH.jpg" alt="在蔡和森纪念馆与相关人员讨论学习"></p><p>在蔡和森纪念馆与相关人员讨论学习</p><p><img src="https://s1.ax1x.com/2023/08/25/pPtLbYd.jpg" alt="在中山公园进行红色文化宣传"></p><p>在中山公园进行红色文化宣传</p><p>为传承红色基因，深入挖掘红色文化的瑰宝，从7月19日起，“赓续红色血脉实践团”成员分别前往广东韶关和湖南娄底开展了一场为期五天的社会实践活动，通过探访红色文化足迹、调查群众对红色文化的认知度、和开展红色文化宣传等方式，他们让珍贵的革命精神在当代得以更为深远地传播。</p><p>实践团成员走访了革命遗址、红色革命博物馆，聆听老革命家们亲述艰苦岁月，感受到革命先辈们无私奉献、舍身取义、英勇不屈伟大的精神。实践团成员还开展了问卷调查，了解当地群众对红色文化的认知程度以及对红色基因传承的合理建议。调查结果显示，绝大多数参与者对红色文化的了解仅浮于表面，迫切希望通过更多样化形式的活动来加深对红色文化的理解与认同。</p><p>实践团成员通过参观和调研蔡和森纪念馆，汲取了奋发向前的力量，同时也更加珍视传承红色基因。</p><p>传承红色基因、发扬红色文化已经成为当代青年的共同心声。唯有通过深入了解、探寻和宣传，新时代的青年们才能让红色文化焕发新的光彩，让红色基因代代相传，加速实现中华民族伟大复兴的中国梦。</p><p>作者 徐云哲 程传彦</p><p>摄影 朱家炜 邓志宁</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;传承红色基因，探寻红色文化的实践之旅&quot;&gt;&lt;a href=&quot;#传承红色基因，探寻红色文化的实践之旅&quot; class=&quot;headerlink&quot; title=&quot;传承红色基因，探寻红色文化的实践之旅&quot;&gt;&lt;/a&gt;传承红色基因，探寻红色文化的实践之旅&lt;/h1&gt;</summary>
    
    
    
    <category term="日常" scheme="http://www.lymone.cc/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构实践2</title>
    <link href="http://www.lymone.cc/p/2ce583c9.html"/>
    <id>http://www.lymone.cc/p/2ce583c9.html</id>
    <published>2023-06-09T06:19:25.000Z</published>
    <updated>2023-06-09T07:03:49.435Z</updated>
    
    <content type="html"><![CDATA[<p>如题，贴出AC代码，仅供参考不提供讲解</p><p>代码主打的就是一个叛逆</p><span id="more"></span><h1 id="问题-A-子串个数"><a href="#问题-A-子串个数" class="headerlink" title="问题 A: 子串个数"></a>问题 A: 子串个数</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你若干个字符串，请编程输出每个字符串的子串个数。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>若干个字符串，每个字符串占一行，字符串中不含空格，长度最大为1000。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>对应每一行的字符串，输出该字符串子串的个数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">apple</span><br><span class="line">software</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">16</span><br><span class="line">37</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;s)&#123;</span><br><span class="line">    <span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">    cout&lt;&lt;len*(len+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别忘了空串是任何串的子串</p><h1 id="问题-B-模式串"><a href="#问题-B-模式串" class="headerlink" title="问题 B: 模式串"></a>问题 B: 模式串</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个目标串，请查找在给目标串中是否存在模式串，存在就输出第一个模式串在目标串中出现的位置。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>占两行，第一行是目标串（长度小于1000），第二行为模式串（长度小于100）。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>输出模式串在目标串中出现的位置，即模式串匹配到目标串时第一个字符在目标串的位置（注意从1开始描述字符开始位置），不能匹配时输出0.</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">appleorange</span><br><span class="line">orange</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string pat;</span><br><span class="line">    <span class="type">int</span> *next;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KMP</span>(string _pat) &#123;</span><br><span class="line">        pat = _pat;</span><br><span class="line">        next = <span class="keyword">new</span> <span class="type">int</span>[pat.<span class="built_in">length</span>()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; pat.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pat[i] != pat[j])</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (pat[i] == pat[j])</span><br><span class="line">                j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; text.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text[i] != pat[j])</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (text[i] == pat[j])</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">if</span> (j == pat.<span class="built_in">length</span>())</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">KMP</span>() &#123; <span class="keyword">delete</span>[] next; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    string pattern,text;</span><br><span class="line">    cin&gt;&gt;text&gt;&gt;pattern;</span><br><span class="line">    <span class="function">KMP <span class="title">kmp</span><span class="params">(pattern)</span></span>;</span><br><span class="line">    cout&lt;&lt;kmp.<span class="built_in">find</span>(text)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>谁家大好人数数从1开始数啊？啊？？</p><p>直接套的KMP模板，没啥好说的。</p><h1 id="问题-C-主对角线上的数据和"><a href="#问题-C-主对角线上的数据和" class="headerlink" title="问题 C: 主对角线上的数据和"></a>问题 C: 主对角线上的数据和</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>在一个N行N列的方阵(或称N阶方阵)中，从左上角到右下角这一斜线上有N个数据元素，这个斜线称为方阵的主对角线。给你一个方阵，请求方阵主对角线上数据的和。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行是N（N&lt;100），表示下边是一个N阶方阵。接下来N行N列用空格间隔放置正整数（int型）。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>N阶方阵主对角线上数据的和。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> T,temp,ans=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;T;j++)&#123;</span><br><span class="line">            cin&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(i==j)</span><br><span class="line">                ans+=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-D-顺时针排螺旋阵"><a href="#问题-D-顺时针排螺旋阵" class="headerlink" title="问题 D: 顺时针排螺旋阵"></a>问题 D: 顺时针排螺旋阵</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个N行N列的方格矩阵，从外圈按顺时针依次填写自然数，这会构成一个螺旋阵，你能编程实现吗？<br>比如5行5列的情况如下：<br>1 2 3 4 5<br>16 17 18 19 6<br>15 24 25 20 7<br>14 23 22 21 8<br>13 12 11 10 9</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>输入一个正整数数N（N&lt;100）。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>输出符合题意的螺旋阵。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br></pre></td></tr></table></figure><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> matrix[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ha=N/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ha;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=i,y=i;</span><br><span class="line">        <span class="type">int</span> step=N-i*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;step;j++)matrix[x++][y]=cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;step;j++)matrix[x][y++]=cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;step;j++)matrix[x--][y]=cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;step;j++)matrix[x][y--]=cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">        matrix[N/<span class="number">2</span>][N/<span class="number">2</span>]=N*N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">mm</span>(matrix);</span><br><span class="line">    <span class="built_in">init</span>(N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">            cout&lt;&lt;matrix[j][i]&lt;&lt;(j==N<span class="number">-1</span>?<span class="string">&#x27;\n&#x27;</span>:<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这题的代码还可以简单的缩短一下，这样重复性太高了，不过没啥意思</strong></p><h1 id="问题-E-汉诺塔游戏中的移动"><a href="#问题-E-汉诺塔游戏中的移动" class="headerlink" title="问题 E: 汉诺塔游戏中的移动"></a>问题 E: 汉诺塔游戏中的移动</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>有三根标为A,B,C的柱子，A柱子上从上到下按金字塔状依次叠放着n个半径从1厘米到n厘米的的圆盘，要把A上的所有盘子移动到柱子C上，中间可以临时放在B上，但每次移动每一根柱子上都不能出现大盘子在小盘子上方的情况，要求用最少的移动次数完成，请编程模拟每次移动。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>占一行，为整数n（n&lt;64），表示盘子数。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>把A上的所有盘子移动到柱子C上，每次只能移动一个盘子，输出移动每一次过程。每次移动占一行，第一个数表示第几步移动，第二个数是移动的盘子的半径，然后是从哪个柱子移动到哪个柱子。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 A-&gt;B</span><br><span class="line">2 2 A-&gt;C</span><br><span class="line">3 1 B-&gt;C</span><br></pre></td></tr></table></figure><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> step=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> n,<span class="type">char</span> A,<span class="type">char</span> B,<span class="type">char</span> C)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;++step&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;A&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;C&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">move</span>(n<span class="number">-1</span>,A,C,B);</span><br><span class="line">        cout&lt;&lt;++step&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;A&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>&lt;&lt;C&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">move</span>(n<span class="number">-1</span>,B,A,C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">move</span>(N,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题的关键就是要明白汉诺塔的递归解法，明白递归解法中各步骤的含义。</p><h1 id="问题-F-树的先根遍历"><a href="#问题-F-树的先根遍历" class="headerlink" title="问题 F: 树的先根遍历"></a>问题 F: 树的先根遍历</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一颗树的节点间关系，请编程实现该树的先根遍历。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>若干行，每行描述了一组双亲节点和孩子节点的关系序偶对（每个节点用不同的大写字母表示，节点小于26个）。且树的度小于5。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>该树的先根遍历序列，序列中每个字母用空格隔开。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B E</span><br><span class="line">B F</span><br><span class="line">A B</span><br><span class="line">A C</span><br></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B E F C</span><br></pre></td></tr></table></figure><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">28</span>][<span class="number">28</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">char</span>(x+<span class="string">&#x27;A&#x27;</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(tree[x][<span class="number">0</span>]==<span class="number">0</span>)   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tree[x][<span class="number">0</span>];i++)</span><br><span class="line">        <span class="built_in">func</span>(tree[x][i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">mm</span>(tree);</span><br><span class="line">    <span class="type">char</span> A,B;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;A)&#123;</span><br><span class="line">        cin&gt;&gt;B;</span><br><span class="line">        tree[A-<span class="string">&#x27;A&#x27;</span>][++tree[A-<span class="string">&#x27;A&#x27;</span>][<span class="number">0</span>]]=B-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-G-树的后根遍历"><a href="#问题-G-树的后根遍历" class="headerlink" title="问题 G: 树的后根遍历"></a>问题 G: 树的后根遍历</h1><p><strong>内存限制：128 MB</strong></p><p>时间限制：1.000 S**</p><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>已知一颗树的节点间关系，请编程实现该树的后根遍历序列。</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>若干行，每行描述了一组双亲节点和孩子节点的关系序偶对（每个节点用不同的大写字母表示，节点小于26个）。且树的度小于5。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>该树的后根遍历序列，序列中每个字母用空格隔开。</p><h4 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B E</span><br><span class="line">B F</span><br><span class="line">A B</span><br><span class="line">A C</span><br></pre></td></tr></table></figure><h4 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E F B C A</span><br></pre></td></tr></table></figure><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">28</span>][<span class="number">28</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[x][<span class="number">0</span>]==<span class="number">0</span>)&#123;  </span><br><span class="line">        cout&lt;&lt;<span class="built_in">char</span>(x+<span class="string">&#x27;A&#x27;</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tree[x][<span class="number">0</span>];i++)</span><br><span class="line">        <span class="built_in">func</span>(tree[x][i]);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">char</span>(x+<span class="string">&#x27;A&#x27;</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">mm</span>(tree);</span><br><span class="line">    <span class="type">char</span> A,B;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;A)&#123;</span><br><span class="line">        cin&gt;&gt;B;</span><br><span class="line">        tree[A-<span class="string">&#x27;A&#x27;</span>][++tree[A-<span class="string">&#x27;A&#x27;</span>][<span class="number">0</span>]]=B-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F、G题没有明确A作为根节点，不过经过观察确定A应该是根节点，尝试提交AC了，那就这样吧；同时因为题目特殊性，用矩阵的方式存储了树。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，贴出AC代码，仅供参考不提供讲解&lt;/p&gt;
&lt;p&gt;代码主打的就是一个叛逆&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="题解" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="ACM" scheme="http://www.lymone.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>中国矿业大学数据结构实践1</title>
    <link href="http://www.lymone.cc/p/b5ecd273.html"/>
    <id>http://www.lymone.cc/p/b5ecd273.html</id>
    <published>2023-06-02T09:30:23.000Z</published>
    <updated>2023-06-02T09:57:25.497Z</updated>
    
    <content type="html"><![CDATA[<p>如题，贴出AC代码，仅供参考不提供讲解</p><p>代码主打的就是一个叛逆</p><span id="more"></span><h1 id="问题-A-找新朋友"><a href="#问题-A-找新朋友" class="headerlink" title="问题 A: 找新朋友"></a>问题 A: 找新朋友</h1><p><strong>内存限制：32 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>新年快到了，天勤准备搞一个聚会，已经知道现有会员N人，把会员从1到N编号，其中会长的号码是N号，凡是和会长是老朋友的，那么该会员的号码肯定和N有大于1的公约数，否则都是新朋友，现在会长想知道究竟有几个新朋友？请你编程序帮会长计算出来。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行是测试数据的组数CN（Case number，1&lt;CN&lt;10000），接着有CN行正整数N（1&lt;n&lt;32768），表示会员人数。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>对于每一个N，输出一行新朋友的人数，这样共有CN行输出。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">25608</span><br><span class="line">24027</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7680</span><br><span class="line">16016</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">soluteA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> N;</span><br><span class="line">        cin&gt;&gt;N; </span><br><span class="line">        cout&lt;&lt;<span class="built_in">euler</span>(N)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">soluteA</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-B-互质"><a href="#问题-B-互质" class="headerlink" title="问题 B: 互质"></a>问题 B: 互质</h1><p><strong>内存限制：32 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给你一个正整数n，请问有多少个比n小的且与n互质的正整数？<br>两个整数互质的意思是，这两个整数没有比1大的公约数。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>输入包含多组测试数据。每组输入是一个正整数n（n&lt;=1000000000）。当n=0时，输入结束。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>对于每组输入，输出比n小的且与n互质的正整数个数。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">12</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">soluteB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">euler</span>(T)&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;T;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">soluteB</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-C-CPP2023-47-约瑟夫问题"><a href="#问题-C-CPP2023-47-约瑟夫问题" class="headerlink" title="问题 C: CPP2023-47-约瑟夫问题"></a>问题 C: CPP2023-47-约瑟夫问题</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>n个人围成一圈，按1到n的顺序编号。从第一个人开始报数（从1到m报数），凡报到m的人退出圈子，问最后留下的是原来的第几号。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>首先输入两个正整数n和m，n表示n个人围一个圈子（n&gt;=2），m表示从1报数到m的人退出圈子（1=&lt;m）。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>最后剩下的人的编号。</p><h4 id="样例输入-复制"><a href="#样例输入-复制" class="headerlink" title="样例输入 复制"></a>样例输入 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br></pre></td></tr></table></figure><h4 id="样例输出-复制"><a href="#样例输出-复制" class="headerlink" title="样例输出 复制"></a>样例输出 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">1</span> ? n : (<span class="built_in">f</span>(n - <span class="number">1</span>, m) + m - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n,m;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f</span>(n,m)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-D-CPP2023-25-进制转换"><a href="#问题-D-CPP2023-25-进制转换" class="headerlink" title="问题 D: CPP2023-25-进制转换"></a>问题 D: CPP2023-25-进制转换</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写程序演示把一个10进制整数转换为R进制的转换结果。</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>正整数N和R，空格分隔<br>N是输入的十进制数，R需要转换的进制数，2&lt;=R&lt;=20</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>将10进制整数转换为R进制的转换结果，超过9的数字符号显示为A、B、C……Z等字母。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 16</span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> num[<span class="number">37</span>] = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, r;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        st.<span class="built_in">push</span>(n % r);</span><br><span class="line">        n /= r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; num[st.<span class="built_in">top</span>()];</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-E-整数求和式的计算"><a href="#问题-E-整数求和式的计算" class="headerlink" title="问题 E: 整数求和式的计算"></a>问题 E: 整数求和式的计算</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>输入两个整数的求和式，比如1+2=，输出求和式和对应结果。请编程实现。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>一个求和式，形如a+b=。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>求和式及对应结果。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+2=</span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+2=3</span><br></pre></td></tr></table></figure><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> x[<span class="number">200</span>];</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    cout&lt;&lt;x;</span><br><span class="line">    <span class="type">int</span> a,b,i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x[i]!=<span class="string">&#x27;+&#x27;</span>)i++;</span><br><span class="line">    x[<span class="built_in">strlen</span>(x)<span class="number">-1</span>]=x[i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">sscanf</span>(x,<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    cout&lt;&lt;a+b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-F-波兰表达式"><a href="#问题-F-波兰表达式" class="headerlink" title="问题 F: 波兰表达式"></a>问题 F: 波兰表达式</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>波兰表达式是一种把运算符前置的算术表达式，例如普通的表达式2 + 3的波兰表示法为+ 2 3。波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算次序，例如(2 + 3) <em> 4的波兰表示法为</em> + 2 3 4。本题求解波兰表达式的值，其中运算符包括+ - * /四个。</p><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><p>输入为一行，其中运算符和运算数之间都用空格分隔，运算数是浮点数。</p><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><p>输出为一行，表达式的值(保留6位小数)。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + 11.0 12.0 + 24.0 35.0</span><br></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1357.000000</span><br></pre></td></tr></table></figure><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="type">bool</span> is_op;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">F</span> &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">double</span> num;</span><br><span class="line">    &#125; mem;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;calc&gt; vt;</span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">    calc m;</span><br><span class="line">    <span class="type">char</span> x[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="number">0</span>] &gt; <span class="string">&#x27;9&#x27;</span> || x[<span class="number">0</span>] &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            m.is_op = <span class="literal">true</span>;</span><br><span class="line">            m.mem.op = x[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            m.is_op = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">sscanf</span>(x, <span class="string">&quot;%lf&quot;</span>, &amp;a);</span><br><span class="line">            m.mem.num = a;</span><br><span class="line">        &#125;</span><br><span class="line">        vt.<span class="built_in">push_back</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = vt.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vt[i].is_op) &#123;</span><br><span class="line">            <span class="type">double</span> &amp;x = vt[i + <span class="number">2</span>].mem.num, &amp;y = vt[i + <span class="number">1</span>].mem.num;</span><br><span class="line">            <span class="keyword">switch</span> (vt[i].mem.op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                y += x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                y -= x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                y *= x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                y /= x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vt.<span class="built_in">erase</span>(vt.<span class="built_in">begin</span>() + i + <span class="number">2</span>);</span><br><span class="line">            vt.<span class="built_in">erase</span>(vt.<span class="built_in">begin</span>() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>, vt[<span class="number">0</span>].mem.num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问题-G-合并队列"><a href="#问题-G-合并队列" class="headerlink" title="问题 G: 合并队列"></a>问题 G: 合并队列</h1><p><strong>内存限制：128 MB</strong></p><p><strong>时间限制：1.000 S</strong></p><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>上体育课的时候，老师已经把班级同学排成了两个队列，而且每个队列都是按照从底到高排好队，现在需要把两个队列合并，合并后需要保证还是从低到高排列。合并队列，你能编程实现吗？</p><h4 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h4><p>第1行为n，表示开始排成的每个队列的长度。第2、3行是代表从小到大的n个整数，每行的整数间有一个空格间隔。</p><h4 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h4><p>输出占一行，为从小到大的整数，每个整数间间隔一个空格。</p><h4 id="样例输入-复制-1"><a href="#样例输入-复制-1" class="headerlink" title="样例输入 复制"></a>样例输入 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 5 8 15</span><br><span class="line">2 3 4 6 9</span><br></pre></td></tr></table></figure><h4 id="样例输出-复制-1"><a href="#样例输出-复制-1" class="headerlink" title="样例输出 复制"></a>样例输出 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 3 4 5 6 8 9 15</span><br></pre></td></tr></table></figure><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20000</span>],b[<span class="number">200000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) cin&gt;&gt;b[i];</span><br><span class="line">    <span class="type">int</span> pa=<span class="number">0</span>,pb=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pa&lt;N&amp;&amp;pb&lt;N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[pa]&lt;b[pb])</span><br><span class="line">            cout&lt;&lt;a[pa++]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;b[pb++]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pa+pb!=<span class="number">2</span>*N)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pa==N)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=pb;i&lt;N;i++)</span><br><span class="line">                cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=pa;i&lt;N;i++)</span><br><span class="line">                cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，贴出AC代码，仅供参考不提供讲解&lt;/p&gt;
&lt;p&gt;代码主打的就是一个叛逆&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="ACM" scheme="http://www.lymone.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>KMP字符串模式匹配算法的两种实现</title>
    <link href="http://www.lymone.cc/p/5492a7c3.html"/>
    <id>http://www.lymone.cc/p/5492a7c3.html</id>
    <published>2023-05-31T04:10:47.000Z</published>
    <updated>2023-06-01T10:34:17.514Z</updated>
    
    <content type="html"><![CDATA[<p>暴力马拉车（BF）的时代结束了，来看看KMP算法吧，简单易用方便快捷！</p><span id="more"></span><h1 id="直接上码"><a href="#直接上码" class="headerlink" title="直接上码"></a>直接上码</h1><p>废话不多说，直接上代码</p><h2 id="1-动态规划-有限状态自动机"><a href="#1-动态规划-有限状态自动机" class="headerlink" title="1.动态规划|有限状态自动机"></a>1.动态规划|有限状态自动机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string pat;</span><br><span class="line">    <span class="type">int</span> **dp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KMP</span>(string _pat) &#123;</span><br><span class="line">        pat = _pat;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="type">int</span> *[pat.<span class="built_in">length</span>()];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">256</span>];</span><br><span class="line">        dp[<span class="number">0</span>][pat[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>,j = <span class="number">1</span>; j &lt; pat.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">            dp[j] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">256</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">                dp[j][i] = i == pat[j] ? j + <span class="number">1</span> : dp[x][i];</span><br><span class="line">            x = dp[x][pat[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; text.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            j = dp[j][text[i]];</span><br><span class="line">            <span class="keyword">if</span> (j == pat.<span class="built_in">length</span>())</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">KMP</span>() &#123;</span><br><span class="line">        <span class="type">int</span> x = pat.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">while</span> (x--)</span><br><span class="line">            <span class="keyword">delete</span>[] dp[x];</span><br><span class="line">        <span class="keyword">delete</span>[] dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-动态规划-空间最优"><a href="#2-动态规划-空间最优" class="headerlink" title="2.动态规划|空间最优"></a>2.动态规划|空间最优</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string pat;</span><br><span class="line">    <span class="type">int</span> *next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KMP</span>(string _pat) &#123;</span><br><span class="line">        pat = _pat;</span><br><span class="line">        next = <span class="keyword">new</span> <span class="type">int</span>[pat.<span class="built_in">length</span>()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; pat.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pat[i] != pat[j])</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">next[i] = pat[i] == pat[j] ? ++j : j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; text.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text[i] != pat[j])</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (text[i] == pat[j])</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">if</span> (j == pat.<span class="built_in">length</span>())</span><br><span class="line">                <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">KMP</span>() &#123; <span class="keyword">delete</span>[] next; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h1><p>两段代码都非常的容易理解：</p><p>代码1是正向思考，枚举在字符串匹配中可能遇到的所有情况，将这些情况的状态变化记录成DP数组，在查找的时候直接无脑代入DP数组就好了，代码看起来繁复的部分基本是由于开二维数组造成的。</p><p>代码2是递推思考，思考如果在匹配<code>pattern[n]</code>的时候如果匹配不上就往前推进到前一个前缀字符串相同的位置，直到匹配成功或者彻底失败，然后重新匹配。</p><p>很明显，代码1是空间换时间的做法，如果需要匹配的对象有明确的范围的话（例如为ASCII范围内）且需要匹配的<code>pattern</code>串长度合适或者需要多次使用，代码1明显更合适。</p><p>而代码2中规中矩，基本是KMP最基本的思路，相对可用范围也更宽泛一些，但是在面对重复多次的恶意数据仍然有超时风险。</p><p>结论就是：DP党无脑冲1，CPC日常写2（2的码量更小）</p><h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>想要看懂KMP，最关键的是要能明白KMP为什么能这么干，也就是KMP的理论依据：</p><blockquote><p>如果text[a:b]匹配pattern[c:d]</p><p>那么显然对于pattern[c:d]中的任何pattern[x:d]都有text[y:b]与之对应</p><p>如果存在pattern[c:z]与pattern[x:d]相同</p><p>那么显然text[y:b]与pattern[c:z]匹配</p></blockquote><p>推理过程如上，稍作理解一下即可，简单来说就是如果已知两段字符串匹配，那么<strong>更短相同前缀</strong>的模式字符串显然也在同一个位置完全匹配。</p><p>如果<code>pattern[j]</code>与当前的<code>text[i]</code>并不匹配，那我们就可以尝试去查询<code>pattern</code>中出现的<strong>更短相同前缀</strong>的位置，来寻找是否有可以匹配的字符，这样就可以规避大量无意义的繁复“马拉车”。</p><p>这也是KMP算法的精髓所在——头可断血可流，字符串绝对不回推。</p><p>为了更好的<del>装逼</del>解释这个过程，我们引入动态规划<code>状态</code>的概念，对于一个长度为$N$的pattern串，认为这个串并不是线性的，而是有$N$个状态分立，处理每个状态时在不同的情况下可能转向不同的状态。</p><p>显然当pattern转为第$N+1$个状态时，发生了完整的匹配。</p><p>既然如此，状态在不同情况下的转移条件就成为了关键，那么状态转移的条件是什么呢？</p><p>代码1和代码2选择了不同的方法描述这个条件：</p><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><p>代码1选择开辟了一个二维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dp[pat.<span class="built_in">length</span>()][<span class="number">256</span>];</span><br></pre></td></tr></table></figure><p>这个数组的功能也很明显，对于每个状态<code>dp[i]</code>记录当这个状态遇见字符’c’时的转移路径<code>dp[i][c]</code></p><p>核心代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必要时需要对dp数组进行初始化</span></span><br><span class="line"><span class="comment">//初始化：当且仅当状态0遇到pat[0]时发生转移到状态1</span></span><br><span class="line">dp[<span class="number">0</span>][pat[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//开辟一个变量作为影子状态指针，影子状态存在的原因解释在下文</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历pattern字符串，从1开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; pat.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">    <span class="comment">//遍历ASCII全集情况下的状态转移方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        <span class="comment">//显然当i==pat[j]时转移到顺序下一状态即j+1</span></span><br><span class="line">        <span class="comment">//当i!=pat[j]时，dp[j][i]取决于影子位置遇到i时的转移方式</span></span><br><span class="line">dp[j][i] = i == pat[j] ? j + <span class="number">1</span> : dp[x][i];</span><br><span class="line">    <span class="comment">//跟进影子状态，将遇到当前字符时影子状态的转移赋给影子状态即影子状态跟进一位</span></span><br><span class="line">x = dp[x][pat[j]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解这个代码的核心在于理解影子状态的存在。</p><p>每个状态<code>i</code>，在遇到<code>pat[i]</code>的时候转移到顺序状态很好理解，但是其他的情况如何转移呢？</p><p>最朴素的思路就是从x=[0:i]依次查找[x:i]是否存在一个最长的字符串与pattern串从0开始完全匹配——等等，匹配？！我们不是正在写用于匹配计算的状态转移数组嘛！</p><p>我们是从位置1开始遍历，刚刚好位置0的转移已经写好了，那么如果我们在推进遍历的过程中持续将当前<code>pat[i]</code>输入状态转移数组，维护一个从位置0开始匹配的X，那么显然X的位置就是最长的<strong>更短相同前缀</strong>字符串的位置。任意位置<code>i</code>在遇到任何<code>c!=pat[i]</code>的时候的处理方式，可以完全参照i状态的影子状态<code>X</code>的处理方式——既然i状态遇到C无法更进一步到顺序下一个位置，那么就尽可能的前往pattern串中更偏后的位置。</p><p>转移数组会在推进的过程中越来越复杂，显然的对于几个具有相同短前缀的位置，后一个位置会通过X继承前一个位置的全部转移方式。</p><p>使用这种方法生成dp数组后，在进行查找的时候只需要无脑放心的顺序将text串的每一个字符塞进转移数组就好了，每次判断一下是否抵达完全匹配的状态即可。</p><h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><p>代码2记录转移路径的方法是开辟了一个一维数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> next[pat.<span class="built_in">length</span>()];</span><br></pre></td></tr></table></figure><p>核心代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//next[i]中记录的是状态i+1最近的相同前缀的状态的位置</span></span><br><span class="line"><span class="comment">//如果不能理解第一行这句话可以先看下文</span></span><br><span class="line"><span class="comment">//如此如果状态0匹配失败下一次仍然匹配状态0，同时也应该注意到需要对状态0进行特判</span></span><br><span class="line">next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//开辟一个变量记录影子状态j</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历pattern字符串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; pat.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">    <span class="comment">//如果影子状态j与当前状态i字符不相同，则j转移到上一个有相同前缀的位置进行尝试</span></span><br><span class="line">    <span class="comment">//显然这种特殊的记录方式数学本质使然，加之状态0的特殊情况，显然不能查找状态0的上一状态</span></span><br><span class="line">    <span class="comment">//所以需要在这里对j=0进行特判，此处j&gt;0替换为j!=0不会发生任何错误</span></span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pat[i] != pat[j])</span><br><span class="line">        <span class="comment">//如果pat[j]匹配失败，显然pat[0:j-1]已经完全匹配成功，那么显然pat[0:next[j-1]]已经匹配</span></span><br><span class="line">        <span class="comment">//因此可以通过j = next[j - 1]转移到相同前缀字符串待匹配的位置</span></span><br><span class="line">j = next[j - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//退出while循环有两种可能，如果是因为pat[i] == pat[j]退出，</span></span><br><span class="line">    <span class="comment">//那么显然pat[0:j]与pat[x:i]完全匹配-》j+1状态是i+1状态最近的相同前缀状态</span></span><br><span class="line">    <span class="comment">//按照next[]记录规则将++j赋给next[],同时维护了影子状态</span></span><br><span class="line">    <span class="comment">//如果是因为j=0退出那么显然在i状态之前已经没有更短相同前缀状态，此时给next[i]赋j皆可</span></span><br><span class="line">next[i] = pat[i] == pat[j] ? ++j : j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>临时兴起改的减缩版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=next[<span class="number">0</span>]=<span class="number">0</span>;i&lt;pat.<span class="built_in">length</span>();next[i++]=pat[i]==pat[j]?++j:j)</span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;pat[i]!=pat[j])j=next[j<span class="number">-1</span>];</span><br></pre></td></tr></table></figure><p>因为对于任何一个状态i只需要考虑前一个更短相同前缀的状态在哪里，原理倒是很好理解，递归查找嘛。</p><p>这段代码不好理解的地方主要就是因为太精炼，next数组的意义太绕了。</p><p><code>next[i-1]</code>记录的是如果状态i匹配失败下一步<strong>需要匹配</strong>的状态!如果能理解这一点那么这段代码就能完全理解了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;暴力马拉车（BF）的时代结束了，来看看KMP算法吧，简单易用方便快捷！&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="ACM" scheme="http://www.lymone.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>生活·美学·摄影|大师作品欣赏</title>
    <link href="http://www.lymone.cc/p/sheying.html"/>
    <id>http://www.lymone.cc/p/sheying.html</id>
    <published>2023-05-30T10:12:58.260Z</published>
    <updated>2023-06-26T12:06:04.167Z</updated>
    
    <content type="html"><![CDATA[<p>想要学习摄影，首先要做的就是能够欣赏摄影！</p><p>我在这里摘录一些我比较喜欢的大师作品，记录一下我对这些作品以及摄影理解。</p><p>同时这篇博文是<code>生活·美学·摄影</code>课程的结课作业。</p><span id="more"></span><h1 id="我想"><a href="#我想" class="headerlink" title="我想"></a>我想</h1><p>在美的欣赏这方面，我一直认为自己是个俗人，能深刻的打动我的，往往是来自大自然的最真实的震撼。</p><p>我最喜欢的一类摄影作品，也大都是对于自然景色的抓拍，其中往往有着极具特色的光影画面。</p><h1 id="Amarate-Tansawet"><a href="#Amarate-Tansawet" class="headerlink" title="Amarate Tansawet"></a>Amarate Tansawet</h1><h2 id="《Symmetry》"><a href="#《Symmetry》" class="headerlink" title="《Symmetry》"></a>《Symmetry》</h2><p>500px ID： Amarate Tansawet</p><p><img src="https://pic3.zhimg.com/80/v2-2a2b95e2d567efb73d1d515fcc7ef1ba_1440w.webp" alt="img"></p><p>国际摄影大赛专业组-自然类日出获奖作品。</p><p><strong>Amarate Tansawet</strong>的作品就属于我最喜欢的那一类，他也非常喜欢拍摄亮色的云层，瑰丽的自然景色，画面中表现的往往是对视觉神经最原始的震撼。</p><p>《Symmetry》中的主体是一片平静明亮的湖面，恰逢此时日出云里烧火，山色半遮，给人一种<code>神仙居处恰在此，天庭景色更几时</code>的感觉。</p><p>最巧妙的就是，画面中的云、湖、屋、树皆不可或缺，这些独立的景色皆对天空异色形成映衬，逆光下的阴影与天空的光形成了一个完整的整体。</p><p><strong>Amarate Tansawet</strong>是一位来自泰国的摄影师，他运营着自己的媒体<strong>Gift of Light</strong> ，在媒体中他是这样介绍自己的<code>A medical doctor,</code> <code>An award-winning semi-pro landscape photographer &amp; FEISOL pro photographer.</code>好吧有够谦虚的，我愿称之为最专业的风景摄影师之一。</p><p><a href="https://imgse.com/i/pCUL9fO"><img src="https://s1.ax1x.com/2023/06/26/pCUL9fO.md.jpg" alt="pCUL9fO.md.jpg"></a></p><p>Amarate Tansawet的作品还能找到许多.</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"         powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_3"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_4"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_5"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_6"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_7"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_8"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_9"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_10"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section></section><p><img src="http://i1.wp.com/mmbiz.qpic.cn/mmbiz_jpg/MMJfKRcfBvMuq7MevMynLxj2ahEUfibpicQK0fciaIia1cBhXYRia9357gEyNT0U7MSp8U4ShQ8S8npWR5icWR58ehVA/0?wx_fmt=jpeg" alt="img"></p><h2 id="《世外桃源》"><a href="#《世外桃源》" class="headerlink" title="《世外桃源》"></a>《世外桃源》</h2><blockquote><p>拍攝日期：2015年12月8日<br>拍攝地點：紐西蘭西岸大區的Waikowhai<br>相機型號：SONY ILCE-7RM2<br>焦距：70 mm<br>快門速度：1/60 sec<br>光圈：f/8<br>ISO感光度：100</p></blockquote><p>拍摄于纽西兰国家公园马瑟森湖，同样的光影对比，暖红到冷蓝形成了最壮丽的对比。</p><p>这张图找不到高清图源了，不过自然光影带给你我的原始震撼仍然清晰可感。</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"         powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_3"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_4"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_5"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_6"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_7"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_8"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_9"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_10"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section></section><h2 id="GoL作品一组"><a href="#GoL作品一组" class="headerlink" title="GoL作品一组"></a>GoL作品一组</h2><p>上传在<code>Gift of Light</code>上的19 Aug…World Photography Day参赛作品。</p><p><img src="https://s1.ax1x.com/2023/05/30/p9jj0C4.jpg" alt="p9jj0C4.jpg"></p><p>画面被近处的枯木和远处的美景对半占据，远处盖山雪顶映照着夕阳余晖，此景又反射在水面上。</p><p>陆地上的三处景起伏有致，安排合理，主体突出，有种呼之欲出的感觉。</p><p>美，实在是美！妙，实在是妙！</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"         powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_3"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_4"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_5"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_6"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_7"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_8"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_9"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_10"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section></section><p><img src="https://s1.ax1x.com/2023/06/06/pCimJxS.jpg" alt="img"></p><p>在戈壁地貌以仰视的视角拍摄银河，占据主体的风化岩构成了一个坚实的三角形，坚实稳固，似通天际，与天空中的银河化为一体，奇！</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"         powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_3"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_4"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_5"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_6"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_7"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_8"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_9"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_10"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section></section><p><img src="https://s1.ax1x.com/2023/06/06/pCimG28.jpg" alt="img"></p><p>这张应该是人物摄影，但是对焦却不在人物上，广角镜头的效果将画面展示的淋漓尽致。</p><p>地平线边的太阳恰好出现在人的脚下，真实的记录了来自大自然的震撼。</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"         powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_3"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_4"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_5"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_6"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_7"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_8"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_9"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_10"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section>    <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_11"><img            src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            style="vertical-align:middle;width:100%;" class="small_image style_12"            _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"            data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>    <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"             class="style_13"><img            src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            style="vertical-align:middle;width:100%;" class="small_image style_14"            _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"            data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">    </section></section><p><a href="https://imgse.com/i/p9jvNQA"><img src="https://s1.ax1x.com/2023/05/30/p9jvNQA.jpg" alt="p9jvNQA.jpg"></a></p><h2 id="《Frozen-Hideout》"><a href="#《Frozen-Hideout》" class="headerlink" title="《Frozen Hideout》"></a>《Frozen Hideout》</h2><blockquote><p>Sony Alpha a7 II<br>Sony Vario-Tessar T* FE 16-35mm f/4 ZA OSS<br>16mm<br>ƒ/19<br>1/15s<br>ISO 100</p></blockquote><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"          powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_3"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_4"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_5"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_6"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_7"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_8"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_9"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_10"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section> </section><p><a href="https://imgse.com/i/p9jvqyR"><img src="https://s1.ax1x.com/2023/05/30/p9jvqyR.jpg" alt="p9jvqyR.jpg"></a></p><h2 id="《Magic-Moment》"><a href="#《Magic-Moment》" class="headerlink" title="《Magic Moment》"></a>《Magic Moment》</h2><blockquote><p>Sony Alpha a7R II<br>Sony FE 70-200mm f/4 G OSS<br>70mm<br>ƒ/8.0<br>1/1000s<br>ISO 100</p></blockquote><p>可以看得出来Amarate Tansawet真的是非常擅长于借助环境营造光效，尤其擅长于记录光影效果、记录大自然营造的奇景，他的作品总是能带给观者一种来自生物本能的最原始的震撼。作品中常常使用广角镜头来将更多的内容纳入画中，也增添了震撼感。</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"          powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_3"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_4"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_5"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_6"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_7"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_8"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_9"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_10"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section> </section><h2 id="《BANGKOK》"><a href="#《BANGKOK》" class="headerlink" title="《BANGKOK》"></a>《BANGKOK》</h2><p><a href="https://imgse.com/i/pCULptK"><img src="https://s1.ax1x.com/2023/06/26/pCULptK.md.jpg" alt="pCULptK.md.jpg"></a></p><p>最后贴上这幅world-top10-landscape-photographers-2021获奖作品</p><p>光影的震撼不一定是属于光怪流离的亮色暖色的，有时候阴暗恐恶的冷色调也会出现一些很神奇的效果，就像是这幅作品，在色调上与以前的其他作品就出现了鲜明的对比。</p><p>实际上大多数时候这些光鲜的景象是很容易出现在我们的生活中的，只不过大多数时候并不那么容易被发现，就像每天晨晚间很常见的丁达尔效应，如果你愿意调大光圈和快门时间，也能拍出这种效果的照片。</p><section style="display:-webkit-flex;display:flex;align-items:stretch;justify-content:center;"          powered-by="xmyeditor.com" data-md5="bad5a" class="style_2">     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_3"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_4"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_5"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_6"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_7"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_8"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_9"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_10"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section>     <section style="width:51px;margin: 0 -8px 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_11"><img             src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             style="vertical-align:middle;width:100%;" class="small_image style_12"             _src="https://web2.xmyeditor.com/sucai-gif/20220624/45700d70169be4456f10995aef487c95.gif"             data-cropselew="51" data-cropseleh="51" data-isstyleimage="1" draggable="false" data-md5="bad5a"></section>     <section style="width:58px;margin: 0 0 0 0;line-height:2px;" powered-by="xmyeditor.com" data-md5="bad5a"              class="style_13"><img             src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             style="vertical-align:middle;width:100%;" class="small_image style_14"             _src="https://web2.xmyeditor.com/sucai-png/20220624/e421c83912e2e93ebeafdbfc70e32064.png"             data-cropselew="58" data-cropseleh="44.1458" data-isstyleimage="1" draggable="false" data-md5="bad5a">     </section> </section><p>按理说这里还应该贴上一些我拍摄的同等的照片，但是相较而言我拍摄的照片品质太低了，就不献丑了。</p><h1 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h1><p>我想，所谓摄影，应当是记录为主。摄影时选择一个恰当的角度无可厚非，但是有人会去专门营造一个景观，或者专门挑选一个对象，为他安排一个人造的环境，我觉得这就不是摄影了，这只是通过拍摄这一手法来完成了一个他心目中的作品。</p><p>你我这一生，已经去过了很多地方，也将要去许多地方，已经过了许多时间，也将要过许多时间，无论如何我们都会看过很多风景也将要看到更多的风景，我学习摄影的初心就是想要在看到一个让我震撼到无以复加的场景的时候，有能力在电子的幅框里将它完完本本的记录下来，将它分享给本没有机会见识到的人，这才是摄影。</p><p>在我看来Amarate Tansawet真的实现了摄影的内涵，他这里并没有非常明显卖弄技巧，但是巧妙的设计了非常的出众画面结构，他已经将摄影的技巧完美的融入到了作品中去，技巧手法与对象不再是独立的两部分。他眼前看到的光景成功的记录到了一份十几兆的文件中，让本没有机会看到的我感受到最原始的震撼，这就是完美的摄影作品。</p><p>我多次提到了最原始的震撼，其实我只是想将这种感受与一般的“美”或者“震撼”区分开来，我觉得美感是天生的也有培养的，但人对美的感受终究是天生的，这种感受是来自于自然的，不受社会或者舆论的牵制，它可能是“丑”的，但却终究是符合“最原始的震撼”，我不知道这样能不能描述我的美学价值观。</p><p>用一句话结尾吧：<strong>生活</strong>，<strong>美学</strong>，<strong>摄影</strong>！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想要学习摄影，首先要做的就是能够欣赏摄影！&lt;/p&gt;
&lt;p&gt;我在这里摘录一些我比较喜欢的大师作品，记录一下我对这些作品以及摄影理解。&lt;/p&gt;
&lt;p&gt;同时这篇博文是&lt;code&gt;生活·美学·摄影&lt;/code&gt;课程的结课作业。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://www.lymone.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="摄影" scheme="http://www.lymone.cc/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>博客恢复</title>
    <link href="http://www.lymone.cc/p/83ff057a.html"/>
    <id>http://www.lymone.cc/p/83ff057a.html</id>
    <published>2023-04-03T12:44:26.000Z</published>
    <updated>2023-04-03T13:15:45.097Z</updated>
    
    <content type="html"><![CDATA[<p>博客终于恢复了</p><span id="more"></span><p>众所周知，这个简陋的、访问速度奇慢的、内容极少的、原创内容稀缺的、蒟蒻的博客，是使用<code>hexo</code>框架搭建的，并且部署在<code>GitHub Page</code>上。</p><p>有一天我突发奇想要将源码也上传到<code>GitHub</code>上，说干就干，于是我的账户名下多了一个仓库。</p><p>However, 在上传的过程中，<code>GitHub</code>检测到我的博客中使用的<code>Hexo-Next</code>主题在<code>GitHub</code>有单独的仓库，于是用了一个指向原仓库的链接代替了我的文件。</p><p>我当时并不知道这件事，我以为他会保留我更改的部分，然而并不是……于是悲剧就发生了。</p><p>在这个学期开学的时候，我并没有把最新的博客文件传输到我的笔记本电脑上，而是使用pull更新了我笔记本电脑上的文件。</p><p>当我再次决定发一篇博文的时候，突然发现！主题文件！是！旧版的！</p><p>是的，我在假期里更新了侧栏、文章底部还有关于访问人数的部分，同时还有用hash缩短<code>url</code>以及Latex公式的渲染，其中有一半的功能全靠修改主题文件实现。</p><p>呜呼~</p><p>今天联系家里人帮我打开电脑电源，成功把文件传输过来了（好耶）</p><p>就酱~</p><p>恢复更新~</p><p>PS: WOL(Wake On Lan)配置的再好也顶不过断电啊</p><p>PPS: 闲的没事的时候给电脑配置好远程连接还是很必要的（确信</p><p>PPPS: 路由器御三家用的那个免费DDNS真的很容易掉，如果想要稳定使用，最好让路由器定时重启</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;博客终于恢复了&lt;/p&gt;</summary>
    
    
    
    <category term="开始" scheme="http://www.lymone.cc/categories/%E5%BC%80%E5%A7%8B/"/>
    
    
    <category term="EasyX" scheme="http://www.lymone.cc/tags/EasyX/"/>
    
    <category term="GitHub" scheme="http://www.lymone.cc/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>从列车调度学习STL集合Set</title>
    <link href="http://www.lymone.cc/p/24d1d7dd.html"/>
    <id>http://www.lymone.cc/p/24d1d7dd.html</id>
    <published>2023-04-02T10:20:00.000Z</published>
    <updated>2023-04-03T13:02:35.676Z</updated>
    
    <content type="html"><![CDATA[<p><strong>7-10 列车调度</strong></p><p>分数 25</p><p>火车站的列车调度铁轨的结构如下图所示。</p><span id="more"></span><p><img src="https://images.ptausercontent.com/188" alt="img"></p><p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有<code>N</code>条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个整数<code>N</code> (2 ≤ <code>N</code> ≤105)，下一行给出从1到<code>N</code>的整数序号的一个重排列。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">8 4 2 5 3 9 1 6 7</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>代码长度限制</p><p>16 KB</p><p>时间限制</p><p>300 ms</p><p>内存限制</p><p>64 MB</p><hr><p>这题思维量不大，火车在调度站的排列和蜘蛛纸牌类似，每一列必须维持大序号的列车在前面。如果新一列车对于所有的调度铁轨尾车号要大，就新开一个铁轨。</p><p>很容易发现，即使是最下面的是N号车厢，或者连续的N到N-M号车厢，并不会影响调度铁轨的数量。所以无需考虑。同时还很容易发现，新插入的列车如果小于多列调度铁轨尾车序号，应该选择与其序号相差最小的调度铁轨。</p><p>我最开始的思路是维护一个数组和一个size变量，分别存储每列车的最后一辆车的序号和调度铁轨的最小数量，但是在插入的过程中需要遍历所有的轨道进行比较，时间复杂度过高最终导致超时。</p><p>再进一步，我考虑到了sort排序进行维护，没有实现</p><p>最终采用的方法是维护一个set</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mm(a) memset(a, 0, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N, temp;</span><br><span class="line">    cin &gt;&gt; N;N--;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    cin&gt;&gt; temp;</span><br><span class="line">    s.<span class="built_in">insert</span>(temp);</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span>(temp &lt; *s.<span class="built_in">rbegin</span>())&#123;</span><br><span class="line">            s.<span class="built_in">erase</span>(s.<span class="built_in">upper_bound</span>(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">insert</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set会内部会自动维护一个红黑树，相对更高效，只需比较新插入的列车和set的尾部量（最大量<code>rbegin()</code>）的比较，如果更大就插入新值，如果已经有更大的量，就删除一个最小的比新插入的量大的量<code>upper_bound()</code>然后插入目前的列车（实际就是模拟了最新的列车替代了之前的列车）。</p><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>引用<a href="https://wyqz.top/p/870124582.html">C++ STL总结 | 行码棋 (wyqz.top)</a></p><h2 id="7-set"><a href="#7-set" class="headerlink" title="7 set"></a>7 set</h2><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h3><p>set容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且set容器里的元素自动从小到大排序。</p><p>即：set里面的元素<strong>不重复 且有序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br></pre></td></tr></table></figure><p>Cpp</p><h3 id="7-2-函数方法"><a href="#7-2-函数方法" class="headerlink" title="7.2 函数方法"></a>7.2 函数方法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">代码</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>s.begin()</code></td><td style="text-align:left">返回set容器的第一个元素的地址（迭代器）O(1)�(1)</td></tr><tr><td style="text-align:left"><code>s.end()</code></td><td style="text-align:left">返回set容器的最后一个元素的下一个地址（迭代器）O(1)�(1)</td></tr><tr><td style="text-align:left"><code>s.rbegin()</code></td><td style="text-align:left">返回逆序迭代器，指向容器元素最后一个位置O(1)�(1)</td></tr><tr><td style="text-align:left"><code>s.rend()</code></td><td style="text-align:left">返回逆序迭代器，指向容器第一个元素前面的位置O(1)�(1)</td></tr><tr><td style="text-align:left"><code>s.clear()</code></td><td style="text-align:left">删除set容器中的所有的元素,返回unsigned int类型O(N)�(�)</td></tr><tr><td style="text-align:left"><code>s.empty()</code></td><td style="text-align:left">判断set容器是否为空O(1)�(1)</td></tr><tr><td style="text-align:left"><code>s.insert()</code></td><td style="text-align:left">插入一个元素</td></tr><tr><td style="text-align:left"><code>s.size()</code></td><td style="text-align:left">返回当前set容器中的元素个数O(1)�(1)</td></tr><tr><td style="text-align:left"><code>erase(iterator)</code></td><td style="text-align:left">删除定位器iterator指向的值</td></tr><tr><td style="text-align:left"><code>erase(first,second）</code></td><td style="text-align:left">删除定位器first和second之间的值</td></tr><tr><td style="text-align:left"><code>erase(key_value)</code></td><td style="text-align:left">删除键值key_value的值</td></tr><tr><td style="text-align:left">查找</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>s.find(element)</code></td><td style="text-align:left">查找set中的某一元素，有则返回该元素对应的迭代器，无则返回结束迭代器</td></tr><tr><td style="text-align:left"><code>s.count(element)</code></td><td style="text-align:left">查找set中的元素出现的个数，由于set中元素唯一，此函数相当于查询element是否出现</td></tr><tr><td style="text-align:left"><code>s.lower_bound(k)</code></td><td style="text-align:left">返回大于等于k的第一个元素的迭代器O(logN)�(����)</td></tr><tr><td style="text-align:left"><code>s.upper_bound(k)</code></td><td style="text-align:left">返回大于k的第一个元素的迭代器O(logN)�(����)</td></tr></tbody></table></div><hr><h3 id="7-3-访问"><a href="#7-3-访问" class="headerlink" title="7.3 访问"></a>7.3 访问</h3><p><strong>迭代器访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>智能指针</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p><strong>访问最后一个元素</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">cout &lt;&lt; *s.<span class="built_in">rbegin</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//第二种</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator iter = s.<span class="built_in">end</span>();</span><br><span class="line">iter--;</span><br><span class="line">cout &lt;&lt; (*iter) &lt;&lt; endl; <span class="comment">//打印2;</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三种</span></span><br><span class="line">cout &lt;&lt; *(--s.<span class="built_in">end</span>()) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><hr><h3 id="7-4-重载-lt-运算符"><a href="#7-4-重载-lt-运算符" class="headerlink" title="7.4 重载&lt;运算符"></a>7.4 重载&lt;运算符</h3><ul><li><strong>基础数据类型</strong></li></ul><p>方式一：改变set排序规则，set中默认使用less比较器，即从小到大排序。（常用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s1; <span class="comment">// 默认从小到大排序</span></span><br><span class="line">set&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt; &gt; s2; <span class="comment">// 从大到小排序</span></span><br></pre></td></tr></table></figure><p>方式二：重载运算符。（很麻烦，不太常用，没必要）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载 &lt; 运算符</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; u, <span class="type">const</span> <span class="type">int</span>&amp; v)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">// return + 返回条件</span></span><br><span class="line">       <span class="keyword">return</span> u &gt; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;<span class="type">int</span>, cmp&gt; s; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    s.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">// 10 9 8 7 6 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><p>方式三：初始化时使用匿名函数定义比较规则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>, function&lt;<span class="type">bool</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt; <span class="built_in">s</span>([&amp;](<span class="type">int</span> i, <span class="type">int</span> j)&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt; j; <span class="comment">// 从大到小</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    s.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : s)</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>高级数据类型（结构体）</strong></li></ul><p>直接重载结构体运算符即可，让结构体可以比较。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Point &amp;p) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 按照点的横坐标从小到大排序,如果横坐标相同,纵坐标从小到大</span></span><br><span class="line">        <span class="keyword">if</span>(x == p.x)</span><br><span class="line">            <span class="keyword">return</span> y &lt; p.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; p.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">set&lt;Point&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    s.<span class="built_in">insert</span>(&#123;x, y&#125;);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/* 输入</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : s)</span><br><span class="line">    cout &lt;&lt; i.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.y &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">/* 输出</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">5 2</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="7-5-其它set"><a href="#7-5-其它set" class="headerlink" title="7.5 其它set"></a>7.5 其它set</h3><p><code>multiset</code>:元素可以重复，且元素有序<br><code>unordered_set</code> ：元素无序且只能出现一次<br><code>unordered_multiset</code> ： 元素无序可以出现多次</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;7-10 列车调度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分数 25&lt;/p&gt;
&lt;p&gt;火车站的列车调度铁轨的结构如下图所示。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://www.lymone.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="ACM" scheme="http://www.lymone.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>Html5+CSS前端开发学习</title>
    <link href="http://www.lymone.cc/p/8942eb80.html"/>
    <id>http://www.lymone.cc/p/8942eb80.html</id>
    <published>2023-04-02T10:20:00.000Z</published>
    <updated>2023-10-17T13:05:06.020Z</updated>
    
    <content type="html"><![CDATA[<p>中国林业大学-web前端开发<code>mooc</code>笔记</p><span id="more"></span><h2 id="1-2-网站与网页"><a href="#1-2-网站与网页" class="headerlink" title="1-2 网站与网页"></a>1-2 网站与网页</h2><p>网站(Website)是指网页(Webpage)的合集</p><p>主页一般称为index</p><p>关键的网页元素：</p><p>logo站标</p><p>导航栏</p><p>超文本链接</p><p>banner横幅（一般作为广告</p><p>表单（填写的内容，例如登录账号</p><p>网站-&gt;文件夹（网页-&gt;文件）-（放置于）-&gt;服务器端</p><p>浏览器：解析网页源代码，渲染网页</p><h2 id="1-3web前端开发的技术构成和技术标准"><a href="#1-3web前端开发的技术构成和技术标准" class="headerlink" title="1-3web前端开发的技术构成和技术标准"></a>1-3web前端开发的技术构成和技术标准</h2><p>结构：HTML//从语义角度，描述页面结构</p><p>样式：CSS//从审美角度，美化页面</p><p>行为：JavaScript//从交互的角度，提升用户体验</p><p>w3c组织负责技术标准制定</p><p>官方网站www.w3.org</p><p>官方学习网站www.w3school.com.cn</p><h1 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2.HTML"></a>2.HTML</h1><h2 id="2-1HTML概述"><a href="#2-1HTML概述" class="headerlink" title="2.1HTML概述"></a>2.1HTML概述</h2><p>HTML是超文本标记语言</p><p>以标签作为基本单位，不区分大小写</p><p>开始标签结束标签成对出现<code>&lt;a&gt;&lt;/a&gt;</code></p><p>单独出现的标签尾部自带一个<code>\</code>例如<code>&lt;aaa\&gt;</code></p><p>标签、属性：</p><p><code>&lt;img src=&quot;&quot; alt=&quot;&quot;\&gt;</code></p><p>标签 属性 属性 其间以空格隔开，一个标签可以带有多个属性</p><h2 id="2-2HTML文件结构"><a href="#2-2HTML文件结构" class="headerlink" title="2.2HTML文件结构"></a>2.2HTML文件结构</h2><h3 id="html文件的基本结构"><a href="#html文件的基本结构" class="headerlink" title="html文件的基本结构"></a>html文件的基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>//标题</span><br><span class="line">        //头部内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">//主体内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h3 id="html5标准文件基本结构"><a href="#html5标准文件基本结构" class="headerlink" title="html5标准文件基本结构"></a>html5标准文件基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>//文档类型：符合html5标准</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>//搜索引擎属性 en zh</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>//元数据 指出字符集编码方式</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>//标题</span><br><span class="line">        //头部内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">//主体内容</span><br><span class="line">    //实际展示的内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h3><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式:"></a>编码方式:</h3><p>ASCII</p><p>GB2312 简体中文</p><p>Unicode 万国码</p><p>UTF-8</p><h2 id="2-3-HTML标签"><a href="#2-3-HTML标签" class="headerlink" title="2-3 HTML标签"></a>2-3 HTML标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>换行</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url:/&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>创建水平线</span><br><span class="line"><span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">注释</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="HTML-提示：使用小写属性"><a href="#HTML-提示：使用小写属性" class="headerlink" title="HTML 提示：使用小写属性"></a>HTML 提示：使用小写属性</h4><p>属性和属性值对大小写<em>不敏感</em>。</p><p>不过，万维网联盟在其 HTML 4 推荐标准中推荐小写的属性/属性值。</p><p>而新版本的 (X)HTML 要求使用小写属性。</p><h4 id="始终为属性值加引号"><a href="#始终为属性值加引号" class="headerlink" title="始终为属性值加引号"></a>始终为属性值加引号</h4><p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。</p><p>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&#x27;Bill &quot;HelloWorld&quot; Gates&#x27;</span><br></pre></td></tr></table></figure><h4 id="下面列出了适用于大多数-HTML-元素的属性："><a href="#下面列出了适用于大多数-HTML-元素的属性：" class="headerlink" title="下面列出了适用于大多数 HTML 元素的属性："></a>下面列出了适用于大多数 HTML 元素的属性：</h4><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left"><em>classname</em></td><td style="text-align:left">规定元素的类名（classname）</td></tr><tr><td style="text-align:left">id</td><td style="text-align:left"><em>id</em></td><td style="text-align:left">规定元素的唯一 id</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left"><em>style_definition</em></td><td style="text-align:left">规定元素的行内样式（inline style）</td></tr><tr><td style="text-align:left">title</td><td style="text-align:left"><em>text</em></td><td style="text-align:left">规定元素的额外信息（可在工具提示中显示）</td></tr></tbody></table></div><h4 id="不建议使用（已经被样式替代）的标签-属性："><a href="#不建议使用（已经被样式替代）的标签-属性：" class="headerlink" title="不建议使用（已经被样式替代）的标签/属性："></a>不建议使用（已经被样式替代）的标签/属性：</h4><div class="table-container"><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><center></td><td style="text-align:left">定义居中的内容。</td></tr><tr><td style="text-align:left"><font> 和 <basefont></td><td style="text-align:left">定义 HTML 字体。</td></tr><tr><td style="text-align:left"><s> 和 <strike></td><td style="text-align:left">定义删除线文本</td></tr><tr><td style="text-align:left"><u></td><td style="text-align:left">定义下划线文本</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">align</td><td style="text-align:left">定义文本的对齐方式</td></tr><tr><td style="text-align:left">bgcolor</td><td style="text-align:left">定义背景颜色</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left">定义文本颜色</td></tr></tbody></table></div><h4 id="Style属性实例"><a href="#Style属性实例" class="headerlink" title="Style属性实例"></a>Style属性实例</h4><h5 id="HTML-样式实例-背景颜色"><a href="#HTML-样式实例-背景颜色" class="headerlink" title="HTML 样式实例 - 背景颜色"></a>HTML 样式实例 - 背景颜色</h5><p>background-color 属性为元素定义了背景颜色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red&quot;</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color:green&quot;</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="HTML-样式实例-字体、颜色和尺寸"><a href="#HTML-样式实例-字体、颜色和尺寸" class="headerlink" title="HTML 样式实例 - 字体、颜色和尺寸"></a>HTML 样式实例 - 字体、颜色和尺寸</h5><p>font-family、color 以及 font-size 属性分别定义元素中文本的字体系列、颜色和字体尺寸：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-family:verdana&quot;</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-family:arial;color:red;font-size:20px;&quot;</span>&gt;</span>A paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="HTML-样式实例-文本对齐"><a href="#HTML-样式实例-文本对齐" class="headerlink" title="HTML 样式实例 - 文本对齐"></a>HTML 样式实例 - 文本对齐</h5><p>text-align 属性规定了元素中文本的水平对齐方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center&quot;</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The heading above is aligned to the center of this page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h3><blockquote><p>以下元素都是短语元素。虽然这些标签定义的文本大多会呈现出特殊的样式，但实际上，这些标签都拥有确切的语义。</p><p>我们并不反对使用它们，但是如果您只是为了达到某种视觉效果而使用这些标签的话，我们建议您使用样式表，那么做会达到更加丰富的效果。</p></blockquote><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><div class="table-container"><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;b&gt;</code></td><td style="text-align:left">定义粗体文本。</td></tr><tr><td style="text-align:left"><code>&lt;big&gt;</code></td><td style="text-align:left">定义大号字。</td></tr><tr><td style="text-align:left"><code>&lt;em&gt;</code></td><td style="text-align:left">定义着重文字。</td></tr><tr><td style="text-align:left"><code>&lt;i&gt;</code></td><td style="text-align:left">定义斜体字。</td></tr><tr><td style="text-align:left"><code>&lt;small&gt;</code></td><td style="text-align:left">定义小号字。</td></tr><tr><td style="text-align:left"><code>&lt;strong&gt;</code></td><td style="text-align:left">定义加重语气。</td></tr><tr><td style="text-align:left"><code>&lt;sub&gt;</code></td><td style="text-align:left">定义下标字。</td></tr><tr><td style="text-align:left"><code>&lt;sup&gt;</code></td><td style="text-align:left">定义上标字。</td></tr><tr><td style="text-align:left"><code>&lt;ins&gt;</code></td><td style="text-align:left">定义插入字。</td></tr><tr><td style="text-align:left"><code>&lt;del&gt;</code></td><td style="text-align:left">定义删除字。</td></tr></tbody></table></div><h4 id="“计算机输出”标签"><a href="#“计算机输出”标签" class="headerlink" title="“计算机输出”标签"></a>“计算机输出”标签</h4><div class="table-container"><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;code&gt;</code></td><td style="text-align:left">定义计算机代码。</td></tr><tr><td style="text-align:left"><code>&lt;kbd&gt;</code></td><td style="text-align:left">定义键盘码。</td></tr><tr><td style="text-align:left"><code>&lt;samp&gt;</code></td><td style="text-align:left">定义计算机代码样本。</td></tr><tr><td style="text-align:left"><code>&lt;tt&gt;</code></td><td style="text-align:left">定义打字机代码。</td></tr><tr><td style="text-align:left"><code>&lt;var&gt;</code></td><td style="text-align:left">定义变量。</td></tr><tr><td style="text-align:left"><code>&lt;pre&gt;</code></td><td style="text-align:left">定义预格式文本。</td></tr></tbody></table></div><h4 id="HTML-引文、引用和定义元素"><a href="#HTML-引文、引用和定义元素" class="headerlink" title="HTML 引文、引用和定义元素"></a>HTML 引文、引用和定义元素</h4><div class="table-container"><table><thead><tr><th style="text-align:left">标签</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><abbr></td><td style="text-align:left">定义缩写或首字母缩略语。</td></tr><tr><td style="text-align:left"><address></td><td style="text-align:left">定义文档作者或拥有者的联系信息。</td></tr><tr><td style="text-align:left"><bdo></td><td style="text-align:left">定义文本方向。</td></tr><tr><td style="text-align:left"><blockquote></td><td style="text-align:left">定义从其他来源引用的节。</td></tr><tr><td style="text-align:left"><dfn></td><td style="text-align:left">定义项目或缩略词的定义。</td></tr><tr><td style="text-align:left"><q></td><td style="text-align:left">定义短的行内引用。</td></tr><tr><td style="text-align:left"><cite></td><td style="text-align:left">定义著作的标题。</td></tr></tbody></table></div><p>颜色，颜色使用十六进制RGB #66CCFF</p><h3 id="HTML-css样式表"><a href="#HTML-css样式表" class="headerlink" title="HTML css样式表"></a>HTML css样式表</h3><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 <style> 标签定义内部样式表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h3><h4 id="HTML-超链接（链接）"><a href="#HTML-超链接（链接）" class="headerlink" title="HTML 超链接（链接）"></a>HTML 超链接（链接）</h4><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p><p>当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。</p><p>我们通过使用 <a> 标签在 HTML 中创建链接。</p><p>有两种使用 <a> 标签的方式：</p><ol><li>通过使用 href 属性 - 创建指向另一个文档的链接</li><li>通过使用 name 属性 - 创建文档内的书签</li></ol><h4 id="HTML-链接-target-属性"><a href="#HTML-链接-target-属性" class="headerlink" title="HTML 链接 - target 属性"></a>HTML 链接 - target 属性</h4><p>使用 Target 属性，你可以定义被链接的文档在何处显示。</p><p>下面的这行会在新窗口打开文档：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot;&gt;Visit W3School!&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="HTML-链接-name-属性"><a href="#HTML-链接-name-属性" class="headerlink" title="HTML 链接 - name 属性"></a>HTML 链接 - name 属性</h4><p>name 属性规定锚（anchor）的名称。</p><p>您可以使用 name 属性创建 HTML 页面中的书签。</p><p>书签不会以任何特殊方式显示，它对读者是不可见的。</p><p>当使用命名锚（named anchors）时，我们可以创建直接跳至该命名锚（比如页面中某个小节）的链接，这样使用者就无需不停地滚动页面来寻找他们需要的信息了。</p><h5 id="命名锚的语法："><a href="#命名锚的语法：" class="headerlink" title="命名锚的语法："></a>命名锚的语法：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a name=&quot;label&quot;&gt;锚（显示在页面上的文本）&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>锚的名称可以是任何你喜欢的名字。</p><p><strong>提示：</strong>您可以使用 id 属性来替代 name 属性，命名锚同样有效。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>首先，我们在 HTML 文档中对锚进行命名（创建一个书签）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a name=&quot;tips&quot;&gt;基本的注意事项 - 有用的提示&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>然后，我们在同一个文档中创建指向该锚的链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#tips&quot;&gt;有用的提示&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>您也可以在其他页面中创建指向该锚的链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.w3school.com.cn/html/html_links.asp#tips&quot;&gt;有用的提示&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。</p><h3 id="HTML图像"><a href="#HTML图像" class="headerlink" title="HTML图像"></a>HTML图像</h3><h4 id="图像标签（-lt-img-gt-）和源属性（Src）"><a href="#图像标签（-lt-img-gt-）和源属性（Src）" class="headerlink" title="图像标签（&lt;img&gt;）和源属性（Src）"></a>图像标签（<code>&lt;img&gt;</code>）和源属性（Src）</h4><p>在 HTML 中，图像由 <code>&lt;img&gt;</code> 标签定义。</p><p><code>&lt;img&gt;</code> 是<strong>空标签</strong>，意思是说，它只包含属性，并且没有闭合标签。</p><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。</p><p>定义图像的语法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="替换文本属性（Alt）"><a href="#替换文本属性（Alt）" class="headerlink" title="替换文本属性（Alt）"></a>替换文本属性（Alt）</h4><p>alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;boat.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Big Boat&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;中国林业大学-web前端开发&lt;code&gt;mooc&lt;/code&gt;笔记&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="前端" scheme="http://www.lymone.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="http://www.lymone.cc/tags/HTML/"/>
    
    <category term="CSS" scheme="http://www.lymone.cc/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Tokitsukaze and Energy Tree谈变量大小与时间复杂度</title>
    <link href="http://www.lymone.cc/p/bf5a535.html"/>
    <id>http://www.lymone.cc/p/bf5a535.html</id>
    <published>2023-01-18T12:10:25.000Z</published>
    <updated>2023-03-03T13:04:08.332Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/46810/D">https://ac.nowcoder.com/acm/contest/46810/D</a><br>来源：牛客网</p><p>Tokitsukaze 有 nnn 个节点的有根能量树，根为 111。最开始，树上每个节点的能量都是 000。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 262144K，其他语言524288K<br>64bit IO Format: %lld</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Tokitsukaze 有 $n$ 个节点的有根能量树，根为 $1$。最开始，树上每个节点的能量都是 $0$。 </p><p> 现在 Tokitsukaze 有 $n$ 个能量球，第 $i$ 个能量球拥有 $v_i$ 能量。她想把这 $n$ 个能量球分别放置在能量树的每个节点上，使能量树的每个节点都恰好有一个能量球。</p><p> Tokitsukaze 每次只能放置一个能量球，所以她将进行 $n$ 次操作。每一次操作，她会选择一个能量球，再选择一个没有能量球的能量树节点 $x$，把刚刚选择的能量球放置在节点 $x$ 上。在这之后，Tokitsukaze 能获得以 $x$ 为根的子树中的所有能量球的能量 (包括节点 $x$ 的能量球能量)。</p><p> 在放置完所有能量球后，Tokitsukaze 可能获得的总能量最多是多少？</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行包含一个整数 $n (1≤n≤2⋅10^5)$。</p><p>第二行包含 $n-1$ 个整数 $f_2,f_3,…,f_n (1≤f_i≤i−1)$，表示节点 $i$ 的父亲是 $f_i$。</p><p>第三行包含 $n$ 个整数 $v_1,v_2,…,v_n (1≤v_i≤10^5)$，分别表示能量球的能量。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>输出一个整数，表示 Tokitsukaze 可能获得的最多总能量。              </p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><blockquote><p>5<br>1 1 3 3<br>1 1 2 2 3</p></blockquote><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote><p>22</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> dt[<span class="number">200010</span>], mul[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, temp;</span><br><span class="line">    ll all = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    mul[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        mul[i] = mul[temp] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; dt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(dt + <span class="number">1</span>, dt + n + <span class="number">1</span>, <span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">    <span class="built_in">sort</span>(mul + <span class="number">1</span>, mul + n + <span class="number">1</span>, <span class="built_in">greater</span>&lt;ll&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        all += <span class="built_in">ll</span>(mul[i]) * dt[i]; <span class="comment">// 2e5*1e5&gt;2e10</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; all &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="故事从26行开始"><a href="#故事从26行开始" class="headerlink" title="故事从26行开始"></a>故事从26行开始</h2><p>​    代码26行<code>all += ll(mul[i]) * dt[i];</code>相当奇怪，这是我wa了三次的原因，mul[i]最大取值应该是$2\times10^5$,dt[i]的最大取值应该是$10^5$，理论上最大取值应该是$2\times10^{10}$,刚好不超过int的范围，但是这题大概是出题人搞事情的吧，总之这里如果不使得计算结果为<code>long long</code>会导致<strong>WA</strong>。</p><p>​    联想到最近一次又一次的<strong>TLE</strong>,我感觉是时候正视题目上方的时间空间限制了。</p><h3 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h3><p>​    ok，第一步，先搞懂基本的变量范围。</p><p><img src="https://s1.ax1x.com/2023/01/18/pS3vrkD.png" alt="变量范围"></p><h4 id="能开多少"><a href="#能开多少" class="headerlink" title="能开多少"></a>能开多少</h4><p>268,435,456B=262144KB=256MB</p><p>B就是Byte，也就是所谓的字节</p><p>1Byte为8bit，也可以通过这个简单的估算整型的大小</p><p>可以简单估算得到下表</p><div class="table-container"><table><thead><tr><th>类型</th><th>大约能开多少</th><th>最大值</th></tr></thead><tbody><tr><td>(u)char/bool</td><td>$2.5\times10^9(实际10^8)$</td><td>(255)127/1</td></tr><tr><td>int</td><td>$6.7\times10^8(实际10^7)$</td><td>$2\times10^{10}$</td></tr><tr><td>long long</td><td>$3.3\times10^8(实际10^7)$</td><td>$9\times10^{19}$</td></tr></tbody></table></div><p><strong>以上数据以256M为准</strong></p><h3 id="时间限制"><a href="#时间限制" class="headerlink" title="时间限制"></a>时间限制</h3><p>这张图选自<code>AOP</code>的小群，原出处不明</p><p><img src="https://s1.ax1x.com/2023/01/18/pS3vste.jpg" alt="常见时间限制对应时间复杂度呃算法"></p><p>希望2023年我能看懂这张图</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/46810/D&quot;&gt;https://ac.nowcoder.com/acm/contest/46810/D&lt;/a&gt;&lt;br&gt;来源：牛客网&lt;/p&gt;
&lt;p&gt;Tokitsukaze 有 nnn 个节点的有根能量树，根为 111。最开始，树上每个节点的能量都是 000。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://www.lymone.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="ACM" scheme="http://www.lymone.cc/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>关于三体TV版</title>
    <link href="http://www.lymone.cc/p/av170001.html"/>
    <id>http://www.lymone.cc/p/av170001.html</id>
    <published>2023-01-15T16:15:00.000Z</published>
    <updated>2023-03-03T13:04:08.332Z</updated>
    
    <content type="html"><![CDATA[<p>第一、艺画开天版三体就是依托答辩</p><p>第二、绝对不漏判任何一件坏事</p><p>第三、还是TM的公平</p><span id="more"></span><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>​    异化开天真的让我看到了三体改编作品的底线，今天（23.1.15）在看腾讯/央视版之前，就已经做好最坏的打算去看了，完全没想到，没想到啊家人们！</p><p>​    NB，plus！</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>​    咱就是说，好不容易有个好作品，最好还是<strong>支持正版</strong>哈，有机会看看央视的就看看央视，有钱充腾讯的就充腾讯。俺这种穷人想看<del>又菜又爱玩</del>又扛不住腾讯的广告影响观感的，只能搞歪门邪道=D。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-懒人，简单快捷"><a href="#1-懒人，简单快捷" class="headerlink" title="1.懒人，简单快捷"></a>1.懒人，简单快捷</h4><p>直接点击播放即可</p><p>播放地址（第一时间更新）：</p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/i0045u918s5.html">第一集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/d0045caapwc.html">第二集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/p0045qpgktl.html">第三集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/x0045levh1j.html">第四集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/k00459ddq2f.html">第五集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/s00453h4di9.html">第六集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/v0045hnpdhr.html">第八集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/l00455u3s27.html">第九集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/a0045ouf83f.html">第10集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/v0045g0h2bi.html">第11集</a></p><p><a href="https://jx.jsonplayer.com/player/?url=https://v.qq.com/x/cover/mzc002007knmh3g/r0045d9xgtg.html">第12集</a></p><h4 id="2-使用脚本，一劳永逸"><a href="#2-使用脚本，一劳永逸" class="headerlink" title="2.使用脚本，一劳永逸"></a>2.使用脚本，一劳永逸</h4><p>推荐脚本：</p><p><a href="https://greasyfork.org/zh-CN/scripts/370634-懒人专用-全网vip视频免费破解去广告-全网音乐直接下载-知乎增强-短视频无水印下载-百度网盘直接下载等多功能工具箱-功能可独立开关-长期更新-放心使用-v6">懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、知乎增强、短视频无水印下载、百度网盘直接下载等多功能工具箱，功能可独立开关。长期更新，放心使用。v6 (greasyfork.org)</a></p><p>先安装油猴。edge,chrome等主流浏览器都可用。</p><p>开启脚本后刷新播放页面在浏览器左侧有弹窗，建议选择<code>B站</code>（顶级NTR）</p><p>剩下的应该不用我多说了。</p><h3 id="呜呼（剧透警告）"><a href="#呜呼（剧透警告）" class="headerlink" title="呜呼（剧透警告）"></a>呜呼（剧透警告）</h3><p>以下是我对目前播放的电视剧的某些看法</p><h4 id="1-史强的味不够足啊"><a href="#1-史强的味不够足啊" class="headerlink" title="1.史强的味不够足啊"></a>1.史强的味不够足啊</h4><p>​    有可能是因为<code>艺画开天</code>的三体对我造成了影响，其实<code>于和伟</code>的大强还是蛮符合人设的，粗中有细。但是总是感觉有点放不开（可能因为动画的史强放的太开了）。</p><h4 id="2-南门二画错了啊"><a href="#2-南门二画错了啊" class="headerlink" title="2.南门二画错了啊"></a>2.南门二画错了啊</h4><p>​    第二集末尾出现的南门二（半人马α）画面应该是错了，画面上三个恒星分别的红色，黄色，白色。</p><p>但是，but:</p><div class="table-container"><table><thead><tr><th>恒星</th><th>行等</th><th>颜色</th></tr></thead><tbody><tr><td>半人马座α星A/南门二A</td><td>G2V型主序星</td><td>黄色</td></tr><tr><td>半人马座α星B/南门二B</td><td>K1V型主序星</td><td>红色</td></tr><tr><td>半人马座α星C/比邻星</td><td>M5V型红矮星</td><td>暗红色</td></tr></tbody></table></div><p><img src="https://p0.itc.cn/q_70/images01/20210612/5158081b4ca24b4f937cd769f5f31901.jpeg" alt="南门二"></p><h4 id="3-三体游戏"><a href="#3-三体游戏" class="headerlink" title="3.三体游戏"></a>3.三体游戏</h4><p>​    最近很忙，没来得及看最新的剧集，感觉三体游戏应该很有意思吧</p><h4 id="4-红岸基地"><a href="#4-红岸基地" class="headerlink" title="4.红岸基地"></a>4.红岸基地</h4><p>​    红岸部分，以及叶文洁的故事，在不影响过审的情况下，几乎做到了不影响叙事，我觉得这是非常值得认可的。</p><h4 id="5-王传君演丁仪"><a href="#5-王传君演丁仪" class="headerlink" title="5.王传君演丁仪"></a>5.王传君演丁仪</h4><p>​    有点无语，微博人是没事干了吗，王传君不演的挺好的。不过如果把球状闪电作为三体前传来看的话，这个时期的丁仪不太应该是这种精神状态，不过这个也应该是导演的锅，不该是演员的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一、艺画开天版三体就是依托答辩&lt;/p&gt;
&lt;p&gt;第二、绝对不漏判任何一件坏事&lt;/p&gt;
&lt;p&gt;第三、还是TM的公平&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://www.lymone.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="三体" scheme="http://www.lymone.cc/tags/%E4%B8%89%E4%BD%93/"/>
    
    <category term="大刘" scheme="http://www.lymone.cc/tags/%E5%A4%A7%E5%88%98/"/>
    
  </entry>
  
  <entry>
    <title>戴森球计划BepInEx模组开发日志</title>
    <link href="http://www.lymone.cc/p/ec842848.html"/>
    <id>http://www.lymone.cc/p/ec842848.html</id>
    <published>2023-01-07T16:04:35.000Z</published>
    <updated>2023-03-03T13:04:08.331Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近又把戴森球计划(Dyson Sphere Program)下回来了，并且发现有个叫创世之书模组挺有意思的。了解到现在模组作者都苦于游戏的数字ID，决定尝试一下能不能解决这个问题。解决问题第二步，选择框架并尝试进行模组开发。</p><span id="more"></span><p><strong>以下部分摘抄xiaoye97版本的BIE教程</strong></p><h1 id="开始编写插件"><a href="#开始编写插件" class="headerlink" title="开始编写插件"></a>开始编写插件</h1><p>我们给默认的Class1修改一个我们想要的名字，我这里改为PluginTutorial，然后将BepInEx的命名空间using一下。</p><p>在BepInEx中，给我们准备了一个类，BaseUnityPlugin，这是继承于MonoBehaviour的，也就是说，我们的插件，最终会以组件的形式挂载，实际上也是这样，每个插件最终都会挂载到游戏中BepInEx的物体身上。所以我们可以使用MonoBehaviour的各种生命周期，比如Awake，Start，Update等等，这些我们以后再说，先来看一下最基础的插件的样子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> BepInEx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PluginTutorial</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//插件描述特性 分别为 插件ID 插件名字 插件版本(必须为数字)</span></span><br><span class="line">    [<span class="meta">BepInPlugin(<span class="string">&quot;me.xiaoye97.plugin.Tutorial&quot;</span>, <span class="string">&quot;Tutorial Plugin&quot;</span>, <span class="string">&quot;1.0&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginTutorial</span> : <span class="title">BaseUnityPlugin</span> <span class="comment">//继承BaseUnityPlugin</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Unity的Start生命周期</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//输出日志</span></span><br><span class="line">            Logger.LogInfo(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将PluginTutorial继承BaseUnityPlugin，并在类上方添加了一个叫做BepInPlugin的特性，这是必须要完成的，只有这样才能正确加载插件。</p><p>如果你不知道特性是什么，可以去补一下C#关于特性方面的知识。</p><p>在BepInPlugin特性中，我们填入了3个参数，分别是插件的ID，插件的名字，插件的版本号，对于ID，我个人习惯使用域名反写法，一般是me.xiaoye97.plugin.游戏名.插件名，插件的名字没有什么特别的要求，直观即可。在插件版本这里，必须是数字形式的版本号，不能夹杂字母等。</p><h1 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h1><p>插件的特性除了BepInExPlugin之外，还有两个可能会用到的特性。</p><p>第一个是BepInProcess特性，大部分情况下，我们不需要写这个特性，但是偶尔会遇到特殊情况。比如，在I社游戏(例如AI少女、恋爱活动等)中，不仅有游戏本体，还有一个工作室程序，将游戏本体与内容创作进行了分割，这样，就会有两个exe，但是，他们是两个不同的exe，有很多地方是不能公用的。那么，只需要用这个特性，就可以限制插件在指定的exe上可以运行。<br>例如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">BepInPlugin(<span class="string">&quot;me.xiaoye97.plugin.Tutorial&quot;</span>, <span class="string">&quot;Tutorial Plugin&quot;</span>, <span class="string">&quot;1.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">BepInProcess(<span class="string">&quot;Maid In Makai.exe&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginTutorial</span> : <span class="title">BaseUnityPlugin</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就是限定只在这个exe中运行，如果想限制在几个exe中可以运行，就继续添加这样特性即可。</p><p>第二个是BepInDependency特性，如果我们的插件，需要以其他的什么插件为前置插件，那么就需要使用这个特性添加依赖，以保证只有在有前置插件的情况下加载我们的插件。</p><p>BepInDependency特性有3种写法，分别是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">BepInPlugin(<span class="string">&quot;me.xiaoye97.plugin.Tutorial&quot;</span>, <span class="string">&quot;Tutorial Plugin&quot;</span>, <span class="string">&quot;1.0&quot;</span>)</span>]</span><br><span class="line"><span class="comment">// 软依赖，如果没有前置插件，依旧继续加载</span></span><br><span class="line">[<span class="meta">BepInDependency(<span class="string">&quot;com.bepinex.plugin.somedependency&quot;</span>, BepInDependency.DependencyFlags.SoftDependency)</span>]</span><br><span class="line"><span class="comment">// 硬依赖，如果没有前置插件，则停止加载</span></span><br><span class="line">[<span class="meta">BepInDependency(<span class="string">&quot;com.bepinex.plugin.importantdependency&quot;</span>, BepInDependency.DependencyFlags.HardDependency)</span>]</span><br><span class="line"><span class="comment">// 省略参数，则默认为硬依赖</span></span><br><span class="line">[<span class="meta">BepInDependency(<span class="string">&quot;com.bepinex.plugin.anotherimportantone&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginTutorial</span> : <span class="title">BaseUnityPlugin</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这些特性之外，还有一点我们需要注意的是，一个dll中可以包括多个插件，只要我们写多个继承BaseUnityPlugin的类，并为他们赋予BepInPlugin特性即可。</p><h1 id="ConfigEntry"><a href="#ConfigEntry" class="headerlink" title="ConfigEntry"></a>ConfigEntry<T></h1><p>在插件功能的设计中，经常会有需要玩家自己配置的东西，比如插件的各种设置，快捷键的分配等。在BepInEx中，提供了一个ConfigEntry类简化了配置操作。</p><p>我们来看一段示例：</p><p>(注:由于阿B在代码页中会删除尖括号，所以我使用空格隔开)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> BepInEx;</span><br><span class="line"><span class="keyword">using</span> BepInEx.Configuration; <span class="comment">//ConfigEntry的命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PluginTutorial</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BepInPlugin(<span class="string">&quot;me.xiaoye97.plugin.Tutorial&quot;</span>, <span class="string">&quot;Tutorial Plugin&quot;</span>, <span class="string">&quot;1.0&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginTutorial</span> : <span class="title">BaseUnityPlugin</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConfigEntry&lt;<span class="built_in">int</span>&gt; intConfig;</span><br><span class="line">        ConfigEntry&lt;<span class="built_in">string</span>&gt; stringConfig;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//绑定配置文件</span></span><br><span class="line">            intConfig = Config.Bind&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;TestInt&quot;</span>, <span class="number">10</span>, <span class="string">&quot;测试用Int&quot;</span>);</span><br><span class="line">            stringConfig = Config.Bind&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;config&quot;</span>, <span class="string">&quot;TestString&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;测试用String&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用配置文件中的值</span></span><br><span class="line">            Logger.LogInfo(intConfig.Value);</span><br><span class="line">            Logger.LogInfo(stringConfig.Value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Config是BaseUnityPlugin的成员，是每个插件都自带的，通过这个Config进行绑定时，会自动以插件ID为文件名生成配置文件，如果你需要多个配置文件，可以手动创建ConfigFile对象。</p><p>绑定时有4个参数，分别是 分类 Key 默认值 描述。分类就是这个配置在哪个标签下，比如我们之前打开控制台窗口的时候，是在[Logging.Console]下，Key则是这个配置的名字，比如打开控制台时的Enabled，默认值则是在没有配置文件的情况下，创建配置文件时使用的值，描述可填可不填，主要是提醒玩家这个配置的用处是什么。</p><h1 id="使用ConfigurationManager在游戏运行时修改配置文件"><a href="#使用ConfigurationManager在游戏运行时修改配置文件" class="headerlink" title="使用ConfigurationManager在游戏运行时修改配置文件"></a>使用ConfigurationManager在游戏运行时修改配置文件</h1><p>BepInEx有多个非常实用的通用插件，放在任何游戏都可以使用，本章介绍ConfigurationManager插件，它可以在游戏内可视化的修改配置文件。</p><p>下载地址：<a href="https://github.com/BepInEx/BepInEx.ConfigurationManager/releases">https://github.com/BepInEx/BepInEx.ConfigurationManager/releases</a></p><p>安装插件后，在游戏中按F1打开配置管理界面，修改即可。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过之前的教程，我们已经知道如何编写基本的插件，如果你有C#和Unity的基础，这个时候已经可以做出一些功能了，比如通过按键修改游戏数据之类的。但是，这有很大的局限性，因为通常情况下，我们并不想通过按键来调用我们的功能，我们想让大多数的功能都是加载之后就不需要管了，或者想做一些普通情况下比较难以操作的事情。这个时候，通过Harmony进行补丁可以解决我们绝大多数的需求。</p><p>Harmony的github链接 <a href="https://github.com/pardeike/Harmony">https://github.com/pardeike/Harmony</a> 详细信息可以在github查看。</p><p>Harmony中使用最频繁的两个地方就是前置补丁和后置补丁，也是最简单的，本篇文章主要就讲这两种。一些特殊的需求需要修改函数本身也是可以的，Harmony支持修改函数的IL码，不过这个就不在基础的范畴了，以后有机会的话会放在进阶篇来讲。</p><h1 id="HarmonyPatch特性"><a href="#HarmonyPatch特性" class="headerlink" title="HarmonyPatch特性"></a>HarmonyPatch特性</h1><p>要对游戏中的方法进行补丁，首先我们需要确定一个目标，这里我准备了一个类，我们就以这个类为例子，对它进行补丁。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"><span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"><span class="built_in">int</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的People类，有两个属性，分别是姓名和年龄，一个构造函数，一个Sleep方法，还有3个说话的方法，使用了3种重载。</p><p>以Sleep方法为例，我们写一个最简单的补丁。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Sleep&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">PeopleSleepPatch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Postfix</span>(<span class="params">People __instance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(__instance.Name + <span class="string">&quot;睡觉了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的HarmonyPatch特性就用于确定补丁目标，这个特性的参数可以写在一排也可以分成几排写。例子中的两个参数分别是要补丁的类型，还有要补丁的方法的名字。这是最简单的情况，实际上我们还经常会遇到其他几种情况。比如，Say方法有3个重载，如何确定要补丁哪一个？属性要怎么补丁？我们再来看几个例子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Say&quot;</span>, new Type[</span>] &#123; &#125;)]</span><br><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Say&quot;</span>, new Type[</span>] &#123; <span class="keyword">typeof</span>(<span class="built_in">string</span>) &#125;)]</span><br><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Say&quot;</span>, new Type[</span>] &#123; <span class="keyword">typeof</span>(<span class="built_in">int</span>) &#125;)]</span><br></pre></td></tr></table></figure><p>如此，面对有重载的情况，我们只需要在添加一个参数，这个参数是一个Type数组，我们按顺序将参数类型填入即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Name&quot;</span>, MethodType.Getter</span>]</span><br><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Age&quot;</span>, MethodType.Setter</span>]</span><br><span class="line">[<span class="meta">HarmonyPatch(typeof(People), MethodType.Constructor</span>]</span><br></pre></td></tr></table></figure><p>面对属性和构造函数，我们可以使用MethodType枚举来当作参数。需要注意的是，补丁构造函数时，函数名不能写dnSpy中看到的.ctor，而是应该直接省略不写函数名。</p><h1 id="补丁方法"><a href="#补丁方法" class="headerlink" title="补丁方法"></a>补丁方法</h1><p>既然已经可以确定补丁目标了，接下来让我们了解一下最基础最常用的两种补丁方法，Prefix(前置补丁)、Postfix(后置补丁)。</p><p>先说后置补丁，这是最简单的，它在补丁目标运行结束之后运行，上面示例中的就是后置补丁，可以使用__result参数接收目标的返回值。</p><p>然后是前置补丁，顾名思义，它是在补丁目标运行之前运行的，这个相对复杂一点。因为我们可以选择是否执行原方法。我们来看两个例子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Say&quot;</span>,  new Type[</span>] &#123; <span class="keyword">typeof</span>(<span class="built_in">string</span>) &#125;)]</span><br><span class="line"><span class="keyword">class</span> <span class="title">PeopleSayPatch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Prefix</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        content = <span class="string">&quot;要说的内容已被修改&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">HarmonyPatch(typeof(People), <span class="string">&quot;Name&quot;</span>,  MethodType.Getter)</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">PeopleNamePatch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Prefix</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">string</span> __result</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        __result = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//拦截原方法，直接使用我们给出的结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个例子，我们将content的值修改为了我们自己想要的值，然后返回true表示让原函数继续执行。第二个例子，我们直接将最终结果修改，然后返回false，表示阻止原函数执行。如果你搞不明白IL代码，不知道如何修改函数本体，也可以通过前置补丁的方式自己计算结果然后修改。</p><h1 id="补丁参数"><a href="#补丁参数" class="headerlink" title="补丁参数"></a>补丁参数</h1><p>在上面的例子中，我们有时候使用了<strong>instance，有时候使用了</strong>result，想必读者还留有疑问，为什么要这么写。其实，这是Harmony作者为我们定好的获取方法信息的方式。</p><p>大概情况如下:</p><ul><li>补丁方法<strong>必须</strong>是<strong>静态</strong>方法</li><li>Prefix需要返回<strong>void</strong>或者<strong>bool</strong>类型(void即不拦截)</li><li>Postfix需要返回<strong>void</strong>类型，或者返回的类型要与<strong>第一个</strong>参数一致(直通模式)</li><li>如果原方法不是静态方法，则可以使用名为<strong>__instance</strong>(两个下划线)的参数来访问对象实例</li><li>可以使用名为<strong>__result</strong>(两个下划线)的参数来访问方法的返回值，如果是Prefix，则得到返回值的默认值</li><li>可以使用名为<strong>__state</strong>(两个下划线)的参数在Prefix补丁中存储任意类型的值，然后在Postfix中使用它，你有责任在Prefix中初始化它的值</li><li>可以使用与原方法中<strong>同名的参数</strong>来访问对应的参数，如果你要写入非引用类型，记得使用ref关键字</li><li>补丁使用的参数必须<strong>严格对应</strong>类型(或者使用object类型)和名字</li><li>我们的补丁只需要定义我们需要用到的参数，不用把所有参数都写上</li><li>要允许补丁重用，可以使用名为<strong>__originalMethod</strong>(两个下划线)的参数注入原始方法</li></ul><p>Transpilers还有一些可选参数，我们这里不做探讨，想了解可以访问Harmony的wiki。</p><h1 id="自动补丁"><a href="#自动补丁" class="headerlink" title="自动补丁"></a>自动补丁</h1><p>补丁的情况我们大体介绍完了，但是我们现在只是写了补丁，还没有对游戏进行补丁，其实很简单，我们只要在插件加载的时候，加上一句代码就好。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Harmony(<span class="string">&quot;me.xiaoye97.plugin.Tutorial&quot;</span>).PatchAll(); <span class="comment">//以作者输入的字符串作为ID，对程序集中所有找到的补丁方法进行补丁。</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Harmony.CreateAndPatchAll(<span class="keyword">typeof</span>(PluginTutorial)); <span class="comment">//Harmony以类名为ID进行补丁，并且只补丁此类下的方法。</span></span><br></pre></td></tr></table></figure><p>除了自动补丁之外，还可以进行手动补丁，可以更加细微的控制，就不在基础教程中说了，读者可以通过GitHub继续了解，以后的教程如果遇到需要手动补丁的情况我再继续讲解。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>对于新接触BepInEx或者UnityModManager Mod开发的人来说，Harmony可能比较陌生，如果看了本篇教程之后还是感觉不太好下手，可以使用dnSpy反编译其他人制作的插件，或者如果他们有开源的话，可以直接查看开源的代码进行学习模仿。我在我的Github上也放了几个小插件，大家可以查看学习。</p><p>我的Github地址：<a href="https://github.com/xiaoye97">https://github.com/xiaoye97</a></p><hr><p>23.1.8 02:41</p><p>突然发觉给DSP换个英文ID是非常大的工程</p><p>并且我可能需要一套完整的解决方案和处理流程</p><p>例如ABN_RecipeUnlockCondition.cs中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (recipeProto.preTech == null || this.gameData.history.TechUnlocked(recipeProto.preTech.ID))</span><br></pre></td></tr></table></figure><p>的使用，显然this.gameData.history.TechUnlocked传参为int</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public bool TechUnlocked(int techId) =&gt; this.techStates.ContainsKey(techId) &amp;&amp; this.techStates[techId].unlocked;</span><br></pre></td></tr></table></figure><p>如果我想更改为英文ID，这些判定有关的需要全部从做</p><p>===</p><p><a href="https://docs.unity3d.com/cn/2020.3/Manual/ExecutionOrder.html">事件函数的执行顺序 - Unity 手册 (unity3d.com)</a></p><p>Unity脚本生命周期</p><p>===</p><p><strong>以下部分为3DM MOD版教程</strong></p><p>一个示例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> BepInEx;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyFirstBepInExMod</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">BepInPlugin(<span class="string">&quot;aoe.top.plugins.MyFirstBepInExMod&quot;</span>, <span class="string">&quot;这是我的第一个BepIn插件&quot;</span>, <span class="string">&quot;1.0.0.0&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyFirstBepInExMod</span> : <span class="title">BaseUnityPlugin</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在插件启动时会直接调用Awake()方法</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 使用Debug.Log()方法来将文本输出到控制台</span></span><br><span class="line">            Debug.Log(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在所有插件全部启动完成后会调用Start()方法，执行顺序在Awake()后面；</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;这里是Start()方法中的内容!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插件启动后会一直循环执行Update()方法，可用于监听事件或判断键盘按键，执行顺序在Start()后面</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> key = <span class="keyword">new</span> BepInEx.Configuration.KeyboardShortcut(KeyCode.F9);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key.IsDown())</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;这里是Updatet()方法中的内容，你看到这条消息是因为你按下了F9&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在插件关闭时会调用OnDestroy()方法</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;当你看到这条消息时，就表示我已经被关闭一次了!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HarmonyPrefix"><a href="#HarmonyPrefix" class="headerlink" title="HarmonyPrefix"></a>HarmonyPrefix</h3><p>HarmonyPrefix是Harmony为我们提供的一个接口，它将在我们指定的函数前进行执行，并且我们可以返回一个bool值来控制是否继续继续执行游戏原函数；<br>需要配合HarmonyPatch一起使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 19 个重载</span><br><span class="line">public HarmonyPatch();</span><br><span class="line">public HarmonyPatch(Type declaringType);</span><br><span class="line">public HarmonyPatch(MethodType methodType);</span><br><span class="line">public HarmonyPatch(string methodName);</span><br><span class="line">public HarmonyPatch(Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(MethodType methodType, params Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(string methodName, MethodType methodType);</span><br><span class="line">public HarmonyPatch(string methodName, params Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(Type[] argumentTypes, ArgumentType[] argumentVariations);</span><br><span class="line">public HarmonyPatch(Type declaringType, MethodType methodType);</span><br><span class="line">public HarmonyPatch(Type declaringType, string methodName);</span><br><span class="line">public HarmonyPatch(Type declaringType, Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(Type declaringType, string methodName, MethodType methodType);</span><br><span class="line">public HarmonyPatch(string methodName, Type[] argumentTypes, ArgumentType[] argumentVariations);</span><br><span class="line">public HarmonyPatch(Type declaringType, string methodName, params Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(MethodType methodType, Type[] argumentTypes, ArgumentType[] argumentVariations);</span><br><span class="line">public HarmonyPatch(Type declaringType, MethodType methodType, params Type[] argumentTypes);</span><br><span class="line">public HarmonyPatch(Type declaringType, string methodName, Type[] argumentTypes, ArgumentType[] argumentVariations);</span><br><span class="line">public HarmonyPatch(Type declaringType, MethodType methodType, Type[] argumentTypes, ArgumentType[] argumentVariations);</span><br><span class="line">public HarmonyPatch(string assemblyQualifiedDeclaringType, string methodName, MethodType? methodType = null, Type[] argumentTypes = null, ArgumentType[] argumentVariations = null);</span><br></pre></td></tr></table></figure><p>如：<br>我们想要对Mecha类下的SetForNewGame函数进行拦截，那么就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[HarmonyPrefix]</span><br><span class="line">[HarmonyPatch(typeof(Mecha), &quot;SetForNewGame&quot;)]</span><br><span class="line">public static bool Mecha_SetForNewGame_Prefix()</span><br><span class="line">&#123;</span><br><span class="line">    // 这里写入我们自己的内容            </span><br><span class="line">    Debug.Log(&quot;这里的内容将会在游戏函数执行前进行执行&quot;);</span><br><span class="line">    // 返回 true为继续执执行游戏原函数，返回 false为不执行游戏原函数,</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HarmonyPostfix"><a href="#HarmonyPostfix" class="headerlink" title="HarmonyPostfix"></a>HarmonyPostfix</h3><p>HarmonyPostfix一样也是Harmony为我们提供的一个接口，它将在我们指定的函数执行完毕后，再执行。<br>一样需要配合HarmonyPatch一起使用</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HarmonyPostfix]</span><br><span class="line">[HarmonyPatch(typeof(Mecha), &quot;SetForNewGame&quot;)]</span><br><span class="line">public static void Mecha_SetForNewGame_Postfix()</span><br><span class="line">&#123;</span><br><span class="line">    // 这里写入我们自己的内容            </span><br><span class="line">    Debug.Log(&quot;这里的内容需要等待游戏原函数执行完后才会执行&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1.我们的函数需要使用static静态函数，不然会报错；<br>2.函数名可以自定义，但尽量不要和游戏原有函数冲突；<br>3.两种拦截方式大同小异，希望大家举一反三。</p></blockquote><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在游戏原函数中难免会出现this参数，万能的Harmony当然也考虑到了这一点，针对于this，我们可以向函数中传递一个__instance。</p><p>游戏原函数内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void SetForNewGame()</span><br><span class="line">&#123;</span><br><span class="line">    ModeConfig freeMode = Configs.freeMode;</span><br><span class="line">    this.coreEnergyCap = freeMode.mechaCoreEnergyCap;</span><br><span class="line">    this.coreEnergy = this.coreEnergyCap;</span><br><span class="line">    this.corePowerGen = freeMode.mechaCorePowerGen;</span><br><span class="line">    this.reactorPowerGen = freeMode.mechaReactorPowerGen;</span><br><span class="line">    this.reactorEnergy = 0.0;</span><br><span class="line">    this.reactorItemId = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[HarmonyPostfix]</span><br><span class="line">[HarmonyPatch(typeof(Mecha), &quot;SetForNewGame&quot;)]</span><br><span class="line">public static void Mecha_SetForNewGame_Postfix(Mecha __instance)</span><br><span class="line">&#123;</span><br><span class="line">    ModeConfig freeMode = Configs.freeMode;</span><br><span class="line">    __instance.coreEnergyCap = freeMode.mechaCoreEnergyCap;</span><br><span class="line">    __instance.coreEnergy = __instance.coreEnergyCap;</span><br><span class="line">    __instance.corePowerGen = freeMode.mechaCorePowerGen;</span><br><span class="line">    __instance.reactorPowerGen = freeMode.mechaReactorPowerGen;</span><br><span class="line">    __instance.reactorEnergy = 0.0;</span><br><span class="line">    __instance.reactorItemId = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注释：</p><ul><li>Mecha<code>__instance</code>中，<code>Mecha</code> 为当前类的名称，<code>__instance</code>为Harmony的固有写法（有两个“_”）；</li><li>这种方法只限于操作公共public变量和函数；</li></ul></blockquote><h3 id="游戏私有变量"><a href="#游戏私有变量" class="headerlink" title="游戏私有变量"></a>游戏私有变量</h3><p>刚刚提到，“__instance”只能获取游戏的公共变量和方法，如果我们要获取游戏中私有的变量和方法的话，就需要用到Traverse工具；<br>我们可以通过Traverse工具,方便访问游戏里所有公有,私有,受保护的变量,方法,以及属性,</p><p>如我们想获取游戏中的变量，那么在我们的插件中就可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[HarmonyPostfix]</span><br><span class="line">[HarmonyPatch(typeof(Mecha), &quot;SetForNewGame&quot;)]</span><br><span class="line">public static void Mecha_SetForNewGame_Postfix(Mecha __instance)</span><br><span class="line">&#123;</span><br><span class="line">    // 获取 private float _dronesSpeed; 的值</span><br><span class="line">    var _droneCount= Traverse.Create(__instance).Field(&quot;_droneCount&quot;).GetValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><blockquote><p>来自 <a href="https://bbs.3dmgame.com/thread-5870433-1-1.html">https://bbs.3dmgame.com/thread-5870433-1-1.html</a><br><strong>关于Traverse的使用:</strong><br>Traverse是harmony类库下的一个工具类,也就是在一开始引用的using harmony;这条语句后,方便我们使用的一个类,首先我们要明白private和public还有protected三个关键词的区别,具体可以百度,我这里仅从结论讲明,除了public,其他的private和protected从外界是无法访问到的,但是用Traverse类不管它是public,private,protected,均可以强行访问,为什么不任何地方都使用Traverse去访问呢,因为性能问题,用Traverse要走映射,简单来说运行速度会有些许影响</p><p>Traverse的具体使用方法简单的来说明一下,Traverse.create(类的实例),表名我要将一个类的实例转为Traverse对象,简单来说就是附加功能,比如我们以前都是自己买菜,后来有了XX外卖,我们不需要亲力亲为了,XX外卖就等于Traverse对象了(这里就是将映射功能简单化了,不需要自己打代码了),这样我们就有一个可以访问类实例的Traverse对象了,在上面法宝的例子中,我是直接写为了<br>var itemID = Traverse.Create(<strong>instance).Field(“itemID”).GetValue();<br>这是一种简化的写法的,下面我分开并且逐步注释一下<br>Traverse t = Traverse.Create(</strong>instance);//根据__instance (ToilRefining类的实例) 创建 Traverse对象,并且用t表示<br>Traverse f = t.Field(“itemID”);//在ToilRefining实例里面有个itemID的字段,找到他并且创建一个Traverse对象,用f表示,这样可以强行访问 itemID,因为itemID是私有的没法直接访问<br>int itemID = f.GetValue();//将Traverse版本的itemID提取成可以直接访问的数值,因为Traverse并不知道原本itemID是什么类型的,所以我们要用标注这是个int类型了,从源代码中我们可以知道itemID的变量类型,对应修改即可<br>于是我们就访问到itemID了<br>既然有获取,自然就有修改,修改我们可以用f.SetValue(数值),这里就不需要指定了,因为你在输入数值的时候,他会自动把你输入的数据转成对应的类型</p><p>这里我说一下字段,属性,方法的意思,这是C#的基础,字段代表类变量,可以理解为类中的全局变量,可以再类中任意地方访问到</p><p>属性是字段的升级版,他在源代码中的样子是这样的</p><p>他跟字段的定义差不多,但是后面会有括号,里面还有set和get,这种样子的就是属性,我们不能通过Traverse.Field(字段名字),而是通过Traverse.Property(属性名字)来访问,如果定义中只有get,表名这个东西只能获取,不能更改(就是游戏开发者也不能),get和set都在就是可以获取也可以更改</p><p>最后就是方法,在C#中称为方法,C语言中称为函数,比如游戏源码中,MakeFaBao就是制作法宝的方法,他定义时后面跟随的是()这种括号,我们想要访问游戏private的方法可以用Traverse.Method(方法名字).GetValue()来运行,注意后面要加上.GetValue(),因为仅仅Traverse.Method(方法名字)是获取的方法的Traverse对象,而没有运行他</p><p>C#中有一个关键词是var,这个关键词是这个变量是智能根据你后面赋值来判断他的变量类型的<br>比如 var a = 6;//a是int类型<br>var b = “我是文字”;//b就是string类型的<br>于是之前为了itemID那么多行的代码就可以省略为var itemID = Traverse.Create(<strong>instance).Field(“itemID”).GetValue();一句话搞定<br>当然也可以var t = Traverse.Create(</strong>instance);<br>var itemID = t.Field(“itemID”).GetValue();var XXXX = t.Field(“XXXX”).GetValue();<br>来多次获取</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    最近又把戴森球计划(Dyson Sphere Program)下回来了，并且发现有个叫创世之书模组挺有意思的。了解到现在模组作者都苦于游戏的数字ID，决定尝试一下能不能解决这个问题。解决问题第二步，选择框架并尝试进行模组开发。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C#" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="Unity" scheme="http://www.lymone.cc/tags/Unity/"/>
    
    <category term="BepInEx" scheme="http://www.lymone.cc/tags/BepInEx/"/>
    
  </entry>
  
  <entry>
    <title>面向Unity的C#学习记录</title>
    <link href="http://www.lymone.cc/p/ddf9c66f.html"/>
    <id>http://www.lymone.cc/p/ddf9c66f.html</id>
    <published>2023-01-07T11:25:37.000Z</published>
    <updated>2023-03-03T13:04:08.329Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近又把戴森球计划(Dyson Sphere Program)下回来了，并且发现有个叫创世之书模组挺有意思的。了解到现在模组作者都苦于游戏的数字ID，决定尝试一下能不能解决这个问题。解决问题第一步，简单学一下C#。</p><span id="more"></span><h1 id="一、C-基础"><a href="#一、C-基础" class="headerlink" title="一、C#基础"></a>一、C#基础</h1><h2 id="1-我遇到的一些没见过东西"><a href="#1-我遇到的一些没见过东西" class="headerlink" title="1.我遇到的一些没见过东西"></a>1.我遇到的一些没见过东西</h2><h3 id="特性（Attribute）"><a href="#特性（Attribute）" class="headerlink" title="特性（Attribute）"></a>特性（Attribute）</h3><p><strong>特性（Attribute）</strong>是用于在运行时传递程序中各种元素（比如类、方法、结构、枚举、组件等）的行为信息的声明性标签。您可以通过使用特性向程序添加声明性信息。一个声明性标签是通过放置在它所应用的元素前面的方括号（[ ]）来描述的。</p><p>特性（Attribute）用于添加元数据，如编译器指令和注释、描述、方法、类等其他信息。.Net 框架提供了两种类型的特性：<em>预定义</em>特性和<em>自定义</em>特性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    最近又把戴森球计划(Dyson Sphere Program)下回来了，并且发现有个叫创世之书模组挺有意思的。了解到现在模组作者都苦于游戏的数字ID，决定尝试一下能不能解决这个问题。解决问题第一步，简单学一下C#。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://www.lymone.cc/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C#" scheme="http://www.lymone.cc/tags/C/"/>
    
    <category term="Unity" scheme="http://www.lymone.cc/tags/Unity/"/>
    
  </entry>
  
</feed>
